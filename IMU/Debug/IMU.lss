
IMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00802000  000039fc  00003a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c8b  0080206e  0080206e  00003afe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003afe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000848  00000000  00000000  00003b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e260  00000000  00000000  000043b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004dca  00000000  00000000  00012618  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000051d5  00000000  00000000  000173e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c98  00000000  00000000  0001c5b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000567e  00000000  00000000  0001e250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000090f9  00000000  00000000  000238ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000818  00000000  00000000  0002c9c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1a 01 	jmp	0x234	; 0x234 <__ctors_end>
       4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      38:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__vector_14>
      3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      70:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      74:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      78:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      7c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      80:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      84:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      88:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      8c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      90:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      94:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      98:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      9c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      a0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      a4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      a8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      ac:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      b0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      b4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      b8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      bc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      c0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      c4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      c8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      cc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      d0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      d4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      d8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      dc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      e0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      e4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      e8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      ec:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      f0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      f4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      f8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      fc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     100:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     104:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     108:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     10c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     110:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     114:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     118:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     11c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     120:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     124:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     128:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     12c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     130:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     134:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     138:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     13c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     140:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     144:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     148:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     14c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     150:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     154:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     158:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     15c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     160:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     164:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     168:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     16c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     170:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     174:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     178:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     17c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     180:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     184:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     188:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     18c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     190:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     194:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     198:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     19c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1a0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1a4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1a8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1ac:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1b0:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__vector_108>
     1b4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1b8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1bc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1c0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1c4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1c8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1cc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1d0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1d4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1d8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1dc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1e0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1e4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1e8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1ec:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1f0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1f4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1f8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1fc:	15 11       	cpse	r17, r5
     1fe:	15 11       	cpse	r17, r5
     200:	15 11       	cpse	r17, r5
     202:	62 11       	cpse	r22, r2
     204:	4a 11       	cpse	r20, r10
     206:	5f 11       	cpse	r21, r15
     208:	15 11       	cpse	r17, r5
     20a:	15 11       	cpse	r17, r5
     20c:	62 11       	cpse	r22, r2
     20e:	4a 11       	cpse	r20, r10

00000210 <__trampolines_start>:
     210:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <prvIdleTask>
     214:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <prvProcessReceivedCommands+0xf2>
     218:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <prvProcessReceivedCommands+0x122>
     21c:	0c 94 3a 03 	jmp	0x674	; 0x674 <vEventGroupSetBitsCallback>
     220:	0c 94 15 11 	jmp	0x222a	; 0x222a <prvProcessReceivedCommands+0x88>
     224:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <prvTimerTask>
     228:	0c 94 5f 11 	jmp	0x22be	; 0x22be <prvProcessReceivedCommands+0x11c>
     22c:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <vDisplayUpdateTask>
     230:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <vSensorDataDisplay>

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf ef       	ldi	r28, 0xFF	; 255
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	df e3       	ldi	r29, 0x3F	; 63
     23e:	de bf       	out	0x3e, r29	; 62
     240:	00 e0       	ldi	r16, 0x00	; 0
     242:	0c bf       	out	0x3c, r16	; 60

00000244 <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     244:	e9 ef       	ldi	r30, 0xF9	; 249
     246:	fc e2       	ldi	r31, 0x2C	; 44
     248:	8a ea       	ldi	r24, 0xAA	; 170
     24a:	90 e4       	ldi	r25, 0x40	; 64
     24c:	81 93       	st	Z+, r24
     24e:	e0 30       	cpi	r30, 0x00	; 0
     250:	f9 07       	cpc	r31, r25
     252:	e0 f3       	brcs	.-8      	; 0x24c <init_mem+0x8>

00000254 <__do_copy_data>:
     254:	10 e2       	ldi	r17, 0x20	; 32
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b0 e2       	ldi	r27, 0x20	; 32
     25a:	ec ef       	ldi	r30, 0xFC	; 252
     25c:	f9 e3       	ldi	r31, 0x39	; 57
     25e:	00 e0       	ldi	r16, 0x00	; 0
     260:	0b bf       	out	0x3b, r16	; 59
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x14>
     264:	07 90       	elpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	ae 36       	cpi	r26, 0x6E	; 110
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0x10>

0000026e <__do_clear_bss>:
     26e:	2c e2       	ldi	r18, 0x2C	; 44
     270:	ae e6       	ldi	r26, 0x6E	; 110
     272:	b0 e2       	ldi	r27, 0x20	; 32
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	a9 3f       	cpi	r26, 0xF9	; 249
     27a:	b2 07       	cpc	r27, r18
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	0e 94 75 13 	call	0x26ea	; 0x26ea <main>
     282:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <_exit>

00000286 <__bad_interrupt>:
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     28a:	0f 93       	push	r16
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	1f 92       	push	r1
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     296:	2f b7       	in	r18, 0x3f	; 63
     298:	29 83       	std	Y+1, r18	; 0x01
     29a:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     29c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     29e:	fc 01       	movw	r30, r24
     2a0:	08 ed       	ldi	r16, 0xD8	; 216
     2a2:	04 bf       	out	0x34, r16	; 52
     2a4:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	8f bf       	out	0x3f, r24	; 63
#endif
}
     2aa:	0f 90       	pop	r0
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	0f 91       	pop	r16
     2b2:	08 95       	ret

000002b4 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     2b4:	66 23       	and	r22, r22
     2b6:	11 f0       	breq	.+4      	; 0x2bc <CLKSYS_XOSC_Config+0x8>
     2b8:	90 e2       	ldi	r25, 0x20	; 32
     2ba:	01 c0       	rjmp	.+2      	; 0x2be <CLKSYS_XOSC_Config+0xa>
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	89 2b       	or	r24, r25
     2c0:	48 2b       	or	r20, r24
     2c2:	40 93 52 00 	sts	0x0052, r20	; 0x800052 <__TEXT_REGION_LENGTH__+0x7de052>
     2c6:	08 95       	ret

000002c8 <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
     2c8:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     2ca:	86 2b       	or	r24, r22
     2cc:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x7de055>
     2d0:	08 95       	ret

000002d2 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     2d2:	e0 e5       	ldi	r30, 0x50	; 80
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	90 81       	ld	r25, Z
     2d8:	28 2f       	mov	r18, r24
     2da:	20 95       	com	r18
     2dc:	92 23       	and	r25, r18
     2de:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     2e0:	90 81       	ld	r25, Z
	return clkEnabled;
}
     2e2:	89 23       	and	r24, r25
     2e4:	08 95       	ret

000002e6 <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     2e6:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
     2e8:	81 e4       	ldi	r24, 0x41	; 65
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 45 01 	call	0x28a	; 0x28a <CCPWrite>
     2f0:	08 95       	ret

000002f2 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     2fa:	00 e4       	ldi	r16, 0x40	; 64
     2fc:	10 e0       	ldi	r17, 0x00	; 0
     2fe:	f8 01       	movw	r30, r16
     300:	60 81       	ld	r22, Z
     302:	68 7f       	andi	r22, 0xF8	; 248
     304:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     306:	80 e4       	ldi	r24, 0x40	; 64
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 45 01 	call	0x28a	; 0x28a <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     30e:	f8 01       	movw	r30, r16
     310:	80 81       	ld	r24, Z
	return clkCtrl;
}
     312:	8c 23       	and	r24, r28
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	08 95       	ret

0000031c <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     31c:	fc 01       	movw	r30, r24
     31e:	90 81       	ld	r25, Z
     320:	90 7f       	andi	r25, 0xF0	; 240
     322:	69 2b       	or	r22, r25
     324:	60 83       	st	Z, r22
     326:	08 95       	ret

00000328 <TC0_ConfigWGM>:
     328:	fc 01       	movw	r30, r24
     32a:	91 81       	ldd	r25, Z+1	; 0x01
     32c:	98 7f       	andi	r25, 0xF8	; 248
     32e:	69 2b       	or	r22, r25
     330:	61 83       	std	Z+1, r22	; 0x01
     332:	08 95       	ret

00000334 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     334:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     336:	96 81       	ldd	r25, Z+6	; 0x06
     338:	9c 7f       	andi	r25, 0xFC	; 252
     33a:	69 2b       	or	r22, r25
     33c:	66 83       	std	Z+6, r22	; 0x06
     33e:	08 95       	ret

00000340 <software_reset>:
 //----------------------------------------------
 // catch heap overflow
 //
 void vApplicationMallocFailedHook( void )
 {
	 error(ERR_LOW_HEAP_SPACE);
     340:	00 00       	nop
     342:	88 ed       	ldi	r24, 0xD8	; 216
     344:	84 bf       	out	0x34, r24	; 52
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x7de079>
     34c:	08 95       	ret

0000034e <error>:
     34e:	0e 94 a0 01 	call	0x340	; 0x340 <software_reset>
     352:	08 95       	ret

00000354 <vApplicationStackOverflowHook>:
 {
	 /* Just to stop compiler warnings. */
	 (void) pxTask;
	 (void) pcTaskName;

	 error(ERR_STACK_OVERFLOW);
     354:	8b e2       	ldi	r24, 0x2B	; 43
     356:	0e 94 a7 01 	call	0x34e	; 0x34e <error>
     35a:	08 95       	ret

0000035c <prvTestWaitCondition>:
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
     35c:	0f 93       	push	r16
     35e:	01 11       	cpse	r16, r1
     360:	0c c0       	rjmp	.+24     	; 0x37a <prvTestWaitCondition+0x1e>
     362:	dc 01       	movw	r26, r24
     364:	cb 01       	movw	r24, r22
     366:	82 23       	and	r24, r18
     368:	93 23       	and	r25, r19
     36a:	a4 23       	and	r26, r20
     36c:	b5 23       	and	r27, r21
     36e:	89 2b       	or	r24, r25
     370:	8a 2b       	or	r24, r26
     372:	8b 2b       	or	r24, r27
     374:	79 f4       	brne	.+30     	; 0x394 <prvTestWaitCondition+0x38>
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	10 c0       	rjmp	.+32     	; 0x39a <prvTestWaitCondition+0x3e>
     37a:	dc 01       	movw	r26, r24
     37c:	cb 01       	movw	r24, r22
     37e:	82 23       	and	r24, r18
     380:	93 23       	and	r25, r19
     382:	a4 23       	and	r26, r20
     384:	b5 23       	and	r27, r21
     386:	28 17       	cp	r18, r24
     388:	39 07       	cpc	r19, r25
     38a:	4a 07       	cpc	r20, r26
     38c:	5b 07       	cpc	r21, r27
     38e:	21 f0       	breq	.+8      	; 0x398 <prvTestWaitCondition+0x3c>
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	03 c0       	rjmp	.+6      	; 0x39a <prvTestWaitCondition+0x3e>
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	01 c0       	rjmp	.+2      	; 0x39a <prvTestWaitCondition+0x3e>
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	0f 91       	pop	r16
     39c:	08 95       	ret

0000039e <xEventGroupCreate>:
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	80 e1       	ldi	r24, 0x10	; 16
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0e 94 4a 03 	call	0x694	; 0x694 <pvPortMalloc>
     3aa:	ec 01       	movw	r28, r24
     3ac:	00 97       	sbiw	r24, 0x00	; 0
     3ae:	41 f0       	breq	.+16     	; 0x3c0 <xEventGroupCreate+0x22>
     3b0:	fc 01       	movw	r30, r24
     3b2:	11 92       	st	Z+, r1
     3b4:	11 92       	st	Z+, r1
     3b6:	11 92       	st	Z+, r1
     3b8:	11 92       	st	Z+, r1
     3ba:	cf 01       	movw	r24, r30
     3bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vListInitialise>
     3c0:	ce 01       	movw	r24, r28
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <xEventGroupWaitBits>:
     3c8:	2f 92       	push	r2
     3ca:	3f 92       	push	r3
     3cc:	4f 92       	push	r4
     3ce:	5f 92       	push	r5
     3d0:	6f 92       	push	r6
     3d2:	7f 92       	push	r7
     3d4:	8f 92       	push	r8
     3d6:	9f 92       	push	r9
     3d8:	af 92       	push	r10
     3da:	bf 92       	push	r11
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	ec 01       	movw	r28, r24
     3ee:	4a 01       	movw	r8, r20
     3f0:	5b 01       	movw	r10, r22
     3f2:	62 2e       	mov	r6, r18
     3f4:	70 2e       	mov	r7, r16
     3f6:	0e 94 04 0b 	call	0x1608	; 0x1608 <vTaskSuspendAll>
     3fa:	28 80       	ld	r2, Y
     3fc:	39 80       	ldd	r3, Y+1	; 0x01
     3fe:	4a 80       	ldd	r4, Y+2	; 0x02
     400:	5b 80       	ldd	r5, Y+3	; 0x03
     402:	a5 01       	movw	r20, r10
     404:	94 01       	movw	r18, r8
     406:	c2 01       	movw	r24, r4
     408:	b1 01       	movw	r22, r2
     40a:	0e 94 ae 01 	call	0x35c	; 0x35c <prvTestWaitCondition>
     40e:	88 23       	and	r24, r24
     410:	a1 f0       	breq	.+40     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     412:	66 20       	and	r6, r6
     414:	89 f1       	breq	.+98     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     416:	d5 01       	movw	r26, r10
     418:	c4 01       	movw	r24, r8
     41a:	80 95       	com	r24
     41c:	90 95       	com	r25
     41e:	a0 95       	com	r26
     420:	b0 95       	com	r27
     422:	82 21       	and	r24, r2
     424:	93 21       	and	r25, r3
     426:	a4 21       	and	r26, r4
     428:	b5 21       	and	r27, r5
     42a:	88 83       	st	Y, r24
     42c:	99 83       	std	Y+1, r25	; 0x01
     42e:	aa 83       	std	Y+2, r26	; 0x02
     430:	bb 83       	std	Y+3, r27	; 0x03
     432:	c1 2c       	mov	r12, r1
     434:	d1 2c       	mov	r13, r1
     436:	76 01       	movw	r14, r12
     438:	22 c0       	rjmp	.+68     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     43a:	c1 14       	cp	r12, r1
     43c:	d1 04       	cpc	r13, r1
     43e:	e1 04       	cpc	r14, r1
     440:	f1 04       	cpc	r15, r1
     442:	e9 f0       	breq	.+58     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     444:	61 10       	cpse	r6, r1
     446:	04 c0       	rjmp	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	ba 01       	movw	r22, r20
     44e:	04 c0       	rjmp	.+8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	71 e0       	ldi	r23, 0x01	; 1
     458:	71 10       	cpse	r7, r1
     45a:	74 60       	ori	r23, 0x04	; 4
     45c:	48 29       	or	r20, r8
     45e:	59 29       	or	r21, r9
     460:	6a 29       	or	r22, r10
     462:	7b 29       	or	r23, r11
     464:	97 01       	movw	r18, r14
     466:	86 01       	movw	r16, r12
     468:	ce 01       	movw	r24, r28
     46a:	04 96       	adiw	r24, 0x04	; 4
     46c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vTaskPlaceOnUnorderedEventList>
     470:	21 2c       	mov	r2, r1
     472:	31 2c       	mov	r3, r1
     474:	21 01       	movw	r4, r2
     476:	03 c0       	rjmp	.+6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     478:	c1 2c       	mov	r12, r1
     47a:	d1 2c       	mov	r13, r1
     47c:	76 01       	movw	r14, r12
     47e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskResumeAll>
     482:	cd 28       	or	r12, r13
     484:	ce 28       	or	r12, r14
     486:	cf 28       	or	r12, r15
     488:	89 f1       	breq	.+98     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     48a:	81 11       	cpse	r24, r1
     48c:	02 c0       	rjmp	.+4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     48e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vPortYield>
     492:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <uxTaskResetEventItemValue>
     496:	6b 01       	movw	r12, r22
     498:	7c 01       	movw	r14, r24
     49a:	91 fd       	sbrc	r25, 1
     49c:	24 c0       	rjmp	.+72     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     49e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     4a2:	ff 93       	push	r31
     4a4:	f8 7f       	andi	r31, 0xF8	; 248
     4a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     4aa:	c8 80       	ld	r12, Y
     4ac:	d9 80       	ldd	r13, Y+1	; 0x01
     4ae:	ea 80       	ldd	r14, Y+2	; 0x02
     4b0:	fb 80       	ldd	r15, Y+3	; 0x03
     4b2:	07 2d       	mov	r16, r7
     4b4:	a5 01       	movw	r20, r10
     4b6:	94 01       	movw	r18, r8
     4b8:	c7 01       	movw	r24, r14
     4ba:	b6 01       	movw	r22, r12
     4bc:	0e 94 ae 01 	call	0x35c	; 0x35c <prvTestWaitCondition>
     4c0:	88 23       	and	r24, r24
     4c2:	71 f0       	breq	.+28     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4c4:	66 20       	and	r6, r6
     4c6:	61 f0       	breq	.+24     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4c8:	80 94       	com	r8
     4ca:	90 94       	com	r9
     4cc:	a0 94       	com	r10
     4ce:	b0 94       	com	r11
     4d0:	8c 20       	and	r8, r12
     4d2:	9d 20       	and	r9, r13
     4d4:	ae 20       	and	r10, r14
     4d6:	bf 20       	and	r11, r15
     4d8:	88 82       	st	Y, r8
     4da:	99 82       	std	Y+1, r9	; 0x01
     4dc:	aa 82       	std	Y+2, r10	; 0x02
     4de:	bb 82       	std	Y+3, r11	; 0x03
     4e0:	ff 91       	pop	r31
     4e2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     4e6:	16 01       	movw	r2, r12
     4e8:	27 01       	movw	r4, r14
     4ea:	55 24       	eor	r5, r5
     4ec:	c2 01       	movw	r24, r4
     4ee:	b1 01       	movw	r22, r2
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	ff 90       	pop	r15
     4fa:	ef 90       	pop	r14
     4fc:	df 90       	pop	r13
     4fe:	cf 90       	pop	r12
     500:	bf 90       	pop	r11
     502:	af 90       	pop	r10
     504:	9f 90       	pop	r9
     506:	8f 90       	pop	r8
     508:	7f 90       	pop	r7
     50a:	6f 90       	pop	r6
     50c:	5f 90       	pop	r5
     50e:	4f 90       	pop	r4
     510:	3f 90       	pop	r3
     512:	2f 90       	pop	r2
     514:	08 95       	ret

00000516 <xEventGroupClearBits>:
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
     51a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     51e:	ff 93       	push	r31
     520:	f8 7f       	andi	r31, 0xF8	; 248
     522:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     526:	fc 01       	movw	r30, r24
     528:	00 81       	ld	r16, Z
     52a:	11 81       	ldd	r17, Z+1	; 0x01
     52c:	22 81       	ldd	r18, Z+2	; 0x02
     52e:	33 81       	ldd	r19, Z+3	; 0x03
     530:	40 95       	com	r20
     532:	50 95       	com	r21
     534:	60 95       	com	r22
     536:	70 95       	com	r23
     538:	40 23       	and	r20, r16
     53a:	51 23       	and	r21, r17
     53c:	62 23       	and	r22, r18
     53e:	73 23       	and	r23, r19
     540:	40 83       	st	Z, r20
     542:	51 83       	std	Z+1, r21	; 0x01
     544:	62 83       	std	Z+2, r22	; 0x02
     546:	73 83       	std	Z+3, r23	; 0x03
     548:	ff 91       	pop	r31
     54a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     54e:	c9 01       	movw	r24, r18
     550:	b8 01       	movw	r22, r16
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	08 95       	ret

00000558 <xEventGroupSetBits>:
     558:	4f 92       	push	r4
     55a:	5f 92       	push	r5
     55c:	6f 92       	push	r6
     55e:	7f 92       	push	r7
     560:	af 92       	push	r10
     562:	bf 92       	push	r11
     564:	cf 92       	push	r12
     566:	df 92       	push	r13
     568:	ef 92       	push	r14
     56a:	ff 92       	push	r15
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	ec 01       	movw	r28, r24
     576:	6a 01       	movw	r12, r20
     578:	7b 01       	movw	r14, r22
     57a:	8c 01       	movw	r16, r24
     57c:	09 5f       	subi	r16, 0xF9	; 249
     57e:	1f 4f       	sbci	r17, 0xFF	; 255
     580:	0e 94 04 0b 	call	0x1608	; 0x1608 <vTaskSuspendAll>
     584:	eb 85       	ldd	r30, Y+11	; 0x0b
     586:	fc 85       	ldd	r31, Y+12	; 0x0c
     588:	88 81       	ld	r24, Y
     58a:	99 81       	ldd	r25, Y+1	; 0x01
     58c:	aa 81       	ldd	r26, Y+2	; 0x02
     58e:	bb 81       	ldd	r27, Y+3	; 0x03
     590:	c8 2a       	or	r12, r24
     592:	d9 2a       	or	r13, r25
     594:	ea 2a       	or	r14, r26
     596:	fb 2a       	or	r15, r27
     598:	c8 82       	st	Y, r12
     59a:	d9 82       	std	Y+1, r13	; 0x01
     59c:	ea 82       	std	Y+2, r14	; 0x02
     59e:	fb 82       	std	Y+3, r15	; 0x03
     5a0:	c1 2c       	mov	r12, r1
     5a2:	d1 2c       	mov	r13, r1
     5a4:	76 01       	movw	r14, r12
     5a6:	3d c0       	rjmp	.+122    	; 0x622 <xEventGroupSetBits+0xca>
     5a8:	a4 80       	ldd	r10, Z+4	; 0x04
     5aa:	b5 80       	ldd	r11, Z+5	; 0x05
     5ac:	80 81       	ld	r24, Z
     5ae:	91 81       	ldd	r25, Z+1	; 0x01
     5b0:	a2 81       	ldd	r26, Z+2	; 0x02
     5b2:	b3 81       	ldd	r27, Z+3	; 0x03
     5b4:	ac 01       	movw	r20, r24
     5b6:	bd 01       	movw	r22, r26
     5b8:	77 27       	eor	r23, r23
     5ba:	b2 fd       	sbrc	r27, 2
     5bc:	0e c0       	rjmp	.+28     	; 0x5da <xEventGroupSetBits+0x82>
     5be:	48 80       	ld	r4, Y
     5c0:	59 80       	ldd	r5, Y+1	; 0x01
     5c2:	6a 80       	ldd	r6, Y+2	; 0x02
     5c4:	7b 80       	ldd	r7, Y+3	; 0x03
     5c6:	44 22       	and	r4, r20
     5c8:	55 22       	and	r5, r21
     5ca:	66 22       	and	r6, r22
     5cc:	77 22       	and	r7, r23
     5ce:	45 28       	or	r4, r5
     5d0:	46 28       	or	r4, r6
     5d2:	47 28       	or	r4, r7
     5d4:	89 f4       	brne	.+34     	; 0x5f8 <xEventGroupSetBits+0xa0>
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	12 c0       	rjmp	.+36     	; 0x5fe <xEventGroupSetBits+0xa6>
     5da:	48 80       	ld	r4, Y
     5dc:	59 80       	ldd	r5, Y+1	; 0x01
     5de:	6a 80       	ldd	r6, Y+2	; 0x02
     5e0:	7b 80       	ldd	r7, Y+3	; 0x03
     5e2:	44 22       	and	r4, r20
     5e4:	55 22       	and	r5, r21
     5e6:	66 22       	and	r6, r22
     5e8:	77 22       	and	r7, r23
     5ea:	44 15       	cp	r20, r4
     5ec:	55 05       	cpc	r21, r5
     5ee:	66 05       	cpc	r22, r6
     5f0:	77 05       	cpc	r23, r7
     5f2:	21 f0       	breq	.+8      	; 0x5fc <xEventGroupSetBits+0xa4>
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	03 c0       	rjmp	.+6      	; 0x5fe <xEventGroupSetBits+0xa6>
     5f8:	21 e0       	ldi	r18, 0x01	; 1
     5fa:	01 c0       	rjmp	.+2      	; 0x5fe <xEventGroupSetBits+0xa6>
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	22 23       	and	r18, r18
     600:	71 f0       	breq	.+28     	; 0x61e <xEventGroupSetBits+0xc6>
     602:	b0 ff       	sbrs	r27, 0
     604:	04 c0       	rjmp	.+8      	; 0x60e <xEventGroupSetBits+0xb6>
     606:	c4 2a       	or	r12, r20
     608:	d5 2a       	or	r13, r21
     60a:	e6 2a       	or	r14, r22
     60c:	f7 2a       	or	r15, r23
     60e:	48 81       	ld	r20, Y
     610:	59 81       	ldd	r21, Y+1	; 0x01
     612:	6a 81       	ldd	r22, Y+2	; 0x02
     614:	7b 81       	ldd	r23, Y+3	; 0x03
     616:	72 60       	ori	r23, 0x02	; 2
     618:	cf 01       	movw	r24, r30
     61a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <vTaskRemoveFromUnorderedEventList>
     61e:	ea 2d       	mov	r30, r10
     620:	fb 2d       	mov	r31, r11
     622:	e0 17       	cp	r30, r16
     624:	f1 07       	cpc	r31, r17
     626:	09 f0       	breq	.+2      	; 0x62a <xEventGroupSetBits+0xd2>
     628:	bf cf       	rjmp	.-130    	; 0x5a8 <xEventGroupSetBits+0x50>
     62a:	c0 94       	com	r12
     62c:	d0 94       	com	r13
     62e:	e0 94       	com	r14
     630:	f0 94       	com	r15
     632:	88 81       	ld	r24, Y
     634:	99 81       	ldd	r25, Y+1	; 0x01
     636:	aa 81       	ldd	r26, Y+2	; 0x02
     638:	bb 81       	ldd	r27, Y+3	; 0x03
     63a:	c8 22       	and	r12, r24
     63c:	d9 22       	and	r13, r25
     63e:	ea 22       	and	r14, r26
     640:	fb 22       	and	r15, r27
     642:	c8 82       	st	Y, r12
     644:	d9 82       	std	Y+1, r13	; 0x01
     646:	ea 82       	std	Y+2, r14	; 0x02
     648:	fb 82       	std	Y+3, r15	; 0x03
     64a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskResumeAll>
     64e:	68 81       	ld	r22, Y
     650:	79 81       	ldd	r23, Y+1	; 0x01
     652:	8a 81       	ldd	r24, Y+2	; 0x02
     654:	9b 81       	ldd	r25, Y+3	; 0x03
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	ff 90       	pop	r15
     660:	ef 90       	pop	r14
     662:	df 90       	pop	r13
     664:	cf 90       	pop	r12
     666:	bf 90       	pop	r11
     668:	af 90       	pop	r10
     66a:	7f 90       	pop	r7
     66c:	6f 90       	pop	r6
     66e:	5f 90       	pop	r5
     670:	4f 90       	pop	r4
     672:	08 95       	ret

00000674 <vEventGroupSetBitsCallback>:
     674:	0e 94 ac 02 	call	0x558	; 0x558 <xEventGroupSetBits>
     678:	08 95       	ret

0000067a <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     67e:	89 01       	movw	r16, r18
     680:	9a 01       	movw	r18, r20
     682:	ab 01       	movw	r20, r22
     684:	bc 01       	movw	r22, r24
     686:	8a e3       	ldi	r24, 0x3A	; 58
     688:	93 e0       	ldi	r25, 0x03	; 3
     68a:	0e 94 8d 11 	call	0x231a	; 0x231a <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     69a:	0e 94 04 0b 	call	0x1608	; 0x1608 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     69e:	20 91 6e 20 	lds	r18, 0x206E	; 0x80206e <__data_end>
     6a2:	30 91 6f 20 	lds	r19, 0x206F	; 0x80206f <__data_end+0x1>
     6a6:	c9 01       	movw	r24, r18
     6a8:	8c 0f       	add	r24, r28
     6aa:	9d 1f       	adc	r25, r29
     6ac:	88 3b       	cpi	r24, 0xB8	; 184
     6ae:	4b e0       	ldi	r20, 0x0B	; 11
     6b0:	94 07       	cpc	r25, r20
     6b2:	58 f4       	brcc	.+22     	; 0x6ca <pvPortMalloc+0x36>
     6b4:	28 17       	cp	r18, r24
     6b6:	39 07       	cpc	r19, r25
     6b8:	58 f4       	brcc	.+22     	; 0x6d0 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     6ba:	e9 01       	movw	r28, r18
     6bc:	c0 59       	subi	r28, 0x90	; 144
     6be:	df 4d       	sbci	r29, 0xDF	; 223
			xNextFreeByte += xWantedSize;			
     6c0:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <__data_end>
     6c4:	90 93 6f 20 	sts	0x206F, r25	; 0x80206f <__data_end+0x1>
     6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     6ca:	c0 e0       	ldi	r28, 0x00	; 0
     6cc:	d0 e0       	ldi	r29, 0x00	; 0
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <pvPortMalloc+0x40>
     6d0:	c0 e0       	ldi	r28, 0x00	; 0
     6d2:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     6d4:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     6d8:	ce 01       	movw	r24, r28
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     6e0:	08 95       	ret

000006e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     6e2:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6e4:	03 96       	adiw	r24, 0x03	; 3
     6e6:	81 83       	std	Z+1, r24	; 0x01
     6e8:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     6ea:	4f ef       	ldi	r20, 0xFF	; 255
     6ec:	5f ef       	ldi	r21, 0xFF	; 255
     6ee:	ba 01       	movw	r22, r20
     6f0:	43 83       	std	Z+3, r20	; 0x03
     6f2:	54 83       	std	Z+4, r21	; 0x04
     6f4:	65 83       	std	Z+5, r22	; 0x05
     6f6:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6f8:	87 83       	std	Z+7, r24	; 0x07
     6fa:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6fc:	81 87       	std	Z+9, r24	; 0x09
     6fe:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     700:	10 82       	st	Z, r1
     702:	08 95       	ret

00000704 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     704:	fc 01       	movw	r30, r24
     706:	12 86       	std	Z+10, r1	; 0x0a
     708:	13 86       	std	Z+11, r1	; 0x0b
     70a:	08 95       	ret

0000070c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	9c 01       	movw	r18, r24
     712:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     714:	dc 01       	movw	r26, r24
     716:	11 96       	adiw	r26, 0x01	; 1
     718:	cd 91       	ld	r28, X+
     71a:	dc 91       	ld	r29, X
     71c:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     71e:	c4 83       	std	Z+4, r28	; 0x04
     720:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     722:	8e 81       	ldd	r24, Y+6	; 0x06
     724:	9f 81       	ldd	r25, Y+7	; 0x07
     726:	86 83       	std	Z+6, r24	; 0x06
     728:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     72a:	8e 81       	ldd	r24, Y+6	; 0x06
     72c:	9f 81       	ldd	r25, Y+7	; 0x07
     72e:	dc 01       	movw	r26, r24
     730:	14 96       	adiw	r26, 0x04	; 4
     732:	6d 93       	st	X+, r22
     734:	7c 93       	st	X, r23
     736:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     738:	6e 83       	std	Y+6, r22	; 0x06
     73a:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     73c:	22 87       	std	Z+10, r18	; 0x0a
     73e:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     740:	f9 01       	movw	r30, r18
     742:	80 81       	ld	r24, Z
     744:	8f 5f       	subi	r24, 0xFF	; 255
     746:	80 83       	st	Z, r24
}
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     758:	08 81       	ld	r16, Y
     75a:	19 81       	ldd	r17, Y+1	; 0x01
     75c:	2a 81       	ldd	r18, Y+2	; 0x02
     75e:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     760:	0f 3f       	cpi	r16, 0xFF	; 255
     762:	4f ef       	ldi	r20, 0xFF	; 255
     764:	14 07       	cpc	r17, r20
     766:	24 07       	cpc	r18, r20
     768:	34 07       	cpc	r19, r20
     76a:	21 f4       	brne	.+8      	; 0x774 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     76c:	fc 01       	movw	r30, r24
     76e:	a1 85       	ldd	r26, Z+9	; 0x09
     770:	b2 85       	ldd	r27, Z+10	; 0x0a
     772:	11 c0       	rjmp	.+34     	; 0x796 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     774:	dc 01       	movw	r26, r24
     776:	13 96       	adiw	r26, 0x03	; 3
     778:	01 c0       	rjmp	.+2      	; 0x77c <vListInsert+0x2e>
     77a:	df 01       	movw	r26, r30
     77c:	14 96       	adiw	r26, 0x04	; 4
     77e:	ed 91       	ld	r30, X+
     780:	fc 91       	ld	r31, X
     782:	15 97       	sbiw	r26, 0x05	; 5
     784:	40 81       	ld	r20, Z
     786:	51 81       	ldd	r21, Z+1	; 0x01
     788:	62 81       	ldd	r22, Z+2	; 0x02
     78a:	73 81       	ldd	r23, Z+3	; 0x03
     78c:	04 17       	cp	r16, r20
     78e:	15 07       	cpc	r17, r21
     790:	26 07       	cpc	r18, r22
     792:	37 07       	cpc	r19, r23
     794:	90 f7       	brcc	.-28     	; 0x77a <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     796:	14 96       	adiw	r26, 0x04	; 4
     798:	ed 91       	ld	r30, X+
     79a:	fc 91       	ld	r31, X
     79c:	15 97       	sbiw	r26, 0x05	; 5
     79e:	ec 83       	std	Y+4, r30	; 0x04
     7a0:	fd 83       	std	Y+5, r31	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     7a2:	c6 83       	std	Z+6, r28	; 0x06
     7a4:	d7 83       	std	Z+7, r29	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     7a6:	ae 83       	std	Y+6, r26	; 0x06
     7a8:	bf 83       	std	Y+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     7aa:	14 96       	adiw	r26, 0x04	; 4
     7ac:	cd 93       	st	X+, r28
     7ae:	dc 93       	st	X, r29
     7b0:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     7b2:	8a 87       	std	Y+10, r24	; 0x0a
     7b4:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 81       	ld	r18, Z
     7ba:	2f 5f       	subi	r18, 0xFF	; 255
     7bc:	20 83       	st	Z, r18
}
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	08 95       	ret

000007c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     7ce:	a2 85       	ldd	r26, Z+10	; 0x0a
     7d0:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     7d2:	c4 81       	ldd	r28, Z+4	; 0x04
     7d4:	d5 81       	ldd	r29, Z+5	; 0x05
     7d6:	86 81       	ldd	r24, Z+6	; 0x06
     7d8:	97 81       	ldd	r25, Z+7	; 0x07
     7da:	8e 83       	std	Y+6, r24	; 0x06
     7dc:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     7de:	c6 81       	ldd	r28, Z+6	; 0x06
     7e0:	d7 81       	ldd	r29, Z+7	; 0x07
     7e2:	84 81       	ldd	r24, Z+4	; 0x04
     7e4:	95 81       	ldd	r25, Z+5	; 0x05
     7e6:	8c 83       	std	Y+4, r24	; 0x04
     7e8:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     7ea:	11 96       	adiw	r26, 0x01	; 1
     7ec:	8d 91       	ld	r24, X+
     7ee:	9c 91       	ld	r25, X
     7f0:	12 97       	sbiw	r26, 0x02	; 2
     7f2:	e8 17       	cp	r30, r24
     7f4:	f9 07       	cpc	r31, r25
     7f6:	31 f4       	brne	.+12     	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     7f8:	86 81       	ldd	r24, Z+6	; 0x06
     7fa:	97 81       	ldd	r25, Z+7	; 0x07
     7fc:	11 96       	adiw	r26, 0x01	; 1
     7fe:	8d 93       	st	X+, r24
     800:	9c 93       	st	X, r25
     802:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     804:	12 86       	std	Z+10, r1	; 0x0a
     806:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     808:	8c 91       	ld	r24, X
     80a:	81 50       	subi	r24, 0x01	; 1
     80c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     80e:	8c 91       	ld	r24, X
}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	08 95       	ret

00000816 <prvSetupTimerInterrupt>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     816:	83 ef       	ldi	r24, 0xF3	; 243
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x7de826>
     81e:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x7de827>
     822:	65 e0       	ldi	r22, 0x05	; 5
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	98 e0       	ldi	r25, 0x08	; 8
     828:	0e 94 8e 01 	call	0x31c	; 0x31c <TC0_ConfigClockSource>
     82c:	61 e0       	ldi	r22, 0x01	; 1
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	98 e0       	ldi	r25, 0x08	; 8
     832:	0e 94 9a 01 	call	0x334	; 0x334 <TC0_SetOverflowIntLevel>
     836:	08 95       	ret

00000838 <_portSetInterruptMaskFromIsr>:
     838:	e0 ea       	ldi	r30, 0xA0	; 160
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	82 81       	ldd	r24, Z+2	; 0x02
     83e:	92 81       	ldd	r25, Z+2	; 0x02
     840:	98 7f       	andi	r25, 0xF8	; 248
     842:	92 83       	std	Z+2, r25	; 0x02
     844:	08 95       	ret

00000846 <portTaskIncrementTick>:
     846:	cf 93       	push	r28
     848:	0e 94 1c 04 	call	0x838	; 0x838 <_portSetInterruptMaskFromIsr>
     84c:	c8 2f       	mov	r28, r24
     84e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <xTaskIncrementTick>
     852:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <pxPortInitialiseStack>:
     85a:	cf 92       	push	r12
     85c:	df 92       	push	r13
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	31 e1       	ldi	r19, 0x11	; 17
     864:	fc 01       	movw	r30, r24
     866:	30 83       	st	Z, r19
     868:	31 97       	sbiw	r30, 0x01	; 1
     86a:	22 e2       	ldi	r18, 0x22	; 34
     86c:	20 83       	st	Z, r18
     86e:	31 97       	sbiw	r30, 0x01	; 1
     870:	a3 e3       	ldi	r26, 0x33	; 51
     872:	a0 83       	st	Z, r26
     874:	6b 01       	movw	r12, r22
     876:	e1 2c       	mov	r14, r1
     878:	f1 2c       	mov	r15, r1
     87a:	31 97       	sbiw	r30, 0x01	; 1
     87c:	60 83       	st	Z, r22
     87e:	31 97       	sbiw	r30, 0x01	; 1
     880:	d0 82       	st	Z, r13
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	e0 82       	st	Z, r14
     886:	31 97       	sbiw	r30, 0x01	; 1
     888:	61 e3       	ldi	r22, 0x31	; 49
     88a:	60 83       	st	Z, r22
     88c:	31 97       	sbiw	r30, 0x01	; 1
     88e:	60 e8       	ldi	r22, 0x80	; 128
     890:	60 83       	st	Z, r22
     892:	31 97       	sbiw	r30, 0x01	; 1
     894:	67 e8       	ldi	r22, 0x87	; 135
     896:	60 83       	st	Z, r22
     898:	31 97       	sbiw	r30, 0x01	; 1
     89a:	10 82       	st	Z, r1
     89c:	31 97       	sbiw	r30, 0x01	; 1
     89e:	10 82       	st	Z, r1
     8a0:	31 97       	sbiw	r30, 0x01	; 1
     8a2:	62 e0       	ldi	r22, 0x02	; 2
     8a4:	60 83       	st	Z, r22
     8a6:	31 97       	sbiw	r30, 0x01	; 1
     8a8:	63 e0       	ldi	r22, 0x03	; 3
     8aa:	60 83       	st	Z, r22
     8ac:	31 97       	sbiw	r30, 0x01	; 1
     8ae:	64 e0       	ldi	r22, 0x04	; 4
     8b0:	60 83       	st	Z, r22
     8b2:	31 97       	sbiw	r30, 0x01	; 1
     8b4:	65 e0       	ldi	r22, 0x05	; 5
     8b6:	60 83       	st	Z, r22
     8b8:	31 97       	sbiw	r30, 0x01	; 1
     8ba:	66 e0       	ldi	r22, 0x06	; 6
     8bc:	60 83       	st	Z, r22
     8be:	31 97       	sbiw	r30, 0x01	; 1
     8c0:	67 e0       	ldi	r22, 0x07	; 7
     8c2:	60 83       	st	Z, r22
     8c4:	31 97       	sbiw	r30, 0x01	; 1
     8c6:	68 e0       	ldi	r22, 0x08	; 8
     8c8:	60 83       	st	Z, r22
     8ca:	31 97       	sbiw	r30, 0x01	; 1
     8cc:	69 e0       	ldi	r22, 0x09	; 9
     8ce:	60 83       	st	Z, r22
     8d0:	31 97       	sbiw	r30, 0x01	; 1
     8d2:	60 e1       	ldi	r22, 0x10	; 16
     8d4:	60 83       	st	Z, r22
     8d6:	31 97       	sbiw	r30, 0x01	; 1
     8d8:	30 83       	st	Z, r19
     8da:	31 97       	sbiw	r30, 0x01	; 1
     8dc:	32 e1       	ldi	r19, 0x12	; 18
     8de:	30 83       	st	Z, r19
     8e0:	31 97       	sbiw	r30, 0x01	; 1
     8e2:	33 e1       	ldi	r19, 0x13	; 19
     8e4:	30 83       	st	Z, r19
     8e6:	31 97       	sbiw	r30, 0x01	; 1
     8e8:	34 e1       	ldi	r19, 0x14	; 20
     8ea:	30 83       	st	Z, r19
     8ec:	31 97       	sbiw	r30, 0x01	; 1
     8ee:	35 e1       	ldi	r19, 0x15	; 21
     8f0:	30 83       	st	Z, r19
     8f2:	31 97       	sbiw	r30, 0x01	; 1
     8f4:	36 e1       	ldi	r19, 0x16	; 22
     8f6:	30 83       	st	Z, r19
     8f8:	31 97       	sbiw	r30, 0x01	; 1
     8fa:	37 e1       	ldi	r19, 0x17	; 23
     8fc:	30 83       	st	Z, r19
     8fe:	31 97       	sbiw	r30, 0x01	; 1
     900:	38 e1       	ldi	r19, 0x18	; 24
     902:	30 83       	st	Z, r19
     904:	31 97       	sbiw	r30, 0x01	; 1
     906:	39 e1       	ldi	r19, 0x19	; 25
     908:	30 83       	st	Z, r19
     90a:	31 97       	sbiw	r30, 0x01	; 1
     90c:	30 e2       	ldi	r19, 0x20	; 32
     90e:	30 83       	st	Z, r19
     910:	31 97       	sbiw	r30, 0x01	; 1
     912:	31 e2       	ldi	r19, 0x21	; 33
     914:	30 83       	st	Z, r19
     916:	31 97       	sbiw	r30, 0x01	; 1
     918:	20 83       	st	Z, r18
     91a:	31 97       	sbiw	r30, 0x01	; 1
     91c:	23 e2       	ldi	r18, 0x23	; 35
     91e:	20 83       	st	Z, r18
     920:	6a 01       	movw	r12, r20
     922:	31 97       	sbiw	r30, 0x01	; 1
     924:	40 83       	st	Z, r20
     926:	31 97       	sbiw	r30, 0x01	; 1
     928:	d0 82       	st	Z, r13
     92a:	31 97       	sbiw	r30, 0x01	; 1
     92c:	26 e2       	ldi	r18, 0x26	; 38
     92e:	20 83       	st	Z, r18
     930:	31 97       	sbiw	r30, 0x01	; 1
     932:	27 e2       	ldi	r18, 0x27	; 39
     934:	20 83       	st	Z, r18
     936:	31 97       	sbiw	r30, 0x01	; 1
     938:	28 e2       	ldi	r18, 0x28	; 40
     93a:	20 83       	st	Z, r18
     93c:	31 97       	sbiw	r30, 0x01	; 1
     93e:	29 e2       	ldi	r18, 0x29	; 41
     940:	20 83       	st	Z, r18
     942:	31 97       	sbiw	r30, 0x01	; 1
     944:	20 e3       	ldi	r18, 0x30	; 48
     946:	20 83       	st	Z, r18
     948:	88 97       	sbiw	r24, 0x28	; 40
     94a:	ff 90       	pop	r15
     94c:	ef 90       	pop	r14
     94e:	df 90       	pop	r13
     950:	cf 90       	pop	r12
     952:	08 95       	ret

00000954 <xPortStartScheduler>:
     954:	0e 94 0b 04 	call	0x816	; 0x816 <prvSetupTimerInterrupt>
     958:	a0 91 96 2c 	lds	r26, 0x2C96	; 0x802c96 <pxCurrentTCB>
     95c:	b0 91 97 2c 	lds	r27, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
     960:	0d 90       	ld	r0, X+
     962:	0d be       	out	0x3d, r0	; 61
     964:	0d 90       	ld	r0, X+
     966:	0e be       	out	0x3e, r0	; 62
     968:	ef 91       	pop	r30
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	bf 91       	pop	r27
     970:	af 91       	pop	r26
     972:	9f 91       	pop	r25
     974:	8f 91       	pop	r24
     976:	7f 91       	pop	r23
     978:	6f 91       	pop	r22
     97a:	5f 91       	pop	r21
     97c:	4f 91       	pop	r20
     97e:	3f 91       	pop	r19
     980:	2f 91       	pop	r18
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	cf 90       	pop	r12
     98e:	bf 90       	pop	r11
     990:	af 90       	pop	r10
     992:	9f 90       	pop	r9
     994:	8f 90       	pop	r8
     996:	7f 90       	pop	r7
     998:	6f 90       	pop	r6
     99a:	5f 90       	pop	r5
     99c:	4f 90       	pop	r4
     99e:	3f 90       	pop	r3
     9a0:	2f 90       	pop	r2
     9a2:	1f 90       	pop	r1
     9a4:	0f 90       	pop	r0
     9a6:	ff 91       	pop	r31
     9a8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     9ac:	ff 91       	pop	r31
     9ae:	ff bf       	out	0x3f, r31	; 63
     9b0:	ff 91       	pop	r31
     9b2:	08 95       	ret
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	08 95       	ret

000009b8 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     9b8:	ff 93       	push	r31
     9ba:	ff b7       	in	r31, 0x3f	; 63
     9bc:	ff 93       	push	r31
     9be:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     9c2:	ff 93       	push	r31
     9c4:	f8 7f       	andi	r31, 0xF8	; 248
     9c6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     9ca:	0f 92       	push	r0
     9cc:	1f 92       	push	r1
     9ce:	11 24       	eor	r1, r1
     9d0:	2f 92       	push	r2
     9d2:	3f 92       	push	r3
     9d4:	4f 92       	push	r4
     9d6:	5f 92       	push	r5
     9d8:	6f 92       	push	r6
     9da:	7f 92       	push	r7
     9dc:	8f 92       	push	r8
     9de:	9f 92       	push	r9
     9e0:	af 92       	push	r10
     9e2:	bf 92       	push	r11
     9e4:	cf 92       	push	r12
     9e6:	df 92       	push	r13
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	2f 93       	push	r18
     9f2:	3f 93       	push	r19
     9f4:	4f 93       	push	r20
     9f6:	5f 93       	push	r21
     9f8:	6f 93       	push	r22
     9fa:	7f 93       	push	r23
     9fc:	8f 93       	push	r24
     9fe:	9f 93       	push	r25
     a00:	af 93       	push	r26
     a02:	bf 93       	push	r27
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	ef 93       	push	r30
     a0a:	a0 91 96 2c 	lds	r26, 0x2C96	; 0x802c96 <pxCurrentTCB>
     a0e:	b0 91 97 2c 	lds	r27, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
     a12:	0d b6       	in	r0, 0x3d	; 61
     a14:	0d 92       	st	X+, r0
     a16:	0e b6       	in	r0, 0x3e	; 62
     a18:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     a1a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     a1e:	a0 91 96 2c 	lds	r26, 0x2C96	; 0x802c96 <pxCurrentTCB>
     a22:	b0 91 97 2c 	lds	r27, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
     a26:	0d 90       	ld	r0, X+
     a28:	0d be       	out	0x3d, r0	; 61
     a2a:	0d 90       	ld	r0, X+
     a2c:	0e be       	out	0x3e, r0	; 62
     a2e:	ef 91       	pop	r30
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	bf 91       	pop	r27
     a36:	af 91       	pop	r26
     a38:	9f 91       	pop	r25
     a3a:	8f 91       	pop	r24
     a3c:	7f 91       	pop	r23
     a3e:	6f 91       	pop	r22
     a40:	5f 91       	pop	r21
     a42:	4f 91       	pop	r20
     a44:	3f 91       	pop	r19
     a46:	2f 91       	pop	r18
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	df 90       	pop	r13
     a52:	cf 90       	pop	r12
     a54:	bf 90       	pop	r11
     a56:	af 90       	pop	r10
     a58:	9f 90       	pop	r9
     a5a:	8f 90       	pop	r8
     a5c:	7f 90       	pop	r7
     a5e:	6f 90       	pop	r6
     a60:	5f 90       	pop	r5
     a62:	4f 90       	pop	r4
     a64:	3f 90       	pop	r3
     a66:	2f 90       	pop	r2
     a68:	1f 90       	pop	r1
     a6a:	0f 90       	pop	r0
     a6c:	ff 91       	pop	r31
     a6e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     a72:	ff 91       	pop	r31
     a74:	ff bf       	out	0x3f, r31	; 63
     a76:	ff 91       	pop	r31
	asm volatile ( "ret" );
     a78:	08 95       	ret

00000a7a <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     a7a:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     a7c:	90 91 f2 2c 	lds	r25, 0x2CF2	; 0x802cf2 <intTaskSwitchPending>
     a80:	89 2b       	or	r24, r25
     a82:	80 93 f2 2c 	sts	0x2CF2, r24	; 0x802cf2 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     a86:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     a8a:	91 30       	cpi	r25, 0x01	; 1
     a8c:	41 f0       	breq	.+16     	; 0xa9e <portTaskSwitchContext+0x24>
     a8e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     a92:	92 30       	cpi	r25, 0x02	; 2
     a94:	21 f0       	breq	.+8      	; 0xa9e <portTaskSwitchContext+0x24>
     a96:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	59 f4       	brne	.+22     	; 0xab4 <portTaskSwitchContext+0x3a>
     a9e:	88 23       	and	r24, r24
     aa0:	49 f0       	breq	.+18     	; 0xab4 <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     aa2:	0e 94 1c 04 	call	0x838	; 0x838 <_portSetInterruptMaskFromIsr>
     aa6:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     aa8:	10 92 f2 2c 	sts	0x2CF2, r1	; 0x802cf2 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     aac:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     ab0:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		}                                          					
	}
     ab4:	cf 91       	pop	r28
     ab6:	08 95       	ret

00000ab8 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     ab8:	ff 93       	push	r31
     aba:	ff b7       	in	r31, 0x3f	; 63
     abc:	ff 93       	push	r31
     abe:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ac2:	ff 93       	push	r31
     ac4:	f8 7f       	andi	r31, 0xF8	; 248
     ac6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     aca:	0f 92       	push	r0
     acc:	1f 92       	push	r1
     ace:	11 24       	eor	r1, r1
     ad0:	2f 92       	push	r2
     ad2:	3f 92       	push	r3
     ad4:	4f 92       	push	r4
     ad6:	5f 92       	push	r5
     ad8:	6f 92       	push	r6
     ada:	7f 92       	push	r7
     adc:	8f 92       	push	r8
     ade:	9f 92       	push	r9
     ae0:	af 92       	push	r10
     ae2:	bf 92       	push	r11
     ae4:	cf 92       	push	r12
     ae6:	df 92       	push	r13
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	2f 93       	push	r18
     af2:	3f 93       	push	r19
     af4:	4f 93       	push	r20
     af6:	5f 93       	push	r21
     af8:	6f 93       	push	r22
     afa:	7f 93       	push	r23
     afc:	8f 93       	push	r24
     afe:	9f 93       	push	r25
     b00:	af 93       	push	r26
     b02:	bf 93       	push	r27
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	ef 93       	push	r30
     b0a:	a0 91 96 2c 	lds	r26, 0x2C96	; 0x802c96 <pxCurrentTCB>
     b0e:	b0 91 97 2c 	lds	r27, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
     b12:	0d b6       	in	r0, 0x3d	; 61
     b14:	0d 92       	st	X+, r0
     b16:	0e b6       	in	r0, 0x3e	; 62
     b18:	0d 92       	st	X+, r0
		portTaskIncrementTick();
     b1a:	0e 94 23 04 	call	0x846	; 0x846 <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	0e 94 3d 05 	call	0xa7a	; 0xa7a <portTaskSwitchContext>
     b24:	a0 91 96 2c 	lds	r26, 0x2C96	; 0x802c96 <pxCurrentTCB>
     b28:	b0 91 97 2c 	lds	r27, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
     b2c:	0d 90       	ld	r0, X+
     b2e:	0d be       	out	0x3d, r0	; 61
     b30:	0d 90       	ld	r0, X+
     b32:	0e be       	out	0x3e, r0	; 62
     b34:	ef 91       	pop	r30
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	bf 91       	pop	r27
     b3c:	af 91       	pop	r26
     b3e:	9f 91       	pop	r25
     b40:	8f 91       	pop	r24
     b42:	7f 91       	pop	r23
     b44:	6f 91       	pop	r22
     b46:	5f 91       	pop	r21
     b48:	4f 91       	pop	r20
     b4a:	3f 91       	pop	r19
     b4c:	2f 91       	pop	r18
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	df 90       	pop	r13
     b58:	cf 90       	pop	r12
     b5a:	bf 90       	pop	r11
     b5c:	af 90       	pop	r10
     b5e:	9f 90       	pop	r9
     b60:	8f 90       	pop	r8
     b62:	7f 90       	pop	r7
     b64:	6f 90       	pop	r6
     b66:	5f 90       	pop	r5
     b68:	4f 90       	pop	r4
     b6a:	3f 90       	pop	r3
     b6c:	2f 90       	pop	r2
     b6e:	1f 90       	pop	r1
     b70:	0f 90       	pop	r0
     b72:	ff 91       	pop	r31
     b74:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b78:	ff 91       	pop	r31
     b7a:	ff bf       	out	0x3f, r31	; 63
     b7c:	ff 91       	pop	r31
     b7e:	18 95       	reti

00000b80 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     b80:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b84:	ff 93       	push	r31
     b86:	f8 7f       	andi	r31, 0xF8	; 248
     b88:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b8c:	fc 01       	movw	r30, r24
     b8e:	86 8d       	ldd	r24, Z+30	; 0x1e
     b90:	81 11       	cpse	r24, r1
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <prvIsQueueEmpty+0x18>
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	01 c0       	rjmp	.+2      	; 0xb9a <prvIsQueueEmpty+0x1a>
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	ff 91       	pop	r31
     b9c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ba0:	08 95       	ret

00000ba2 <prvIsQueueFull>:
     ba2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ba6:	ff 93       	push	r31
     ba8:	f8 7f       	andi	r31, 0xF8	; 248
     baa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     bae:	fc 01       	movw	r30, r24
     bb0:	26 8d       	ldd	r18, Z+30	; 0x1e
     bb2:	87 8d       	ldd	r24, Z+31	; 0x1f
     bb4:	28 13       	cpse	r18, r24
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <prvIsQueueFull+0x1a>
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <prvIsQueueFull+0x1c>
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	ff 91       	pop	r31
     bc0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     bc4:	08 95       	ret

00000bc6 <prvCopyDataToQueue>:
     bc6:	0f 93       	push	r16
     bc8:	1f 93       	push	r17
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	ec 01       	movw	r28, r24
     bd0:	04 2f       	mov	r16, r20
     bd2:	1e 8d       	ldd	r17, Y+30	; 0x1e
     bd4:	48 a1       	ldd	r20, Y+32	; 0x20
     bd6:	44 23       	and	r20, r20
     bd8:	b9 f1       	breq	.+110    	; 0xc48 <prvCopyDataToQueue+0x82>
     bda:	01 11       	cpse	r16, r1
     bdc:	16 c0       	rjmp	.+44     	; 0xc0a <prvCopyDataToQueue+0x44>
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	8c 81       	ldd	r24, Y+4	; 0x04
     be2:	9d 81       	ldd	r25, Y+5	; 0x05
     be4:	0e 94 b7 1c 	call	0x396e	; 0x396e <memcpy>
     be8:	28 a1       	ldd	r18, Y+32	; 0x20
     bea:	8c 81       	ldd	r24, Y+4	; 0x04
     bec:	9d 81       	ldd	r25, Y+5	; 0x05
     bee:	82 0f       	add	r24, r18
     bf0:	91 1d       	adc	r25, r1
     bf2:	8c 83       	std	Y+4, r24	; 0x04
     bf4:	9d 83       	std	Y+5, r25	; 0x05
     bf6:	2a 81       	ldd	r18, Y+2	; 0x02
     bf8:	3b 81       	ldd	r19, Y+3	; 0x03
     bfa:	82 17       	cp	r24, r18
     bfc:	93 07       	cpc	r25, r19
     bfe:	20 f1       	brcs	.+72     	; 0xc48 <prvCopyDataToQueue+0x82>
     c00:	88 81       	ld	r24, Y
     c02:	99 81       	ldd	r25, Y+1	; 0x01
     c04:	8c 83       	std	Y+4, r24	; 0x04
     c06:	9d 83       	std	Y+5, r25	; 0x05
     c08:	1f c0       	rjmp	.+62     	; 0xc48 <prvCopyDataToQueue+0x82>
     c0a:	50 e0       	ldi	r21, 0x00	; 0
     c0c:	8e 81       	ldd	r24, Y+6	; 0x06
     c0e:	9f 81       	ldd	r25, Y+7	; 0x07
     c10:	0e 94 b7 1c 	call	0x396e	; 0x396e <memcpy>
     c14:	88 a1       	ldd	r24, Y+32	; 0x20
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	91 95       	neg	r25
     c1a:	81 95       	neg	r24
     c1c:	91 09       	sbc	r25, r1
     c1e:	2e 81       	ldd	r18, Y+6	; 0x06
     c20:	3f 81       	ldd	r19, Y+7	; 0x07
     c22:	28 0f       	add	r18, r24
     c24:	39 1f       	adc	r19, r25
     c26:	2e 83       	std	Y+6, r18	; 0x06
     c28:	3f 83       	std	Y+7, r19	; 0x07
     c2a:	48 81       	ld	r20, Y
     c2c:	59 81       	ldd	r21, Y+1	; 0x01
     c2e:	24 17       	cp	r18, r20
     c30:	35 07       	cpc	r19, r21
     c32:	30 f4       	brcc	.+12     	; 0xc40 <prvCopyDataToQueue+0x7a>
     c34:	2a 81       	ldd	r18, Y+2	; 0x02
     c36:	3b 81       	ldd	r19, Y+3	; 0x03
     c38:	82 0f       	add	r24, r18
     c3a:	93 1f       	adc	r25, r19
     c3c:	8e 83       	std	Y+6, r24	; 0x06
     c3e:	9f 83       	std	Y+7, r25	; 0x07
     c40:	02 30       	cpi	r16, 0x02	; 2
     c42:	11 f4       	brne	.+4      	; 0xc48 <prvCopyDataToQueue+0x82>
     c44:	11 11       	cpse	r17, r1
     c46:	11 50       	subi	r17, 0x01	; 1
     c48:	1f 5f       	subi	r17, 0xFF	; 255
     c4a:	1e 8f       	std	Y+30, r17	; 0x1e
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	08 95       	ret

00000c58 <prvCopyDataFromQueue>:
     c58:	fc 01       	movw	r30, r24
     c5a:	40 a1       	ldd	r20, Z+32	; 0x20
     c5c:	44 23       	and	r20, r20
     c5e:	a9 f0       	breq	.+42     	; 0xc8a <prvCopyDataFromQueue+0x32>
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	26 81       	ldd	r18, Z+6	; 0x06
     c64:	37 81       	ldd	r19, Z+7	; 0x07
     c66:	24 0f       	add	r18, r20
     c68:	35 1f       	adc	r19, r21
     c6a:	26 83       	std	Z+6, r18	; 0x06
     c6c:	37 83       	std	Z+7, r19	; 0x07
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	28 17       	cp	r18, r24
     c74:	39 07       	cpc	r19, r25
     c76:	20 f0       	brcs	.+8      	; 0xc80 <prvCopyDataFromQueue+0x28>
     c78:	80 81       	ld	r24, Z
     c7a:	91 81       	ldd	r25, Z+1	; 0x01
     c7c:	86 83       	std	Z+6, r24	; 0x06
     c7e:	97 83       	std	Z+7, r25	; 0x07
     c80:	cb 01       	movw	r24, r22
     c82:	66 81       	ldd	r22, Z+6	; 0x06
     c84:	77 81       	ldd	r23, Z+7	; 0x07
     c86:	0e 94 b7 1c 	call	0x396e	; 0x396e <memcpy>
     c8a:	08 95       	ret

00000c8c <prvUnlockQueue>:
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	ec 01       	movw	r28, r24
     c94:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     c98:	ff 93       	push	r31
     c9a:	f8 7f       	andi	r31, 0xF8	; 248
     c9c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ca0:	1a a1       	ldd	r17, Y+34	; 0x22
     ca2:	0b c0       	rjmp	.+22     	; 0xcba <prvUnlockQueue+0x2e>
     ca4:	8b 89       	ldd	r24, Y+19	; 0x13
     ca6:	88 23       	and	r24, r24
     ca8:	51 f0       	breq	.+20     	; 0xcbe <prvUnlockQueue+0x32>
     caa:	ce 01       	movw	r24, r28
     cac:	43 96       	adiw	r24, 0x13	; 19
     cae:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <xTaskRemoveFromEventList>
     cb2:	81 11       	cpse	r24, r1
     cb4:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <vTaskMissedYield>
     cb8:	11 50       	subi	r17, 0x01	; 1
     cba:	11 16       	cp	r1, r17
     cbc:	9c f3       	brlt	.-26     	; 0xca4 <prvUnlockQueue+0x18>
     cbe:	8f ef       	ldi	r24, 0xFF	; 255
     cc0:	8a a3       	std	Y+34, r24	; 0x22
     cc2:	ff 91       	pop	r31
     cc4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     cc8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ccc:	ff 93       	push	r31
     cce:	f8 7f       	andi	r31, 0xF8	; 248
     cd0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     cd4:	19 a1       	ldd	r17, Y+33	; 0x21
     cd6:	0b c0       	rjmp	.+22     	; 0xcee <prvUnlockQueue+0x62>
     cd8:	88 85       	ldd	r24, Y+8	; 0x08
     cda:	88 23       	and	r24, r24
     cdc:	51 f0       	breq	.+20     	; 0xcf2 <prvUnlockQueue+0x66>
     cde:	ce 01       	movw	r24, r28
     ce0:	08 96       	adiw	r24, 0x08	; 8
     ce2:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <xTaskRemoveFromEventList>
     ce6:	81 11       	cpse	r24, r1
     ce8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <vTaskMissedYield>
     cec:	11 50       	subi	r17, 0x01	; 1
     cee:	11 16       	cp	r1, r17
     cf0:	9c f3       	brlt	.-26     	; 0xcd8 <prvUnlockQueue+0x4c>
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	89 a3       	std	Y+33, r24	; 0x21
     cf6:	ff 91       	pop	r31
     cf8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	08 95       	ret

00000d04 <xQueueGenericReset>:
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	ec 01       	movw	r28, r24
     d0a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d0e:	ff 93       	push	r31
     d10:	f8 7f       	andi	r31, 0xF8	; 248
     d12:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d16:	e8 81       	ld	r30, Y
     d18:	f9 81       	ldd	r31, Y+1	; 0x01
     d1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	28 a1       	ldd	r18, Y+32	; 0x20
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	82 9f       	mul	r24, r18
     d24:	a0 01       	movw	r20, r0
     d26:	83 9f       	mul	r24, r19
     d28:	50 0d       	add	r21, r0
     d2a:	92 9f       	mul	r25, r18
     d2c:	50 0d       	add	r21, r0
     d2e:	11 24       	eor	r1, r1
     d30:	4e 0f       	add	r20, r30
     d32:	5f 1f       	adc	r21, r31
     d34:	4a 83       	std	Y+2, r20	; 0x02
     d36:	5b 83       	std	Y+3, r21	; 0x03
     d38:	1e 8e       	std	Y+30, r1	; 0x1e
     d3a:	ec 83       	std	Y+4, r30	; 0x04
     d3c:	fd 83       	std	Y+5, r31	; 0x05
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	28 9f       	mul	r18, r24
     d42:	a0 01       	movw	r20, r0
     d44:	29 9f       	mul	r18, r25
     d46:	50 0d       	add	r21, r0
     d48:	38 9f       	mul	r19, r24
     d4a:	50 0d       	add	r21, r0
     d4c:	11 24       	eor	r1, r1
     d4e:	cf 01       	movw	r24, r30
     d50:	84 0f       	add	r24, r20
     d52:	95 1f       	adc	r25, r21
     d54:	8e 83       	std	Y+6, r24	; 0x06
     d56:	9f 83       	std	Y+7, r25	; 0x07
     d58:	8f ef       	ldi	r24, 0xFF	; 255
     d5a:	89 a3       	std	Y+33, r24	; 0x21
     d5c:	8a a3       	std	Y+34, r24	; 0x22
     d5e:	61 11       	cpse	r22, r1
     d60:	0c c0       	rjmp	.+24     	; 0xd7a <xQueueGenericReset+0x76>
     d62:	88 85       	ldd	r24, Y+8	; 0x08
     d64:	88 23       	and	r24, r24
     d66:	89 f0       	breq	.+34     	; 0xd8a <xQueueGenericReset+0x86>
     d68:	ce 01       	movw	r24, r28
     d6a:	08 96       	adiw	r24, 0x08	; 8
     d6c:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <xTaskRemoveFromEventList>
     d70:	88 23       	and	r24, r24
     d72:	59 f0       	breq	.+22     	; 0xd8a <xQueueGenericReset+0x86>
     d74:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vPortYield>
     d78:	08 c0       	rjmp	.+16     	; 0xd8a <xQueueGenericReset+0x86>
     d7a:	ce 01       	movw	r24, r28
     d7c:	08 96       	adiw	r24, 0x08	; 8
     d7e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vListInitialise>
     d82:	ce 01       	movw	r24, r28
     d84:	43 96       	adiw	r24, 0x13	; 19
     d86:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vListInitialise>
     d8a:	ff 91       	pop	r31
     d8c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	08 95       	ret

00000d98 <prvInitialiseNewQueue>:
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	f2 2e       	mov	r15, r18
     da4:	e8 01       	movw	r28, r16
     da6:	61 11       	cpse	r22, r1
     da8:	03 c0       	rjmp	.+6      	; 0xdb0 <prvInitialiseNewQueue+0x18>
     daa:	08 83       	st	Y, r16
     dac:	19 83       	std	Y+1, r17	; 0x01
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <prvInitialiseNewQueue+0x1c>
     db0:	48 83       	st	Y, r20
     db2:	59 83       	std	Y+1, r21	; 0x01
     db4:	8f 8f       	std	Y+31, r24	; 0x1f
     db6:	68 a3       	std	Y+32, r22	; 0x20
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	ce 01       	movw	r24, r28
     dbc:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericReset>
     dc0:	fc a2       	std	Y+36, r15	; 0x24
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	1f 91       	pop	r17
     dc8:	0f 91       	pop	r16
     dca:	ff 90       	pop	r15
     dcc:	08 95       	ret

00000dce <xQueueGenericCreate>:
     dce:	df 92       	push	r13
     dd0:	ef 92       	push	r14
     dd2:	ff 92       	push	r15
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	e8 2e       	mov	r14, r24
     dde:	f6 2e       	mov	r15, r22
     de0:	d4 2e       	mov	r13, r20
     de2:	66 23       	and	r22, r22
     de4:	21 f0       	breq	.+8      	; 0xdee <xQueueGenericCreate+0x20>
     de6:	86 9f       	mul	r24, r22
     de8:	c0 01       	movw	r24, r0
     dea:	11 24       	eor	r1, r1
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <xQueueGenericCreate+0x24>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	85 96       	adiw	r24, 0x25	; 37
     df4:	0e 94 4a 03 	call	0x694	; 0x694 <pvPortMalloc>
     df8:	ec 01       	movw	r28, r24
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	49 f0       	breq	.+18     	; 0xe10 <xQueueGenericCreate+0x42>
     dfe:	8c 01       	movw	r16, r24
     e00:	2d 2d       	mov	r18, r13
     e02:	ac 01       	movw	r20, r24
     e04:	4b 5d       	subi	r20, 0xDB	; 219
     e06:	5f 4f       	sbci	r21, 0xFF	; 255
     e08:	6f 2d       	mov	r22, r15
     e0a:	8e 2d       	mov	r24, r14
     e0c:	0e 94 cc 06 	call	0xd98	; 0xd98 <prvInitialiseNewQueue>
     e10:	ce 01       	movw	r24, r28
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	df 90       	pop	r13
     e20:	08 95       	ret

00000e22 <xQueueGenericSend>:
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	29 97       	sbiw	r28, 0x09	; 9
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	7c 01       	movw	r14, r24
     e3e:	6b 01       	movw	r12, r22
     e40:	2e 83       	std	Y+6, r18	; 0x06
     e42:	3f 83       	std	Y+7, r19	; 0x07
     e44:	48 87       	std	Y+8, r20	; 0x08
     e46:	59 87       	std	Y+9, r21	; 0x09
     e48:	10 e0       	ldi	r17, 0x00	; 0
     e4a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e4e:	ff 93       	push	r31
     e50:	f8 7f       	andi	r31, 0xF8	; 248
     e52:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e56:	f7 01       	movw	r30, r14
     e58:	96 8d       	ldd	r25, Z+30	; 0x1e
     e5a:	87 8d       	ldd	r24, Z+31	; 0x1f
     e5c:	98 17       	cp	r25, r24
     e5e:	10 f0       	brcs	.+4      	; 0xe64 <xQueueGenericSend+0x42>
     e60:	02 30       	cpi	r16, 0x02	; 2
     e62:	d1 f4       	brne	.+52     	; 0xe98 <xQueueGenericSend+0x76>
     e64:	40 2f       	mov	r20, r16
     e66:	b6 01       	movw	r22, r12
     e68:	c7 01       	movw	r24, r14
     e6a:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <prvCopyDataToQueue>
     e6e:	f7 01       	movw	r30, r14
     e70:	93 89       	ldd	r25, Z+19	; 0x13
     e72:	99 23       	and	r25, r25
     e74:	49 f0       	breq	.+18     	; 0xe88 <xQueueGenericSend+0x66>
     e76:	c7 01       	movw	r24, r14
     e78:	43 96       	adiw	r24, 0x13	; 19
     e7a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <xTaskRemoveFromEventList>
     e7e:	88 23       	and	r24, r24
     e80:	31 f0       	breq	.+12     	; 0xe8e <xQueueGenericSend+0x6c>
     e82:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vPortYield>
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <xQueueGenericSend+0x6c>
     e88:	81 11       	cpse	r24, r1
     e8a:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vPortYield>
     e8e:	ff 91       	pop	r31
     e90:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	58 c0       	rjmp	.+176    	; 0xf48 <xQueueGenericSend+0x126>
     e98:	8e 81       	ldd	r24, Y+6	; 0x06
     e9a:	9f 81       	ldd	r25, Y+7	; 0x07
     e9c:	a8 85       	ldd	r26, Y+8	; 0x08
     e9e:	b9 85       	ldd	r27, Y+9	; 0x09
     ea0:	89 2b       	or	r24, r25
     ea2:	8a 2b       	or	r24, r26
     ea4:	8b 2b       	or	r24, r27
     ea6:	29 f4       	brne	.+10     	; 0xeb2 <xQueueGenericSend+0x90>
     ea8:	ff 91       	pop	r31
     eaa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	4b c0       	rjmp	.+150    	; 0xf48 <xQueueGenericSend+0x126>
     eb2:	11 11       	cpse	r17, r1
     eb4:	05 c0       	rjmp	.+10     	; 0xec0 <xQueueGenericSend+0x9e>
     eb6:	ce 01       	movw	r24, r28
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <vTaskInternalSetTimeOutState>
     ebe:	11 e0       	ldi	r17, 0x01	; 1
     ec0:	ff 91       	pop	r31
     ec2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ec6:	0e 94 04 0b 	call	0x1608	; 0x1608 <vTaskSuspendAll>
     eca:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ece:	ff 93       	push	r31
     ed0:	f8 7f       	andi	r31, 0xF8	; 248
     ed2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ed6:	f7 01       	movw	r30, r14
     ed8:	81 a1       	ldd	r24, Z+33	; 0x21
     eda:	8f 3f       	cpi	r24, 0xFF	; 255
     edc:	09 f4       	brne	.+2      	; 0xee0 <xQueueGenericSend+0xbe>
     ede:	11 a2       	std	Z+33, r1	; 0x21
     ee0:	f7 01       	movw	r30, r14
     ee2:	82 a1       	ldd	r24, Z+34	; 0x22
     ee4:	8f 3f       	cpi	r24, 0xFF	; 255
     ee6:	09 f4       	brne	.+2      	; 0xeea <xQueueGenericSend+0xc8>
     ee8:	12 a2       	std	Z+34, r1	; 0x22
     eea:	ff 91       	pop	r31
     eec:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ef0:	be 01       	movw	r22, r28
     ef2:	6a 5f       	subi	r22, 0xFA	; 250
     ef4:	7f 4f       	sbci	r23, 0xFF	; 255
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <xTaskCheckForTimeOut>
     efe:	81 11       	cpse	r24, r1
     f00:	1d c0       	rjmp	.+58     	; 0xf3c <xQueueGenericSend+0x11a>
     f02:	c7 01       	movw	r24, r14
     f04:	0e 94 d1 05 	call	0xba2	; 0xba2 <prvIsQueueFull>
     f08:	88 23       	and	r24, r24
     f0a:	91 f0       	breq	.+36     	; 0xf30 <xQueueGenericSend+0x10e>
     f0c:	4e 81       	ldd	r20, Y+6	; 0x06
     f0e:	5f 81       	ldd	r21, Y+7	; 0x07
     f10:	68 85       	ldd	r22, Y+8	; 0x08
     f12:	79 85       	ldd	r23, Y+9	; 0x09
     f14:	c7 01       	movw	r24, r14
     f16:	08 96       	adiw	r24, 0x08	; 8
     f18:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <vTaskPlaceOnEventList>
     f1c:	c7 01       	movw	r24, r14
     f1e:	0e 94 46 06 	call	0xc8c	; 0xc8c <prvUnlockQueue>
     f22:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskResumeAll>
     f26:	81 11       	cpse	r24, r1
     f28:	90 cf       	rjmp	.-224    	; 0xe4a <xQueueGenericSend+0x28>
     f2a:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vPortYield>
     f2e:	8d cf       	rjmp	.-230    	; 0xe4a <xQueueGenericSend+0x28>
     f30:	c7 01       	movw	r24, r14
     f32:	0e 94 46 06 	call	0xc8c	; 0xc8c <prvUnlockQueue>
     f36:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskResumeAll>
     f3a:	87 cf       	rjmp	.-242    	; 0xe4a <xQueueGenericSend+0x28>
     f3c:	c7 01       	movw	r24, r14
     f3e:	0e 94 46 06 	call	0xc8c	; 0xc8c <prvUnlockQueue>
     f42:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskResumeAll>
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	29 96       	adiw	r28, 0x09	; 9
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	df 90       	pop	r13
     f5c:	cf 90       	pop	r12
     f5e:	08 95       	ret

00000f60 <xQueueGenericSendFromISR>:
     f60:	af 92       	push	r10
     f62:	bf 92       	push	r11
     f64:	cf 92       	push	r12
     f66:	df 92       	push	r13
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	ec 01       	movw	r28, r24
     f74:	6b 01       	movw	r12, r22
     f76:	5a 01       	movw	r10, r20
     f78:	02 2f       	mov	r16, r18
     f7a:	0e 94 1c 04 	call	0x838	; 0x838 <_portSetInterruptMaskFromIsr>
     f7e:	f8 2e       	mov	r15, r24
     f80:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f82:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f84:	98 17       	cp	r25, r24
     f86:	10 f0       	brcs	.+4      	; 0xf8c <xQueueGenericSendFromISR+0x2c>
     f88:	02 30       	cpi	r16, 0x02	; 2
     f8a:	e1 f4       	brne	.+56     	; 0xfc4 <xQueueGenericSendFromISR+0x64>
     f8c:	1a a1       	ldd	r17, Y+34	; 0x22
     f8e:	40 2f       	mov	r20, r16
     f90:	b6 01       	movw	r22, r12
     f92:	ce 01       	movw	r24, r28
     f94:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <prvCopyDataToQueue>
     f98:	1f 3f       	cpi	r17, 0xFF	; 255
     f9a:	81 f4       	brne	.+32     	; 0xfbc <xQueueGenericSendFromISR+0x5c>
     f9c:	8b 89       	ldd	r24, Y+19	; 0x13
     f9e:	88 23       	and	r24, r24
     fa0:	99 f0       	breq	.+38     	; 0xfc8 <xQueueGenericSendFromISR+0x68>
     fa2:	ce 01       	movw	r24, r28
     fa4:	43 96       	adiw	r24, 0x13	; 19
     fa6:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <xTaskRemoveFromEventList>
     faa:	88 23       	and	r24, r24
     fac:	79 f0       	breq	.+30     	; 0xfcc <xQueueGenericSendFromISR+0x6c>
     fae:	a1 14       	cp	r10, r1
     fb0:	b1 04       	cpc	r11, r1
     fb2:	71 f0       	breq	.+28     	; 0xfd0 <xQueueGenericSendFromISR+0x70>
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	f5 01       	movw	r30, r10
     fb8:	80 83       	st	Z, r24
     fba:	0b c0       	rjmp	.+22     	; 0xfd2 <xQueueGenericSendFromISR+0x72>
     fbc:	1f 5f       	subi	r17, 0xFF	; 255
     fbe:	1a a3       	std	Y+34, r17	; 0x22
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	07 c0       	rjmp	.+14     	; 0xfd2 <xQueueGenericSendFromISR+0x72>
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	05 c0       	rjmp	.+10     	; 0xfd2 <xQueueGenericSendFromISR+0x72>
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	03 c0       	rjmp	.+6      	; 0xfd2 <xQueueGenericSendFromISR+0x72>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <xQueueGenericSendFromISR+0x72>
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	df 90       	pop	r13
     fe2:	cf 90       	pop	r12
     fe4:	bf 90       	pop	r11
     fe6:	af 90       	pop	r10
     fe8:	08 95       	ret

00000fea <xQueueReceive>:
     fea:	cf 92       	push	r12
     fec:	df 92       	push	r13
     fee:	ef 92       	push	r14
     ff0:	ff 92       	push	r15
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	29 97       	sbiw	r28, 0x09	; 9
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	8c 01       	movw	r16, r24
    1006:	6b 01       	movw	r12, r22
    1008:	2e 83       	std	Y+6, r18	; 0x06
    100a:	3f 83       	std	Y+7, r19	; 0x07
    100c:	48 87       	std	Y+8, r20	; 0x08
    100e:	59 87       	std	Y+9, r21	; 0x09
    1010:	e1 2c       	mov	r14, r1
    1012:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1016:	ff 93       	push	r31
    1018:	f8 7f       	andi	r31, 0xF8	; 248
    101a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    101e:	f8 01       	movw	r30, r16
    1020:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1022:	ff 20       	and	r15, r15
    1024:	b1 f0       	breq	.+44     	; 0x1052 <xQueueReceive+0x68>
    1026:	b6 01       	movw	r22, r12
    1028:	c8 01       	movw	r24, r16
    102a:	0e 94 2c 06 	call	0xc58	; 0xc58 <prvCopyDataFromQueue>
    102e:	fa 94       	dec	r15
    1030:	f8 01       	movw	r30, r16
    1032:	f6 8e       	std	Z+30, r15	; 0x1e
    1034:	80 85       	ldd	r24, Z+8	; 0x08
    1036:	88 23       	and	r24, r24
    1038:	39 f0       	breq	.+14     	; 0x1048 <xQueueReceive+0x5e>
    103a:	c8 01       	movw	r24, r16
    103c:	08 96       	adiw	r24, 0x08	; 8
    103e:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <xTaskRemoveFromEventList>
    1042:	81 11       	cpse	r24, r1
    1044:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vPortYield>
    1048:	ff 91       	pop	r31
    104a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	5f c0       	rjmp	.+190    	; 0x1110 <xQueueReceive+0x126>
    1052:	8e 81       	ldd	r24, Y+6	; 0x06
    1054:	9f 81       	ldd	r25, Y+7	; 0x07
    1056:	a8 85       	ldd	r26, Y+8	; 0x08
    1058:	b9 85       	ldd	r27, Y+9	; 0x09
    105a:	89 2b       	or	r24, r25
    105c:	8a 2b       	or	r24, r26
    105e:	8b 2b       	or	r24, r27
    1060:	29 f4       	brne	.+10     	; 0x106c <xQueueReceive+0x82>
    1062:	ff 91       	pop	r31
    1064:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	52 c0       	rjmp	.+164    	; 0x1110 <xQueueReceive+0x126>
    106c:	e1 10       	cpse	r14, r1
    106e:	06 c0       	rjmp	.+12     	; 0x107c <xQueueReceive+0x92>
    1070:	ce 01       	movw	r24, r28
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <vTaskInternalSetTimeOutState>
    1078:	ee 24       	eor	r14, r14
    107a:	e3 94       	inc	r14
    107c:	ff 91       	pop	r31
    107e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1082:	0e 94 04 0b 	call	0x1608	; 0x1608 <vTaskSuspendAll>
    1086:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    108a:	ff 93       	push	r31
    108c:	f8 7f       	andi	r31, 0xF8	; 248
    108e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1092:	f8 01       	movw	r30, r16
    1094:	81 a1       	ldd	r24, Z+33	; 0x21
    1096:	8f 3f       	cpi	r24, 0xFF	; 255
    1098:	09 f4       	brne	.+2      	; 0x109c <xQueueReceive+0xb2>
    109a:	11 a2       	std	Z+33, r1	; 0x21
    109c:	f8 01       	movw	r30, r16
    109e:	82 a1       	ldd	r24, Z+34	; 0x22
    10a0:	8f 3f       	cpi	r24, 0xFF	; 255
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <xQueueReceive+0xbc>
    10a4:	12 a2       	std	Z+34, r1	; 0x22
    10a6:	ff 91       	pop	r31
    10a8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    10ac:	be 01       	movw	r22, r28
    10ae:	6a 5f       	subi	r22, 0xFA	; 250
    10b0:	7f 4f       	sbci	r23, 0xFF	; 255
    10b2:	ce 01       	movw	r24, r28
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <xTaskCheckForTimeOut>
    10ba:	81 11       	cpse	r24, r1
    10bc:	1d c0       	rjmp	.+58     	; 0x10f8 <xQueueReceive+0x10e>
    10be:	c8 01       	movw	r24, r16
    10c0:	0e 94 c0 05 	call	0xb80	; 0xb80 <prvIsQueueEmpty>
    10c4:	88 23       	and	r24, r24
    10c6:	91 f0       	breq	.+36     	; 0x10ec <xQueueReceive+0x102>
    10c8:	4e 81       	ldd	r20, Y+6	; 0x06
    10ca:	5f 81       	ldd	r21, Y+7	; 0x07
    10cc:	68 85       	ldd	r22, Y+8	; 0x08
    10ce:	79 85       	ldd	r23, Y+9	; 0x09
    10d0:	c8 01       	movw	r24, r16
    10d2:	43 96       	adiw	r24, 0x13	; 19
    10d4:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <vTaskPlaceOnEventList>
    10d8:	c8 01       	movw	r24, r16
    10da:	0e 94 46 06 	call	0xc8c	; 0xc8c <prvUnlockQueue>
    10de:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskResumeAll>
    10e2:	81 11       	cpse	r24, r1
    10e4:	96 cf       	rjmp	.-212    	; 0x1012 <xQueueReceive+0x28>
    10e6:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vPortYield>
    10ea:	93 cf       	rjmp	.-218    	; 0x1012 <xQueueReceive+0x28>
    10ec:	c8 01       	movw	r24, r16
    10ee:	0e 94 46 06 	call	0xc8c	; 0xc8c <prvUnlockQueue>
    10f2:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskResumeAll>
    10f6:	8d cf       	rjmp	.-230    	; 0x1012 <xQueueReceive+0x28>
    10f8:	c8 01       	movw	r24, r16
    10fa:	0e 94 46 06 	call	0xc8c	; 0xc8c <prvUnlockQueue>
    10fe:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskResumeAll>
    1102:	c8 01       	movw	r24, r16
    1104:	0e 94 c0 05 	call	0xb80	; 0xb80 <prvIsQueueEmpty>
    1108:	88 23       	and	r24, r24
    110a:	09 f4       	brne	.+2      	; 0x110e <xQueueReceive+0x124>
    110c:	82 cf       	rjmp	.-252    	; 0x1012 <xQueueReceive+0x28>
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	29 96       	adiw	r28, 0x09	; 9
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	ff 90       	pop	r15
    1120:	ef 90       	pop	r14
    1122:	df 90       	pop	r13
    1124:	cf 90       	pop	r12
    1126:	08 95       	ret

00001128 <uxQueueMessagesWaiting>:
    1128:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    112c:	ff 93       	push	r31
    112e:	f8 7f       	andi	r31, 0xF8	; 248
    1130:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1134:	fc 01       	movw	r30, r24
    1136:	86 8d       	ldd	r24, Z+30	; 0x1e
    1138:	ff 91       	pop	r31
    113a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    113e:	08 95       	ret

00001140 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1146:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    114a:	ff 93       	push	r31
    114c:	f8 7f       	andi	r31, 0xF8	; 248
    114e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1152:	89 a1       	ldd	r24, Y+33	; 0x21
    1154:	8f 3f       	cpi	r24, 0xFF	; 255
    1156:	09 f4       	brne	.+2      	; 0x115a <vQueueWaitForMessageRestricted+0x1a>
    1158:	19 a2       	std	Y+33, r1	; 0x21
    115a:	8a a1       	ldd	r24, Y+34	; 0x22
    115c:	8f 3f       	cpi	r24, 0xFF	; 255
    115e:	09 f4       	brne	.+2      	; 0x1162 <vQueueWaitForMessageRestricted+0x22>
    1160:	1a a2       	std	Y+34, r1	; 0x22
    1162:	ff 91       	pop	r31
    1164:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1168:	8e 8d       	ldd	r24, Y+30	; 0x1e
    116a:	81 11       	cpse	r24, r1
    116c:	04 c0       	rjmp	.+8      	; 0x1176 <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    116e:	ce 01       	movw	r24, r28
    1170:	43 96       	adiw	r24, 0x13	; 19
    1172:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1176:	ce 01       	movw	r24, r28
    1178:	0e 94 46 06 	call	0xc8c	; 0xc8c <prvUnlockQueue>
	}
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <prvResetNextTaskUnblockTime>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    1182:	e0 91 52 2c 	lds	r30, 0x2C52	; 0x802c52 <pxDelayedTaskList>
    1186:	f0 91 53 2c 	lds	r31, 0x2C53	; 0x802c53 <pxDelayedTaskList+0x1>
    118a:	80 81       	ld	r24, Z
    118c:	81 11       	cpse	r24, r1
    118e:	0c c0       	rjmp	.+24     	; 0x11a8 <prvResetNextTaskUnblockTime+0x26>
    1190:	8f ef       	ldi	r24, 0xFF	; 255
    1192:	9f ef       	ldi	r25, 0xFF	; 255
    1194:	dc 01       	movw	r26, r24
    1196:	80 93 2b 2c 	sts	0x2C2B, r24	; 0x802c2b <xNextTaskUnblockTime>
    119a:	90 93 2c 2c 	sts	0x2C2C, r25	; 0x802c2c <xNextTaskUnblockTime+0x1>
    119e:	a0 93 2d 2c 	sts	0x2C2D, r26	; 0x802c2d <xNextTaskUnblockTime+0x2>
    11a2:	b0 93 2e 2c 	sts	0x2C2E, r27	; 0x802c2e <xNextTaskUnblockTime+0x3>
    11a6:	08 95       	ret
    11a8:	e0 91 52 2c 	lds	r30, 0x2C52	; 0x802c52 <pxDelayedTaskList>
    11ac:	f0 91 53 2c 	lds	r31, 0x2C53	; 0x802c53 <pxDelayedTaskList+0x1>
    11b0:	07 80       	ldd	r0, Z+7	; 0x07
    11b2:	f0 85       	ldd	r31, Z+8	; 0x08
    11b4:	e0 2d       	mov	r30, r0
    11b6:	00 84       	ldd	r0, Z+8	; 0x08
    11b8:	f1 85       	ldd	r31, Z+9	; 0x09
    11ba:	e0 2d       	mov	r30, r0
    11bc:	82 81       	ldd	r24, Z+2	; 0x02
    11be:	93 81       	ldd	r25, Z+3	; 0x03
    11c0:	a4 81       	ldd	r26, Z+4	; 0x04
    11c2:	b5 81       	ldd	r27, Z+5	; 0x05
    11c4:	80 93 2b 2c 	sts	0x2C2B, r24	; 0x802c2b <xNextTaskUnblockTime>
    11c8:	90 93 2c 2c 	sts	0x2C2C, r25	; 0x802c2c <xNextTaskUnblockTime+0x1>
    11cc:	a0 93 2d 2c 	sts	0x2C2D, r26	; 0x802c2d <xNextTaskUnblockTime+0x2>
    11d0:	b0 93 2e 2c 	sts	0x2C2E, r27	; 0x802c2e <xNextTaskUnblockTime+0x3>
    11d4:	08 95       	ret

000011d6 <prvInitialiseNewTask>:
    11d6:	2f 92       	push	r2
    11d8:	3f 92       	push	r3
    11da:	4f 92       	push	r4
    11dc:	5f 92       	push	r5
    11de:	6f 92       	push	r6
    11e0:	7f 92       	push	r7
    11e2:	8f 92       	push	r8
    11e4:	9f 92       	push	r9
    11e6:	af 92       	push	r10
    11e8:	bf 92       	push	r11
    11ea:	cf 92       	push	r12
    11ec:	df 92       	push	r13
    11ee:	ef 92       	push	r14
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	1c 01       	movw	r2, r24
    11fe:	4b 01       	movw	r8, r22
    1200:	29 01       	movw	r4, r18
    1202:	3a 01       	movw	r6, r20
    1204:	a9 01       	movw	r20, r18
    1206:	65 ea       	ldi	r22, 0xA5	; 165
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	f5 01       	movw	r30, r10
    120c:	83 8d       	ldd	r24, Z+27	; 0x1b
    120e:	94 8d       	ldd	r25, Z+28	; 0x1c
    1210:	0e 94 c0 1c 	call	0x3980	; 0x3980 <memset>
    1214:	f5 01       	movw	r30, r10
    1216:	83 8d       	ldd	r24, Z+27	; 0x1b
    1218:	94 8d       	ldd	r25, Z+28	; 0x1c
    121a:	f1 e0       	ldi	r31, 0x01	; 1
    121c:	4f 1a       	sub	r4, r31
    121e:	51 08       	sbc	r5, r1
    1220:	48 0e       	add	r4, r24
    1222:	59 1e       	adc	r5, r25
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	0f c0       	rjmp	.+30     	; 0x1246 <prvInitialiseNewTask+0x70>
    1228:	82 2f       	mov	r24, r18
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	f4 01       	movw	r30, r8
    122e:	e8 0f       	add	r30, r24
    1230:	f9 1f       	adc	r31, r25
    1232:	30 81       	ld	r19, Z
    1234:	d5 01       	movw	r26, r10
    1236:	a8 0f       	add	r26, r24
    1238:	b9 1f       	adc	r27, r25
    123a:	5d 96       	adiw	r26, 0x1d	; 29
    123c:	3c 93       	st	X, r19
    123e:	80 81       	ld	r24, Z
    1240:	88 23       	and	r24, r24
    1242:	19 f0       	breq	.+6      	; 0x124a <prvInitialiseNewTask+0x74>
    1244:	2f 5f       	subi	r18, 0xFF	; 255
    1246:	28 30       	cpi	r18, 0x08	; 8
    1248:	78 f3       	brcs	.-34     	; 0x1228 <prvInitialiseNewTask+0x52>
    124a:	f5 01       	movw	r30, r10
    124c:	14 a2       	std	Z+36, r1	; 0x24
    124e:	f3 e0       	ldi	r31, 0x03	; 3
    1250:	fe 15       	cp	r31, r14
    1252:	20 f4       	brcc	.+8      	; 0x125c <prvInitialiseNewTask+0x86>
    1254:	0f 2e       	mov	r0, r31
    1256:	f3 e0       	ldi	r31, 0x03	; 3
    1258:	ef 2e       	mov	r14, r31
    125a:	f0 2d       	mov	r31, r0
    125c:	f5 01       	movw	r30, r10
    125e:	e2 8e       	std	Z+26, r14	; 0x1a
    1260:	c5 01       	movw	r24, r10
    1262:	02 96       	adiw	r24, 0x02	; 2
    1264:	0e 94 82 03 	call	0x704	; 0x704 <vListInitialiseItem>
    1268:	c5 01       	movw	r24, r10
    126a:	0e 96       	adiw	r24, 0x0e	; 14
    126c:	0e 94 82 03 	call	0x704	; 0x704 <vListInitialiseItem>
    1270:	f5 01       	movw	r30, r10
    1272:	a2 86       	std	Z+10, r10	; 0x0a
    1274:	b3 86       	std	Z+11, r11	; 0x0b
    1276:	84 e0       	ldi	r24, 0x04	; 4
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a0 e0       	ldi	r26, 0x00	; 0
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	8e 19       	sub	r24, r14
    1280:	91 09       	sbc	r25, r1
    1282:	a1 09       	sbc	r26, r1
    1284:	b1 09       	sbc	r27, r1
    1286:	86 87       	std	Z+14, r24	; 0x0e
    1288:	97 87       	std	Z+15, r25	; 0x0f
    128a:	a0 8b       	std	Z+16, r26	; 0x10
    128c:	b1 8b       	std	Z+17, r27	; 0x11
    128e:	a6 8a       	std	Z+22, r10	; 0x16
    1290:	b7 8a       	std	Z+23, r11	; 0x17
    1292:	17 a2       	std	Z+39, r1	; 0x27
    1294:	10 a6       	std	Z+40, r1	; 0x28
    1296:	11 a6       	std	Z+41, r1	; 0x29
    1298:	12 a6       	std	Z+42, r1	; 0x2a
    129a:	13 a6       	std	Z+43, r1	; 0x2b
    129c:	a8 01       	movw	r20, r16
    129e:	b1 01       	movw	r22, r2
    12a0:	c2 01       	movw	r24, r4
    12a2:	0e 94 2d 04 	call	0x85a	; 0x85a <pxPortInitialiseStack>
    12a6:	f5 01       	movw	r30, r10
    12a8:	80 83       	st	Z, r24
    12aa:	91 83       	std	Z+1, r25	; 0x01
    12ac:	c1 14       	cp	r12, r1
    12ae:	d1 04       	cpc	r13, r1
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <prvInitialiseNewTask+0xe2>
    12b2:	f6 01       	movw	r30, r12
    12b4:	a0 82       	st	Z, r10
    12b6:	b1 82       	std	Z+1, r11	; 0x01
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ef 90       	pop	r14
    12c2:	df 90       	pop	r13
    12c4:	cf 90       	pop	r12
    12c6:	bf 90       	pop	r11
    12c8:	af 90       	pop	r10
    12ca:	9f 90       	pop	r9
    12cc:	8f 90       	pop	r8
    12ce:	7f 90       	pop	r7
    12d0:	6f 90       	pop	r6
    12d2:	5f 90       	pop	r5
    12d4:	4f 90       	pop	r4
    12d6:	3f 90       	pop	r3
    12d8:	2f 90       	pop	r2
    12da:	08 95       	ret

000012dc <prvInitialiseTaskLists>:
    12dc:	cf 93       	push	r28
    12de:	c0 e0       	ldi	r28, 0x00	; 0
    12e0:	09 c0       	rjmp	.+18     	; 0x12f4 <prvInitialiseTaskLists+0x18>
    12e2:	2b e0       	ldi	r18, 0x0B	; 11
    12e4:	c2 9f       	mul	r28, r18
    12e6:	c0 01       	movw	r24, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	86 59       	subi	r24, 0x96	; 150
    12ec:	93 4d       	sbci	r25, 0xD3	; 211
    12ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vListInitialise>
    12f2:	cf 5f       	subi	r28, 0xFF	; 255
    12f4:	c4 30       	cpi	r28, 0x04	; 4
    12f6:	a8 f3       	brcs	.-22     	; 0x12e2 <prvInitialiseTaskLists+0x6>
    12f8:	8f e5       	ldi	r24, 0x5F	; 95
    12fa:	9c e2       	ldi	r25, 0x2C	; 44
    12fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vListInitialise>
    1300:	84 e5       	ldi	r24, 0x54	; 84
    1302:	9c e2       	ldi	r25, 0x2C	; 44
    1304:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vListInitialise>
    1308:	85 e4       	ldi	r24, 0x45	; 69
    130a:	9c e2       	ldi	r25, 0x2C	; 44
    130c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vListInitialise>
    1310:	8a e3       	ldi	r24, 0x3A	; 58
    1312:	9c e2       	ldi	r25, 0x2C	; 44
    1314:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vListInitialise>
    1318:	8f e5       	ldi	r24, 0x5F	; 95
    131a:	9c e2       	ldi	r25, 0x2C	; 44
    131c:	80 93 52 2c 	sts	0x2C52, r24	; 0x802c52 <pxDelayedTaskList>
    1320:	90 93 53 2c 	sts	0x2C53, r25	; 0x802c53 <pxDelayedTaskList+0x1>
    1324:	84 e5       	ldi	r24, 0x54	; 84
    1326:	9c e2       	ldi	r25, 0x2C	; 44
    1328:	80 93 50 2c 	sts	0x2C50, r24	; 0x802c50 <pxOverflowDelayedTaskList>
    132c:	90 93 51 2c 	sts	0x2C51, r25	; 0x802c51 <pxOverflowDelayedTaskList+0x1>
    1330:	cf 91       	pop	r28
    1332:	08 95       	ret

00001334 <prvAddNewTaskToReadyList>:
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	ec 01       	movw	r28, r24
    133a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    133e:	ff 93       	push	r31
    1340:	f8 7f       	andi	r31, 0xF8	; 248
    1342:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1346:	80 91 39 2c 	lds	r24, 0x2C39	; 0x802c39 <uxCurrentNumberOfTasks>
    134a:	8f 5f       	subi	r24, 0xFF	; 255
    134c:	80 93 39 2c 	sts	0x2C39, r24	; 0x802c39 <uxCurrentNumberOfTasks>
    1350:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <pxCurrentTCB>
    1354:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1358:	89 2b       	or	r24, r25
    135a:	59 f4       	brne	.+22     	; 0x1372 <prvAddNewTaskToReadyList+0x3e>
    135c:	c0 93 96 2c 	sts	0x2C96, r28	; 0x802c96 <pxCurrentTCB>
    1360:	d0 93 97 2c 	sts	0x2C97, r29	; 0x802c97 <pxCurrentTCB+0x1>
    1364:	80 91 39 2c 	lds	r24, 0x2C39	; 0x802c39 <uxCurrentNumberOfTasks>
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	99 f4       	brne	.+38     	; 0x1392 <prvAddNewTaskToReadyList+0x5e>
    136c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <prvInitialiseTaskLists>
    1370:	10 c0       	rjmp	.+32     	; 0x1392 <prvAddNewTaskToReadyList+0x5e>
    1372:	80 91 33 2c 	lds	r24, 0x2C33	; 0x802c33 <xSchedulerRunning>
    1376:	81 11       	cpse	r24, r1
    1378:	0c c0       	rjmp	.+24     	; 0x1392 <prvAddNewTaskToReadyList+0x5e>
    137a:	e0 91 96 2c 	lds	r30, 0x2C96	; 0x802c96 <pxCurrentTCB>
    137e:	f0 91 97 2c 	lds	r31, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1382:	92 8d       	ldd	r25, Z+26	; 0x1a
    1384:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1386:	89 17       	cp	r24, r25
    1388:	20 f0       	brcs	.+8      	; 0x1392 <prvAddNewTaskToReadyList+0x5e>
    138a:	c0 93 96 2c 	sts	0x2C96, r28	; 0x802c96 <pxCurrentTCB>
    138e:	d0 93 97 2c 	sts	0x2C97, r29	; 0x802c97 <pxCurrentTCB+0x1>
    1392:	80 91 2f 2c 	lds	r24, 0x2C2F	; 0x802c2f <uxTaskNumber>
    1396:	8f 5f       	subi	r24, 0xFF	; 255
    1398:	80 93 2f 2c 	sts	0x2C2F, r24	; 0x802c2f <uxTaskNumber>
    139c:	8d a3       	std	Y+37, r24	; 0x25
    139e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13a0:	90 91 34 2c 	lds	r25, 0x2C34	; 0x802c34 <uxTopReadyPriority>
    13a4:	98 17       	cp	r25, r24
    13a6:	10 f4       	brcc	.+4      	; 0x13ac <prvAddNewTaskToReadyList+0x78>
    13a8:	80 93 34 2c 	sts	0x2C34, r24	; 0x802c34 <uxTopReadyPriority>
    13ac:	2b e0       	ldi	r18, 0x0B	; 11
    13ae:	82 9f       	mul	r24, r18
    13b0:	c0 01       	movw	r24, r0
    13b2:	11 24       	eor	r1, r1
    13b4:	be 01       	movw	r22, r28
    13b6:	6e 5f       	subi	r22, 0xFE	; 254
    13b8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ba:	86 59       	subi	r24, 0x96	; 150
    13bc:	93 4d       	sbci	r25, 0xD3	; 211
    13be:	0e 94 86 03 	call	0x70c	; 0x70c <vListInsertEnd>
    13c2:	ff 91       	pop	r31
    13c4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    13c8:	80 91 33 2c 	lds	r24, 0x2C33	; 0x802c33 <xSchedulerRunning>
    13cc:	88 23       	and	r24, r24
    13ce:	51 f0       	breq	.+20     	; 0x13e4 <prvAddNewTaskToReadyList+0xb0>
    13d0:	e0 91 96 2c 	lds	r30, 0x2C96	; 0x802c96 <pxCurrentTCB>
    13d4:	f0 91 97 2c 	lds	r31, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    13d8:	92 8d       	ldd	r25, Z+26	; 0x1a
    13da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13dc:	98 17       	cp	r25, r24
    13de:	10 f4       	brcc	.+4      	; 0x13e4 <prvAddNewTaskToReadyList+0xb0>
    13e0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vPortYield>
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	08 95       	ret

000013ea <prvAddCurrentTaskToDelayedList>:
    13ea:	8f 92       	push	r8
    13ec:	9f 92       	push	r9
    13ee:	af 92       	push	r10
    13f0:	bf 92       	push	r11
    13f2:	cf 92       	push	r12
    13f4:	df 92       	push	r13
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	cf 93       	push	r28
    13fc:	6b 01       	movw	r12, r22
    13fe:	7c 01       	movw	r14, r24
    1400:	c4 2f       	mov	r28, r20
    1402:	80 90 35 2c 	lds	r8, 0x2C35	; 0x802c35 <xTickCount>
    1406:	90 90 36 2c 	lds	r9, 0x2C36	; 0x802c36 <xTickCount+0x1>
    140a:	a0 90 37 2c 	lds	r10, 0x2C37	; 0x802c37 <xTickCount+0x2>
    140e:	b0 90 38 2c 	lds	r11, 0x2C38	; 0x802c38 <xTickCount+0x3>
    1412:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <pxCurrentTCB>
    1416:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    141a:	02 96       	adiw	r24, 0x02	; 2
    141c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <uxListRemove>
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	c8 16       	cp	r12, r24
    1424:	d8 06       	cpc	r13, r24
    1426:	e8 06       	cpc	r14, r24
    1428:	f8 06       	cpc	r15, r24
    142a:	69 f4       	brne	.+26     	; 0x1446 <prvAddCurrentTaskToDelayedList+0x5c>
    142c:	cc 23       	and	r28, r28
    142e:	59 f0       	breq	.+22     	; 0x1446 <prvAddCurrentTaskToDelayedList+0x5c>
    1430:	60 91 96 2c 	lds	r22, 0x2C96	; 0x802c96 <pxCurrentTCB>
    1434:	70 91 97 2c 	lds	r23, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1438:	6e 5f       	subi	r22, 0xFE	; 254
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	8a e3       	ldi	r24, 0x3A	; 58
    143e:	9c e2       	ldi	r25, 0x2C	; 44
    1440:	0e 94 86 03 	call	0x70c	; 0x70c <vListInsertEnd>
    1444:	3f c0       	rjmp	.+126    	; 0x14c4 <prvAddCurrentTaskToDelayedList+0xda>
    1446:	c8 0c       	add	r12, r8
    1448:	d9 1c       	adc	r13, r9
    144a:	ea 1c       	adc	r14, r10
    144c:	fb 1c       	adc	r15, r11
    144e:	e0 91 96 2c 	lds	r30, 0x2C96	; 0x802c96 <pxCurrentTCB>
    1452:	f0 91 97 2c 	lds	r31, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1456:	c2 82       	std	Z+2, r12	; 0x02
    1458:	d3 82       	std	Z+3, r13	; 0x03
    145a:	e4 82       	std	Z+4, r14	; 0x04
    145c:	f5 82       	std	Z+5, r15	; 0x05
    145e:	c8 14       	cp	r12, r8
    1460:	d9 04       	cpc	r13, r9
    1462:	ea 04       	cpc	r14, r10
    1464:	fb 04       	cpc	r15, r11
    1466:	68 f4       	brcc	.+26     	; 0x1482 <prvAddCurrentTaskToDelayedList+0x98>
    1468:	60 91 96 2c 	lds	r22, 0x2C96	; 0x802c96 <pxCurrentTCB>
    146c:	70 91 97 2c 	lds	r23, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1470:	80 91 50 2c 	lds	r24, 0x2C50	; 0x802c50 <pxOverflowDelayedTaskList>
    1474:	90 91 51 2c 	lds	r25, 0x2C51	; 0x802c51 <pxOverflowDelayedTaskList+0x1>
    1478:	6e 5f       	subi	r22, 0xFE	; 254
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	0e 94 a7 03 	call	0x74e	; 0x74e <vListInsert>
    1480:	21 c0       	rjmp	.+66     	; 0x14c4 <prvAddCurrentTaskToDelayedList+0xda>
    1482:	60 91 96 2c 	lds	r22, 0x2C96	; 0x802c96 <pxCurrentTCB>
    1486:	70 91 97 2c 	lds	r23, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    148a:	80 91 52 2c 	lds	r24, 0x2C52	; 0x802c52 <pxDelayedTaskList>
    148e:	90 91 53 2c 	lds	r25, 0x2C53	; 0x802c53 <pxDelayedTaskList+0x1>
    1492:	6e 5f       	subi	r22, 0xFE	; 254
    1494:	7f 4f       	sbci	r23, 0xFF	; 255
    1496:	0e 94 a7 03 	call	0x74e	; 0x74e <vListInsert>
    149a:	80 91 2b 2c 	lds	r24, 0x2C2B	; 0x802c2b <xNextTaskUnblockTime>
    149e:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <xNextTaskUnblockTime+0x1>
    14a2:	a0 91 2d 2c 	lds	r26, 0x2C2D	; 0x802c2d <xNextTaskUnblockTime+0x2>
    14a6:	b0 91 2e 2c 	lds	r27, 0x2C2E	; 0x802c2e <xNextTaskUnblockTime+0x3>
    14aa:	c8 16       	cp	r12, r24
    14ac:	d9 06       	cpc	r13, r25
    14ae:	ea 06       	cpc	r14, r26
    14b0:	fb 06       	cpc	r15, r27
    14b2:	40 f4       	brcc	.+16     	; 0x14c4 <prvAddCurrentTaskToDelayedList+0xda>
    14b4:	c0 92 2b 2c 	sts	0x2C2B, r12	; 0x802c2b <xNextTaskUnblockTime>
    14b8:	d0 92 2c 2c 	sts	0x2C2C, r13	; 0x802c2c <xNextTaskUnblockTime+0x1>
    14bc:	e0 92 2d 2c 	sts	0x2C2D, r14	; 0x802c2d <xNextTaskUnblockTime+0x2>
    14c0:	f0 92 2e 2c 	sts	0x2C2E, r15	; 0x802c2e <xNextTaskUnblockTime+0x3>
    14c4:	cf 91       	pop	r28
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	df 90       	pop	r13
    14cc:	cf 90       	pop	r12
    14ce:	bf 90       	pop	r11
    14d0:	af 90       	pop	r10
    14d2:	9f 90       	pop	r9
    14d4:	8f 90       	pop	r8
    14d6:	08 95       	ret

000014d8 <prvIdleTask>:
    14d8:	80 91 6a 2c 	lds	r24, 0x2C6A	; 0x802c6a <pxReadyTasksLists>
    14dc:	82 30       	cpi	r24, 0x02	; 2
    14de:	10 f0       	brcs	.+4      	; 0x14e4 <prvIdleTask+0xc>
    14e0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vPortYield>
    14e4:	0e 94 74 13 	call	0x26e8	; 0x26e8 <vApplicationIdleHook>
    14e8:	f7 cf       	rjmp	.-18     	; 0x14d8 <prvIdleTask>

000014ea <xTaskCreate>:
    14ea:	2f 92       	push	r2
    14ec:	3f 92       	push	r3
    14ee:	4f 92       	push	r4
    14f0:	5f 92       	push	r5
    14f2:	6f 92       	push	r6
    14f4:	7f 92       	push	r7
    14f6:	8f 92       	push	r8
    14f8:	9f 92       	push	r9
    14fa:	af 92       	push	r10
    14fc:	bf 92       	push	r11
    14fe:	cf 92       	push	r12
    1500:	df 92       	push	r13
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	3c 01       	movw	r6, r24
    1510:	1b 01       	movw	r2, r22
    1512:	5a 01       	movw	r10, r20
    1514:	29 01       	movw	r4, r18
    1516:	ca 01       	movw	r24, r20
    1518:	0e 94 4a 03 	call	0x694	; 0x694 <pvPortMalloc>
    151c:	6c 01       	movw	r12, r24
    151e:	89 2b       	or	r24, r25
    1520:	71 f0       	breq	.+28     	; 0x153e <xTaskCreate+0x54>
    1522:	8c e2       	ldi	r24, 0x2C	; 44
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 94 4a 03 	call	0x694	; 0x694 <pvPortMalloc>
    152a:	ec 01       	movw	r28, r24
    152c:	89 2b       	or	r24, r25
    152e:	19 f0       	breq	.+6      	; 0x1536 <xTaskCreate+0x4c>
    1530:	cb 8e       	std	Y+27, r12	; 0x1b
    1532:	dc 8e       	std	Y+28, r13	; 0x1c
    1534:	06 c0       	rjmp	.+12     	; 0x1542 <xTaskCreate+0x58>
    1536:	c6 01       	movw	r24, r12
    1538:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vPortFree>
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <xTaskCreate+0x58>
    153e:	c0 e0       	ldi	r28, 0x00	; 0
    1540:	d0 e0       	ldi	r29, 0x00	; 0
    1542:	20 97       	sbiw	r28, 0x00	; 0
    1544:	91 f0       	breq	.+36     	; 0x156a <xTaskCreate+0x80>
    1546:	95 01       	movw	r18, r10
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	81 2c       	mov	r8, r1
    154e:	91 2c       	mov	r9, r1
    1550:	5e 01       	movw	r10, r28
    1552:	67 01       	movw	r12, r14
    1554:	e0 2e       	mov	r14, r16
    1556:	82 01       	movw	r16, r4
    1558:	b1 01       	movw	r22, r2
    155a:	c3 01       	movw	r24, r6
    155c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <prvInitialiseNewTask>
    1560:	ce 01       	movw	r24, r28
    1562:	0e 94 9a 09 	call	0x1334	; 0x1334 <prvAddNewTaskToReadyList>
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	01 c0       	rjmp	.+2      	; 0x156c <xTaskCreate+0x82>
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	ff 90       	pop	r15
    1576:	ef 90       	pop	r14
    1578:	df 90       	pop	r13
    157a:	cf 90       	pop	r12
    157c:	bf 90       	pop	r11
    157e:	af 90       	pop	r10
    1580:	9f 90       	pop	r9
    1582:	8f 90       	pop	r8
    1584:	7f 90       	pop	r7
    1586:	6f 90       	pop	r6
    1588:	5f 90       	pop	r5
    158a:	4f 90       	pop	r4
    158c:	3f 90       	pop	r3
    158e:	2f 90       	pop	r2
    1590:	08 95       	ret

00001592 <vTaskStartScheduler>:
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	0f 2e       	mov	r0, r31
    159a:	f9 e2       	ldi	r31, 0x29	; 41
    159c:	ef 2e       	mov	r14, r31
    159e:	fc e2       	ldi	r31, 0x2C	; 44
    15a0:	ff 2e       	mov	r15, r31
    15a2:	f0 2d       	mov	r31, r0
    15a4:	00 e0       	ldi	r16, 0x00	; 0
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	48 ec       	ldi	r20, 0xC8	; 200
    15ac:	50 e0       	ldi	r21, 0x00	; 0
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	70 e2       	ldi	r23, 0x20	; 32
    15b2:	8c e6       	ldi	r24, 0x6C	; 108
    15b4:	9a e0       	ldi	r25, 0x0A	; 10
    15b6:	0e 94 75 0a 	call	0x14ea	; 0x14ea <xTaskCreate>
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	11 f4       	brne	.+4      	; 0x15c2 <vTaskStartScheduler+0x30>
    15be:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <xTimerCreateTimerTask>
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	e9 f4       	brne	.+58     	; 0x1600 <vTaskStartScheduler+0x6e>
    15c6:	e0 ea       	ldi	r30, 0xA0	; 160
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	88 7f       	andi	r24, 0xF8	; 248
    15ce:	82 83       	std	Z+2, r24	; 0x02
    15d0:	8f ef       	ldi	r24, 0xFF	; 255
    15d2:	9f ef       	ldi	r25, 0xFF	; 255
    15d4:	dc 01       	movw	r26, r24
    15d6:	80 93 2b 2c 	sts	0x2C2B, r24	; 0x802c2b <xNextTaskUnblockTime>
    15da:	90 93 2c 2c 	sts	0x2C2C, r25	; 0x802c2c <xNextTaskUnblockTime+0x1>
    15de:	a0 93 2d 2c 	sts	0x2C2D, r26	; 0x802c2d <xNextTaskUnblockTime+0x2>
    15e2:	b0 93 2e 2c 	sts	0x2C2E, r27	; 0x802c2e <xNextTaskUnblockTime+0x3>
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	80 93 33 2c 	sts	0x2C33, r24	; 0x802c33 <xSchedulerRunning>
    15ec:	10 92 35 2c 	sts	0x2C35, r1	; 0x802c35 <xTickCount>
    15f0:	10 92 36 2c 	sts	0x2C36, r1	; 0x802c36 <xTickCount+0x1>
    15f4:	10 92 37 2c 	sts	0x2C37, r1	; 0x802c37 <xTickCount+0x2>
    15f8:	10 92 38 2c 	sts	0x2C38, r1	; 0x802c38 <xTickCount+0x3>
    15fc:	0e 94 aa 04 	call	0x954	; 0x954 <xPortStartScheduler>
    1600:	0f 91       	pop	r16
    1602:	ff 90       	pop	r15
    1604:	ef 90       	pop	r14
    1606:	08 95       	ret

00001608 <vTaskSuspendAll>:
    1608:	80 91 28 2c 	lds	r24, 0x2C28	; 0x802c28 <uxSchedulerSuspended>
    160c:	8f 5f       	subi	r24, 0xFF	; 255
    160e:	80 93 28 2c 	sts	0x2C28, r24	; 0x802c28 <uxSchedulerSuspended>
    1612:	08 95       	ret

00001614 <xTaskGetTickCount>:
    1614:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1618:	ff 93       	push	r31
    161a:	f8 7f       	andi	r31, 0xF8	; 248
    161c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1620:	60 91 35 2c 	lds	r22, 0x2C35	; 0x802c35 <xTickCount>
    1624:	70 91 36 2c 	lds	r23, 0x2C36	; 0x802c36 <xTickCount+0x1>
    1628:	80 91 37 2c 	lds	r24, 0x2C37	; 0x802c37 <xTickCount+0x2>
    162c:	90 91 38 2c 	lds	r25, 0x2C38	; 0x802c38 <xTickCount+0x3>
    1630:	ff 91       	pop	r31
    1632:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1636:	08 95       	ret

00001638 <xTaskIncrementTick>:
    1638:	bf 92       	push	r11
    163a:	cf 92       	push	r12
    163c:	df 92       	push	r13
    163e:	ef 92       	push	r14
    1640:	ff 92       	push	r15
    1642:	0f 93       	push	r16
    1644:	1f 93       	push	r17
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	80 91 28 2c 	lds	r24, 0x2C28	; 0x802c28 <uxSchedulerSuspended>
    164e:	81 11       	cpse	r24, r1
    1650:	a9 c0       	rjmp	.+338    	; 0x17a4 <xTaskIncrementTick+0x16c>
    1652:	c0 90 35 2c 	lds	r12, 0x2C35	; 0x802c35 <xTickCount>
    1656:	d0 90 36 2c 	lds	r13, 0x2C36	; 0x802c36 <xTickCount+0x1>
    165a:	e0 90 37 2c 	lds	r14, 0x2C37	; 0x802c37 <xTickCount+0x2>
    165e:	f0 90 38 2c 	lds	r15, 0x2C38	; 0x802c38 <xTickCount+0x3>
    1662:	2f ef       	ldi	r18, 0xFF	; 255
    1664:	c2 1a       	sub	r12, r18
    1666:	d2 0a       	sbc	r13, r18
    1668:	e2 0a       	sbc	r14, r18
    166a:	f2 0a       	sbc	r15, r18
    166c:	c0 92 35 2c 	sts	0x2C35, r12	; 0x802c35 <xTickCount>
    1670:	d0 92 36 2c 	sts	0x2C36, r13	; 0x802c36 <xTickCount+0x1>
    1674:	e0 92 37 2c 	sts	0x2C37, r14	; 0x802c37 <xTickCount+0x2>
    1678:	f0 92 38 2c 	sts	0x2C38, r15	; 0x802c38 <xTickCount+0x3>
    167c:	c1 14       	cp	r12, r1
    167e:	d1 04       	cpc	r13, r1
    1680:	e1 04       	cpc	r14, r1
    1682:	f1 04       	cpc	r15, r1
    1684:	b9 f4       	brne	.+46     	; 0x16b4 <xTaskIncrementTick+0x7c>
    1686:	80 91 52 2c 	lds	r24, 0x2C52	; 0x802c52 <pxDelayedTaskList>
    168a:	90 91 53 2c 	lds	r25, 0x2C53	; 0x802c53 <pxDelayedTaskList+0x1>
    168e:	20 91 50 2c 	lds	r18, 0x2C50	; 0x802c50 <pxOverflowDelayedTaskList>
    1692:	30 91 51 2c 	lds	r19, 0x2C51	; 0x802c51 <pxOverflowDelayedTaskList+0x1>
    1696:	20 93 52 2c 	sts	0x2C52, r18	; 0x802c52 <pxDelayedTaskList>
    169a:	30 93 53 2c 	sts	0x2C53, r19	; 0x802c53 <pxDelayedTaskList+0x1>
    169e:	80 93 50 2c 	sts	0x2C50, r24	; 0x802c50 <pxOverflowDelayedTaskList>
    16a2:	90 93 51 2c 	sts	0x2C51, r25	; 0x802c51 <pxOverflowDelayedTaskList+0x1>
    16a6:	80 91 30 2c 	lds	r24, 0x2C30	; 0x802c30 <xNumOfOverflows>
    16aa:	8f 5f       	subi	r24, 0xFF	; 255
    16ac:	80 93 30 2c 	sts	0x2C30, r24	; 0x802c30 <xNumOfOverflows>
    16b0:	0e 94 c1 08 	call	0x1182	; 0x1182 <prvResetNextTaskUnblockTime>
    16b4:	80 91 2b 2c 	lds	r24, 0x2C2B	; 0x802c2b <xNextTaskUnblockTime>
    16b8:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <xNextTaskUnblockTime+0x1>
    16bc:	a0 91 2d 2c 	lds	r26, 0x2C2D	; 0x802c2d <xNextTaskUnblockTime+0x2>
    16c0:	b0 91 2e 2c 	lds	r27, 0x2C2E	; 0x802c2e <xNextTaskUnblockTime+0x3>
    16c4:	c8 16       	cp	r12, r24
    16c6:	d9 06       	cpc	r13, r25
    16c8:	ea 06       	cpc	r14, r26
    16ca:	fb 06       	cpc	r15, r27
    16cc:	28 f4       	brcc	.+10     	; 0x16d8 <xTaskIncrementTick+0xa0>
    16ce:	b1 2c       	mov	r11, r1
    16d0:	5a c0       	rjmp	.+180    	; 0x1786 <xTaskIncrementTick+0x14e>
    16d2:	bb 24       	eor	r11, r11
    16d4:	b3 94       	inc	r11
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <xTaskIncrementTick+0xa2>
    16d8:	b1 2c       	mov	r11, r1
    16da:	e0 91 52 2c 	lds	r30, 0x2C52	; 0x802c52 <pxDelayedTaskList>
    16de:	f0 91 53 2c 	lds	r31, 0x2C53	; 0x802c53 <pxDelayedTaskList+0x1>
    16e2:	80 81       	ld	r24, Z
    16e4:	81 11       	cpse	r24, r1
    16e6:	0c c0       	rjmp	.+24     	; 0x1700 <xTaskIncrementTick+0xc8>
    16e8:	8f ef       	ldi	r24, 0xFF	; 255
    16ea:	9f ef       	ldi	r25, 0xFF	; 255
    16ec:	dc 01       	movw	r26, r24
    16ee:	80 93 2b 2c 	sts	0x2C2B, r24	; 0x802c2b <xNextTaskUnblockTime>
    16f2:	90 93 2c 2c 	sts	0x2C2C, r25	; 0x802c2c <xNextTaskUnblockTime+0x1>
    16f6:	a0 93 2d 2c 	sts	0x2C2D, r26	; 0x802c2d <xNextTaskUnblockTime+0x2>
    16fa:	b0 93 2e 2c 	sts	0x2C2E, r27	; 0x802c2e <xNextTaskUnblockTime+0x3>
    16fe:	43 c0       	rjmp	.+134    	; 0x1786 <xTaskIncrementTick+0x14e>
    1700:	e0 91 52 2c 	lds	r30, 0x2C52	; 0x802c52 <pxDelayedTaskList>
    1704:	f0 91 53 2c 	lds	r31, 0x2C53	; 0x802c53 <pxDelayedTaskList+0x1>
    1708:	07 80       	ldd	r0, Z+7	; 0x07
    170a:	f0 85       	ldd	r31, Z+8	; 0x08
    170c:	e0 2d       	mov	r30, r0
    170e:	c0 85       	ldd	r28, Z+8	; 0x08
    1710:	d1 85       	ldd	r29, Z+9	; 0x09
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	9b 81       	ldd	r25, Y+3	; 0x03
    1716:	ac 81       	ldd	r26, Y+4	; 0x04
    1718:	bd 81       	ldd	r27, Y+5	; 0x05
    171a:	c8 16       	cp	r12, r24
    171c:	d9 06       	cpc	r13, r25
    171e:	ea 06       	cpc	r14, r26
    1720:	fb 06       	cpc	r15, r27
    1722:	48 f4       	brcc	.+18     	; 0x1736 <xTaskIncrementTick+0xfe>
    1724:	80 93 2b 2c 	sts	0x2C2B, r24	; 0x802c2b <xNextTaskUnblockTime>
    1728:	90 93 2c 2c 	sts	0x2C2C, r25	; 0x802c2c <xNextTaskUnblockTime+0x1>
    172c:	a0 93 2d 2c 	sts	0x2C2D, r26	; 0x802c2d <xNextTaskUnblockTime+0x2>
    1730:	b0 93 2e 2c 	sts	0x2C2E, r27	; 0x802c2e <xNextTaskUnblockTime+0x3>
    1734:	28 c0       	rjmp	.+80     	; 0x1786 <xTaskIncrementTick+0x14e>
    1736:	8e 01       	movw	r16, r28
    1738:	0e 5f       	subi	r16, 0xFE	; 254
    173a:	1f 4f       	sbci	r17, 0xFF	; 255
    173c:	c8 01       	movw	r24, r16
    173e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <uxListRemove>
    1742:	88 8d       	ldd	r24, Y+24	; 0x18
    1744:	99 8d       	ldd	r25, Y+25	; 0x19
    1746:	89 2b       	or	r24, r25
    1748:	21 f0       	breq	.+8      	; 0x1752 <xTaskIncrementTick+0x11a>
    174a:	ce 01       	movw	r24, r28
    174c:	0e 96       	adiw	r24, 0x0e	; 14
    174e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <uxListRemove>
    1752:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1754:	90 91 34 2c 	lds	r25, 0x2C34	; 0x802c34 <uxTopReadyPriority>
    1758:	98 17       	cp	r25, r24
    175a:	10 f4       	brcc	.+4      	; 0x1760 <xTaskIncrementTick+0x128>
    175c:	80 93 34 2c 	sts	0x2C34, r24	; 0x802c34 <uxTopReadyPriority>
    1760:	2b e0       	ldi	r18, 0x0B	; 11
    1762:	82 9f       	mul	r24, r18
    1764:	c0 01       	movw	r24, r0
    1766:	11 24       	eor	r1, r1
    1768:	b8 01       	movw	r22, r16
    176a:	86 59       	subi	r24, 0x96	; 150
    176c:	93 4d       	sbci	r25, 0xD3	; 211
    176e:	0e 94 86 03 	call	0x70c	; 0x70c <vListInsertEnd>
    1772:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1774:	e0 91 96 2c 	lds	r30, 0x2C96	; 0x802c96 <pxCurrentTCB>
    1778:	f0 91 97 2c 	lds	r31, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    177c:	82 8d       	ldd	r24, Z+26	; 0x1a
    177e:	98 17       	cp	r25, r24
    1780:	08 f0       	brcs	.+2      	; 0x1784 <xTaskIncrementTick+0x14c>
    1782:	a7 cf       	rjmp	.-178    	; 0x16d2 <xTaskIncrementTick+0x9a>
    1784:	aa cf       	rjmp	.-172    	; 0x16da <xTaskIncrementTick+0xa2>
    1786:	e0 91 96 2c 	lds	r30, 0x2C96	; 0x802c96 <pxCurrentTCB>
    178a:	f0 91 97 2c 	lds	r31, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    178e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1790:	8b e0       	ldi	r24, 0x0B	; 11
    1792:	e8 9f       	mul	r30, r24
    1794:	f0 01       	movw	r30, r0
    1796:	11 24       	eor	r1, r1
    1798:	e6 59       	subi	r30, 0x96	; 150
    179a:	f3 4d       	sbci	r31, 0xD3	; 211
    179c:	80 81       	ld	r24, Z
    179e:	82 30       	cpi	r24, 0x02	; 2
    17a0:	40 f4       	brcc	.+16     	; 0x17b2 <xTaskIncrementTick+0x17a>
    17a2:	09 c0       	rjmp	.+18     	; 0x17b6 <xTaskIncrementTick+0x17e>
    17a4:	80 91 32 2c 	lds	r24, 0x2C32	; 0x802c32 <uxPendedTicks>
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	80 93 32 2c 	sts	0x2C32, r24	; 0x802c32 <uxPendedTicks>
    17ae:	b1 2c       	mov	r11, r1
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <xTaskIncrementTick+0x17e>
    17b2:	bb 24       	eor	r11, r11
    17b4:	b3 94       	inc	r11
    17b6:	80 91 31 2c 	lds	r24, 0x2C31	; 0x802c31 <xYieldPending>
    17ba:	88 23       	and	r24, r24
    17bc:	11 f0       	breq	.+4      	; 0x17c2 <xTaskIncrementTick+0x18a>
    17be:	bb 24       	eor	r11, r11
    17c0:	b3 94       	inc	r11
    17c2:	8b 2d       	mov	r24, r11
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	df 90       	pop	r13
    17d2:	cf 90       	pop	r12
    17d4:	bf 90       	pop	r11
    17d6:	08 95       	ret

000017d8 <xTaskResumeAll>:
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17e4:	ff 93       	push	r31
    17e6:	f8 7f       	andi	r31, 0xF8	; 248
    17e8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17ec:	80 91 28 2c 	lds	r24, 0x2C28	; 0x802c28 <uxSchedulerSuspended>
    17f0:	81 50       	subi	r24, 0x01	; 1
    17f2:	80 93 28 2c 	sts	0x2C28, r24	; 0x802c28 <uxSchedulerSuspended>
    17f6:	80 91 28 2c 	lds	r24, 0x2C28	; 0x802c28 <uxSchedulerSuspended>
    17fa:	81 11       	cpse	r24, r1
    17fc:	52 c0       	rjmp	.+164    	; 0x18a2 <xTaskResumeAll+0xca>
    17fe:	80 91 39 2c 	lds	r24, 0x2C39	; 0x802c39 <uxCurrentNumberOfTasks>
    1802:	81 11       	cpse	r24, r1
    1804:	2d c0       	rjmp	.+90     	; 0x1860 <xTaskResumeAll+0x88>
    1806:	50 c0       	rjmp	.+160    	; 0x18a8 <xTaskResumeAll+0xd0>
    1808:	e0 91 4c 2c 	lds	r30, 0x2C4C	; 0x802c4c <xPendingReadyList+0x7>
    180c:	f0 91 4d 2c 	lds	r31, 0x2C4D	; 0x802c4d <xPendingReadyList+0x8>
    1810:	c0 85       	ldd	r28, Z+8	; 0x08
    1812:	d1 85       	ldd	r29, Z+9	; 0x09
    1814:	ce 01       	movw	r24, r28
    1816:	0e 96       	adiw	r24, 0x0e	; 14
    1818:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <uxListRemove>
    181c:	8e 01       	movw	r16, r28
    181e:	0e 5f       	subi	r16, 0xFE	; 254
    1820:	1f 4f       	sbci	r17, 0xFF	; 255
    1822:	c8 01       	movw	r24, r16
    1824:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <uxListRemove>
    1828:	8a 8d       	ldd	r24, Y+26	; 0x1a
    182a:	90 91 34 2c 	lds	r25, 0x2C34	; 0x802c34 <uxTopReadyPriority>
    182e:	98 17       	cp	r25, r24
    1830:	10 f4       	brcc	.+4      	; 0x1836 <xTaskResumeAll+0x5e>
    1832:	80 93 34 2c 	sts	0x2C34, r24	; 0x802c34 <uxTopReadyPriority>
    1836:	2b e0       	ldi	r18, 0x0B	; 11
    1838:	82 9f       	mul	r24, r18
    183a:	c0 01       	movw	r24, r0
    183c:	11 24       	eor	r1, r1
    183e:	b8 01       	movw	r22, r16
    1840:	86 59       	subi	r24, 0x96	; 150
    1842:	93 4d       	sbci	r25, 0xD3	; 211
    1844:	0e 94 86 03 	call	0x70c	; 0x70c <vListInsertEnd>
    1848:	9a 8d       	ldd	r25, Y+26	; 0x1a
    184a:	e0 91 96 2c 	lds	r30, 0x2C96	; 0x802c96 <pxCurrentTCB>
    184e:	f0 91 97 2c 	lds	r31, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1852:	82 8d       	ldd	r24, Z+26	; 0x1a
    1854:	98 17       	cp	r25, r24
    1856:	30 f0       	brcs	.+12     	; 0x1864 <xTaskResumeAll+0x8c>
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	80 93 31 2c 	sts	0x2C31, r24	; 0x802c31 <xYieldPending>
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <xTaskResumeAll+0x8c>
    1860:	c0 e0       	ldi	r28, 0x00	; 0
    1862:	d0 e0       	ldi	r29, 0x00	; 0
    1864:	80 91 45 2c 	lds	r24, 0x2C45	; 0x802c45 <xPendingReadyList>
    1868:	81 11       	cpse	r24, r1
    186a:	ce cf       	rjmp	.-100    	; 0x1808 <xTaskResumeAll+0x30>
    186c:	cd 2b       	or	r28, r29
    186e:	11 f0       	breq	.+4      	; 0x1874 <xTaskResumeAll+0x9c>
    1870:	0e 94 c1 08 	call	0x1182	; 0x1182 <prvResetNextTaskUnblockTime>
    1874:	c0 91 32 2c 	lds	r28, 0x2C32	; 0x802c32 <uxPendedTicks>
    1878:	cc 23       	and	r28, r28
    187a:	59 f0       	breq	.+22     	; 0x1892 <xTaskResumeAll+0xba>
    187c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <xTaskIncrementTick>
    1880:	88 23       	and	r24, r24
    1882:	19 f0       	breq	.+6      	; 0x188a <xTaskResumeAll+0xb2>
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	80 93 31 2c 	sts	0x2C31, r24	; 0x802c31 <xYieldPending>
    188a:	c1 50       	subi	r28, 0x01	; 1
    188c:	b9 f7       	brne	.-18     	; 0x187c <xTaskResumeAll+0xa4>
    188e:	10 92 32 2c 	sts	0x2C32, r1	; 0x802c32 <uxPendedTicks>
    1892:	80 91 31 2c 	lds	r24, 0x2C31	; 0x802c31 <xYieldPending>
    1896:	88 23       	and	r24, r24
    1898:	31 f0       	breq	.+12     	; 0x18a6 <xTaskResumeAll+0xce>
    189a:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vPortYield>
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	03 c0       	rjmp	.+6      	; 0x18a8 <xTaskResumeAll+0xd0>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	01 c0       	rjmp	.+2      	; 0x18a8 <xTaskResumeAll+0xd0>
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	ff 91       	pop	r31
    18aa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	08 95       	ret

000018b8 <vTaskDelay>:
    18b8:	cf 92       	push	r12
    18ba:	df 92       	push	r13
    18bc:	ef 92       	push	r14
    18be:	ff 92       	push	r15
    18c0:	6b 01       	movw	r12, r22
    18c2:	7c 01       	movw	r14, r24
    18c4:	67 2b       	or	r22, r23
    18c6:	68 2b       	or	r22, r24
    18c8:	69 2b       	or	r22, r25
    18ca:	51 f0       	breq	.+20     	; 0x18e0 <vTaskDelay+0x28>
    18cc:	0e 94 04 0b 	call	0x1608	; 0x1608 <vTaskSuspendAll>
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	c7 01       	movw	r24, r14
    18d4:	b6 01       	movw	r22, r12
    18d6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <prvAddCurrentTaskToDelayedList>
    18da:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskResumeAll>
    18de:	01 c0       	rjmp	.+2      	; 0x18e2 <vTaskDelay+0x2a>
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	81 11       	cpse	r24, r1
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <vTaskDelay+0x32>
    18e6:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vPortYield>
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	08 95       	ret

000018f4 <vTaskSwitchContext>:
    18f4:	80 91 28 2c 	lds	r24, 0x2C28	; 0x802c28 <uxSchedulerSuspended>
    18f8:	88 23       	and	r24, r24
    18fa:	21 f0       	breq	.+8      	; 0x1904 <vTaskSwitchContext+0x10>
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	80 93 31 2c 	sts	0x2C31, r24	; 0x802c31 <xYieldPending>
    1902:	08 95       	ret
    1904:	10 92 31 2c 	sts	0x2C31, r1	; 0x802c31 <xYieldPending>
    1908:	e0 91 96 2c 	lds	r30, 0x2C96	; 0x802c96 <pxCurrentTCB>
    190c:	f0 91 97 2c 	lds	r31, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1910:	03 8c       	ldd	r0, Z+27	; 0x1b
    1912:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1914:	e0 2d       	mov	r30, r0
    1916:	80 81       	ld	r24, Z
    1918:	91 81       	ldd	r25, Z+1	; 0x01
    191a:	a2 81       	ldd	r26, Z+2	; 0x02
    191c:	b3 81       	ldd	r27, Z+3	; 0x03
    191e:	85 3a       	cpi	r24, 0xA5	; 165
    1920:	95 4a       	sbci	r25, 0xA5	; 165
    1922:	a5 4a       	sbci	r26, 0xA5	; 165
    1924:	b5 4a       	sbci	r27, 0xA5	; 165
    1926:	d9 f4       	brne	.+54     	; 0x195e <vTaskSwitchContext+0x6a>
    1928:	84 81       	ldd	r24, Z+4	; 0x04
    192a:	95 81       	ldd	r25, Z+5	; 0x05
    192c:	a6 81       	ldd	r26, Z+6	; 0x06
    192e:	b7 81       	ldd	r27, Z+7	; 0x07
    1930:	85 3a       	cpi	r24, 0xA5	; 165
    1932:	95 4a       	sbci	r25, 0xA5	; 165
    1934:	a5 4a       	sbci	r26, 0xA5	; 165
    1936:	b5 4a       	sbci	r27, 0xA5	; 165
    1938:	91 f4       	brne	.+36     	; 0x195e <vTaskSwitchContext+0x6a>
    193a:	80 85       	ldd	r24, Z+8	; 0x08
    193c:	91 85       	ldd	r25, Z+9	; 0x09
    193e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1940:	b3 85       	ldd	r27, Z+11	; 0x0b
    1942:	85 3a       	cpi	r24, 0xA5	; 165
    1944:	95 4a       	sbci	r25, 0xA5	; 165
    1946:	a5 4a       	sbci	r26, 0xA5	; 165
    1948:	b5 4a       	sbci	r27, 0xA5	; 165
    194a:	49 f4       	brne	.+18     	; 0x195e <vTaskSwitchContext+0x6a>
    194c:	84 85       	ldd	r24, Z+12	; 0x0c
    194e:	95 85       	ldd	r25, Z+13	; 0x0d
    1950:	a6 85       	ldd	r26, Z+14	; 0x0e
    1952:	b7 85       	ldd	r27, Z+15	; 0x0f
    1954:	85 3a       	cpi	r24, 0xA5	; 165
    1956:	95 4a       	sbci	r25, 0xA5	; 165
    1958:	a5 4a       	sbci	r26, 0xA5	; 165
    195a:	b5 4a       	sbci	r27, 0xA5	; 165
    195c:	61 f0       	breq	.+24     	; 0x1976 <vTaskSwitchContext+0x82>
    195e:	60 91 96 2c 	lds	r22, 0x2C96	; 0x802c96 <pxCurrentTCB>
    1962:	70 91 97 2c 	lds	r23, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1966:	63 5e       	subi	r22, 0xE3	; 227
    1968:	7f 4f       	sbci	r23, 0xFF	; 255
    196a:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <pxCurrentTCB>
    196e:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1972:	0e 94 aa 01 	call	0x354	; 0x354 <vApplicationStackOverflowHook>
    1976:	80 91 34 2c 	lds	r24, 0x2C34	; 0x802c34 <uxTopReadyPriority>
    197a:	01 c0       	rjmp	.+2      	; 0x197e <vTaskSwitchContext+0x8a>
    197c:	81 50       	subi	r24, 0x01	; 1
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	9b e0       	ldi	r25, 0x0B	; 11
    1984:	92 9f       	mul	r25, r18
    1986:	f0 01       	movw	r30, r0
    1988:	93 9f       	mul	r25, r19
    198a:	f0 0d       	add	r31, r0
    198c:	11 24       	eor	r1, r1
    198e:	e6 59       	subi	r30, 0x96	; 150
    1990:	f3 4d       	sbci	r31, 0xD3	; 211
    1992:	90 81       	ld	r25, Z
    1994:	99 23       	and	r25, r25
    1996:	91 f3       	breq	.-28     	; 0x197c <vTaskSwitchContext+0x88>
    1998:	9b e0       	ldi	r25, 0x0B	; 11
    199a:	92 9f       	mul	r25, r18
    199c:	a0 01       	movw	r20, r0
    199e:	93 9f       	mul	r25, r19
    19a0:	50 0d       	add	r21, r0
    19a2:	11 24       	eor	r1, r1
    19a4:	df 01       	movw	r26, r30
    19a6:	01 80       	ldd	r0, Z+1	; 0x01
    19a8:	f2 81       	ldd	r31, Z+2	; 0x02
    19aa:	e0 2d       	mov	r30, r0
    19ac:	04 80       	ldd	r0, Z+4	; 0x04
    19ae:	f5 81       	ldd	r31, Z+5	; 0x05
    19b0:	e0 2d       	mov	r30, r0
    19b2:	11 96       	adiw	r26, 0x01	; 1
    19b4:	ed 93       	st	X+, r30
    19b6:	fc 93       	st	X, r31
    19b8:	12 97       	sbiw	r26, 0x02	; 2
    19ba:	43 59       	subi	r20, 0x93	; 147
    19bc:	53 4d       	sbci	r21, 0xD3	; 211
    19be:	e4 17       	cp	r30, r20
    19c0:	f5 07       	cpc	r31, r21
    19c2:	29 f4       	brne	.+10     	; 0x19ce <vTaskSwitchContext+0xda>
    19c4:	44 81       	ldd	r20, Z+4	; 0x04
    19c6:	55 81       	ldd	r21, Z+5	; 0x05
    19c8:	fd 01       	movw	r30, r26
    19ca:	41 83       	std	Z+1, r20	; 0x01
    19cc:	52 83       	std	Z+2, r21	; 0x02
    19ce:	9b e0       	ldi	r25, 0x0B	; 11
    19d0:	92 9f       	mul	r25, r18
    19d2:	f0 01       	movw	r30, r0
    19d4:	93 9f       	mul	r25, r19
    19d6:	f0 0d       	add	r31, r0
    19d8:	11 24       	eor	r1, r1
    19da:	e6 59       	subi	r30, 0x96	; 150
    19dc:	f3 4d       	sbci	r31, 0xD3	; 211
    19de:	01 80       	ldd	r0, Z+1	; 0x01
    19e0:	f2 81       	ldd	r31, Z+2	; 0x02
    19e2:	e0 2d       	mov	r30, r0
    19e4:	20 85       	ldd	r18, Z+8	; 0x08
    19e6:	31 85       	ldd	r19, Z+9	; 0x09
    19e8:	20 93 96 2c 	sts	0x2C96, r18	; 0x802c96 <pxCurrentTCB>
    19ec:	30 93 97 2c 	sts	0x2C97, r19	; 0x802c97 <pxCurrentTCB+0x1>
    19f0:	80 93 34 2c 	sts	0x2C34, r24	; 0x802c34 <uxTopReadyPriority>
    19f4:	08 95       	ret

000019f6 <vTaskPlaceOnEventList>:
    19f6:	cf 92       	push	r12
    19f8:	df 92       	push	r13
    19fa:	ef 92       	push	r14
    19fc:	ff 92       	push	r15
    19fe:	6a 01       	movw	r12, r20
    1a00:	7b 01       	movw	r14, r22
    1a02:	60 91 96 2c 	lds	r22, 0x2C96	; 0x802c96 <pxCurrentTCB>
    1a06:	70 91 97 2c 	lds	r23, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1a0a:	62 5f       	subi	r22, 0xF2	; 242
    1a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0e:	0e 94 a7 03 	call	0x74e	; 0x74e <vListInsert>
    1a12:	41 e0       	ldi	r20, 0x01	; 1
    1a14:	c7 01       	movw	r24, r14
    1a16:	b6 01       	movw	r22, r12
    1a18:	0e 94 f5 09 	call	0x13ea	; 0x13ea <prvAddCurrentTaskToDelayedList>
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	df 90       	pop	r13
    1a22:	cf 90       	pop	r12
    1a24:	08 95       	ret

00001a26 <vTaskPlaceOnUnorderedEventList>:
    1a26:	cf 92       	push	r12
    1a28:	df 92       	push	r13
    1a2a:	ef 92       	push	r14
    1a2c:	ff 92       	push	r15
    1a2e:	0f 93       	push	r16
    1a30:	1f 93       	push	r17
    1a32:	68 01       	movw	r12, r16
    1a34:	79 01       	movw	r14, r18
    1a36:	e0 91 96 2c 	lds	r30, 0x2C96	; 0x802c96 <pxCurrentTCB>
    1a3a:	f0 91 97 2c 	lds	r31, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1a3e:	70 68       	ori	r23, 0x80	; 128
    1a40:	46 87       	std	Z+14, r20	; 0x0e
    1a42:	57 87       	std	Z+15, r21	; 0x0f
    1a44:	60 8b       	std	Z+16, r22	; 0x10
    1a46:	71 8b       	std	Z+17, r23	; 0x11
    1a48:	60 91 96 2c 	lds	r22, 0x2C96	; 0x802c96 <pxCurrentTCB>
    1a4c:	70 91 97 2c 	lds	r23, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1a50:	62 5f       	subi	r22, 0xF2	; 242
    1a52:	7f 4f       	sbci	r23, 0xFF	; 255
    1a54:	0e 94 86 03 	call	0x70c	; 0x70c <vListInsertEnd>
    1a58:	41 e0       	ldi	r20, 0x01	; 1
    1a5a:	c7 01       	movw	r24, r14
    1a5c:	b6 01       	movw	r22, r12
    1a5e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <prvAddCurrentTaskToDelayedList>
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	ff 90       	pop	r15
    1a68:	ef 90       	pop	r14
    1a6a:	df 90       	pop	r13
    1a6c:	cf 90       	pop	r12
    1a6e:	08 95       	ret

00001a70 <vTaskPlaceOnEventListRestricted>:
    1a70:	cf 92       	push	r12
    1a72:	df 92       	push	r13
    1a74:	ef 92       	push	r14
    1a76:	ff 92       	push	r15
    1a78:	cf 93       	push	r28
    1a7a:	6a 01       	movw	r12, r20
    1a7c:	7b 01       	movw	r14, r22
    1a7e:	c2 2f       	mov	r28, r18
    1a80:	60 91 96 2c 	lds	r22, 0x2C96	; 0x802c96 <pxCurrentTCB>
    1a84:	70 91 97 2c 	lds	r23, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1a88:	62 5f       	subi	r22, 0xF2	; 242
    1a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8c:	0e 94 86 03 	call	0x70c	; 0x70c <vListInsertEnd>
    1a90:	cc 23       	and	r28, r28
    1a92:	21 f0       	breq	.+8      	; 0x1a9c <vTaskPlaceOnEventListRestricted+0x2c>
    1a94:	cc 24       	eor	r12, r12
    1a96:	ca 94       	dec	r12
    1a98:	dc 2c       	mov	r13, r12
    1a9a:	76 01       	movw	r14, r12
    1a9c:	4c 2f       	mov	r20, r28
    1a9e:	c7 01       	movw	r24, r14
    1aa0:	b6 01       	movw	r22, r12
    1aa2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <prvAddCurrentTaskToDelayedList>
    1aa6:	cf 91       	pop	r28
    1aa8:	ff 90       	pop	r15
    1aaa:	ef 90       	pop	r14
    1aac:	df 90       	pop	r13
    1aae:	cf 90       	pop	r12
    1ab0:	08 95       	ret

00001ab2 <xTaskRemoveFromEventList>:
    1ab2:	0f 93       	push	r16
    1ab4:	1f 93       	push	r17
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	dc 01       	movw	r26, r24
    1abc:	17 96       	adiw	r26, 0x07	; 7
    1abe:	ed 91       	ld	r30, X+
    1ac0:	fc 91       	ld	r31, X
    1ac2:	18 97       	sbiw	r26, 0x08	; 8
    1ac4:	c0 85       	ldd	r28, Z+8	; 0x08
    1ac6:	d1 85       	ldd	r29, Z+9	; 0x09
    1ac8:	8e 01       	movw	r16, r28
    1aca:	02 5f       	subi	r16, 0xF2	; 242
    1acc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ace:	c8 01       	movw	r24, r16
    1ad0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <uxListRemove>
    1ad4:	80 91 28 2c 	lds	r24, 0x2C28	; 0x802c28 <uxSchedulerSuspended>
    1ad8:	81 11       	cpse	r24, r1
    1ada:	16 c0       	rjmp	.+44     	; 0x1b08 <xTaskRemoveFromEventList+0x56>
    1adc:	0c 50       	subi	r16, 0x0C	; 12
    1ade:	11 09       	sbc	r17, r1
    1ae0:	c8 01       	movw	r24, r16
    1ae2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <uxListRemove>
    1ae6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ae8:	90 91 34 2c 	lds	r25, 0x2C34	; 0x802c34 <uxTopReadyPriority>
    1aec:	98 17       	cp	r25, r24
    1aee:	10 f4       	brcc	.+4      	; 0x1af4 <xTaskRemoveFromEventList+0x42>
    1af0:	80 93 34 2c 	sts	0x2C34, r24	; 0x802c34 <uxTopReadyPriority>
    1af4:	bb e0       	ldi	r27, 0x0B	; 11
    1af6:	8b 9f       	mul	r24, r27
    1af8:	c0 01       	movw	r24, r0
    1afa:	11 24       	eor	r1, r1
    1afc:	b8 01       	movw	r22, r16
    1afe:	86 59       	subi	r24, 0x96	; 150
    1b00:	93 4d       	sbci	r25, 0xD3	; 211
    1b02:	0e 94 86 03 	call	0x70c	; 0x70c <vListInsertEnd>
    1b06:	05 c0       	rjmp	.+10     	; 0x1b12 <xTaskRemoveFromEventList+0x60>
    1b08:	b8 01       	movw	r22, r16
    1b0a:	85 e4       	ldi	r24, 0x45	; 69
    1b0c:	9c e2       	ldi	r25, 0x2C	; 44
    1b0e:	0e 94 86 03 	call	0x70c	; 0x70c <vListInsertEnd>
    1b12:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b14:	e0 91 96 2c 	lds	r30, 0x2C96	; 0x802c96 <pxCurrentTCB>
    1b18:	f0 91 97 2c 	lds	r31, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1b1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b1e:	89 17       	cp	r24, r25
    1b20:	20 f4       	brcc	.+8      	; 0x1b2a <xTaskRemoveFromEventList+0x78>
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	80 93 31 2c 	sts	0x2C31, r24	; 0x802c31 <xYieldPending>
    1b28:	01 c0       	rjmp	.+2      	; 0x1b2c <xTaskRemoveFromEventList+0x7a>
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	08 95       	ret

00001b36 <vTaskRemoveFromUnorderedEventList>:
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	70 68       	ori	r23, 0x80	; 128
    1b40:	fc 01       	movw	r30, r24
    1b42:	40 83       	st	Z, r20
    1b44:	51 83       	std	Z+1, r21	; 0x01
    1b46:	62 83       	std	Z+2, r22	; 0x02
    1b48:	73 83       	std	Z+3, r23	; 0x03
    1b4a:	c0 85       	ldd	r28, Z+8	; 0x08
    1b4c:	d1 85       	ldd	r29, Z+9	; 0x09
    1b4e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <uxListRemove>
    1b52:	8e 01       	movw	r16, r28
    1b54:	0e 5f       	subi	r16, 0xFE	; 254
    1b56:	1f 4f       	sbci	r17, 0xFF	; 255
    1b58:	c8 01       	movw	r24, r16
    1b5a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <uxListRemove>
    1b5e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b60:	90 91 34 2c 	lds	r25, 0x2C34	; 0x802c34 <uxTopReadyPriority>
    1b64:	98 17       	cp	r25, r24
    1b66:	10 f4       	brcc	.+4      	; 0x1b6c <vTaskRemoveFromUnorderedEventList+0x36>
    1b68:	80 93 34 2c 	sts	0x2C34, r24	; 0x802c34 <uxTopReadyPriority>
    1b6c:	fb e0       	ldi	r31, 0x0B	; 11
    1b6e:	8f 9f       	mul	r24, r31
    1b70:	c0 01       	movw	r24, r0
    1b72:	11 24       	eor	r1, r1
    1b74:	b8 01       	movw	r22, r16
    1b76:	86 59       	subi	r24, 0x96	; 150
    1b78:	93 4d       	sbci	r25, 0xD3	; 211
    1b7a:	0e 94 86 03 	call	0x70c	; 0x70c <vListInsertEnd>
    1b7e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b80:	e0 91 96 2c 	lds	r30, 0x2C96	; 0x802c96 <pxCurrentTCB>
    1b84:	f0 91 97 2c 	lds	r31, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1b88:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b8a:	89 17       	cp	r24, r25
    1b8c:	18 f4       	brcc	.+6      	; 0x1b94 <vTaskRemoveFromUnorderedEventList+0x5e>
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	80 93 31 2c 	sts	0x2C31, r24	; 0x802c31 <xYieldPending>
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	08 95       	ret

00001b9e <vTaskInternalSetTimeOutState>:
    1b9e:	20 91 30 2c 	lds	r18, 0x2C30	; 0x802c30 <xNumOfOverflows>
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	20 83       	st	Z, r18
    1ba6:	40 91 35 2c 	lds	r20, 0x2C35	; 0x802c35 <xTickCount>
    1baa:	50 91 36 2c 	lds	r21, 0x2C36	; 0x802c36 <xTickCount+0x1>
    1bae:	60 91 37 2c 	lds	r22, 0x2C37	; 0x802c37 <xTickCount+0x2>
    1bb2:	70 91 38 2c 	lds	r23, 0x2C38	; 0x802c38 <xTickCount+0x3>
    1bb6:	41 83       	std	Z+1, r20	; 0x01
    1bb8:	52 83       	std	Z+2, r21	; 0x02
    1bba:	63 83       	std	Z+3, r22	; 0x03
    1bbc:	74 83       	std	Z+4, r23	; 0x04
    1bbe:	08 95       	ret

00001bc0 <xTaskCheckForTimeOut>:
    1bc0:	8f 92       	push	r8
    1bc2:	9f 92       	push	r9
    1bc4:	af 92       	push	r10
    1bc6:	bf 92       	push	r11
    1bc8:	cf 92       	push	r12
    1bca:	df 92       	push	r13
    1bcc:	ef 92       	push	r14
    1bce:	ff 92       	push	r15
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	db 01       	movw	r26, r22
    1bda:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1bde:	ff 93       	push	r31
    1be0:	f8 7f       	andi	r31, 0xF8	; 248
    1be2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1be6:	c0 90 35 2c 	lds	r12, 0x2C35	; 0x802c35 <xTickCount>
    1bea:	d0 90 36 2c 	lds	r13, 0x2C36	; 0x802c36 <xTickCount+0x1>
    1bee:	e0 90 37 2c 	lds	r14, 0x2C37	; 0x802c37 <xTickCount+0x2>
    1bf2:	f0 90 38 2c 	lds	r15, 0x2C38	; 0x802c38 <xTickCount+0x3>
    1bf6:	ec 01       	movw	r28, r24
    1bf8:	09 81       	ldd	r16, Y+1	; 0x01
    1bfa:	1a 81       	ldd	r17, Y+2	; 0x02
    1bfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1c00:	46 01       	movw	r8, r12
    1c02:	57 01       	movw	r10, r14
    1c04:	80 1a       	sub	r8, r16
    1c06:	91 0a       	sbc	r9, r17
    1c08:	a2 0a       	sbc	r10, r18
    1c0a:	b3 0a       	sbc	r11, r19
    1c0c:	4d 91       	ld	r20, X+
    1c0e:	5d 91       	ld	r21, X+
    1c10:	6d 91       	ld	r22, X+
    1c12:	7c 91       	ld	r23, X
    1c14:	13 97       	sbiw	r26, 0x03	; 3
    1c16:	4f 3f       	cpi	r20, 0xFF	; 255
    1c18:	df ef       	ldi	r29, 0xFF	; 255
    1c1a:	5d 07       	cpc	r21, r29
    1c1c:	6d 07       	cpc	r22, r29
    1c1e:	7d 07       	cpc	r23, r29
    1c20:	21 f1       	breq	.+72     	; 0x1c6a <xTaskCheckForTimeOut+0xaa>
    1c22:	ec 01       	movw	r28, r24
    1c24:	f8 81       	ld	r31, Y
    1c26:	e0 91 30 2c 	lds	r30, 0x2C30	; 0x802c30 <xNumOfOverflows>
    1c2a:	fe 17       	cp	r31, r30
    1c2c:	29 f0       	breq	.+10     	; 0x1c38 <xTaskCheckForTimeOut+0x78>
    1c2e:	c0 16       	cp	r12, r16
    1c30:	d1 06       	cpc	r13, r17
    1c32:	e2 06       	cpc	r14, r18
    1c34:	f3 06       	cpc	r15, r19
    1c36:	d8 f4       	brcc	.+54     	; 0x1c6e <xTaskCheckForTimeOut+0xae>
    1c38:	84 16       	cp	r8, r20
    1c3a:	95 06       	cpc	r9, r21
    1c3c:	a6 06       	cpc	r10, r22
    1c3e:	b7 06       	cpc	r11, r23
    1c40:	68 f4       	brcc	.+26     	; 0x1c5c <xTaskCheckForTimeOut+0x9c>
    1c42:	48 19       	sub	r20, r8
    1c44:	59 09       	sbc	r21, r9
    1c46:	6a 09       	sbc	r22, r10
    1c48:	7b 09       	sbc	r23, r11
    1c4a:	4d 93       	st	X+, r20
    1c4c:	5d 93       	st	X+, r21
    1c4e:	6d 93       	st	X+, r22
    1c50:	7c 93       	st	X, r23
    1c52:	13 97       	sbiw	r26, 0x03	; 3
    1c54:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <vTaskInternalSetTimeOutState>
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	0a c0       	rjmp	.+20     	; 0x1c70 <xTaskCheckForTimeOut+0xb0>
    1c5c:	1d 92       	st	X+, r1
    1c5e:	1d 92       	st	X+, r1
    1c60:	1d 92       	st	X+, r1
    1c62:	1c 92       	st	X, r1
    1c64:	13 97       	sbiw	r26, 0x03	; 3
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	03 c0       	rjmp	.+6      	; 0x1c70 <xTaskCheckForTimeOut+0xb0>
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	01 c0       	rjmp	.+2      	; 0x1c70 <xTaskCheckForTimeOut+0xb0>
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	ff 91       	pop	r31
    1c72:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	1f 91       	pop	r17
    1c7c:	0f 91       	pop	r16
    1c7e:	ff 90       	pop	r15
    1c80:	ef 90       	pop	r14
    1c82:	df 90       	pop	r13
    1c84:	cf 90       	pop	r12
    1c86:	bf 90       	pop	r11
    1c88:	af 90       	pop	r10
    1c8a:	9f 90       	pop	r9
    1c8c:	8f 90       	pop	r8
    1c8e:	08 95       	ret

00001c90 <vTaskMissedYield>:
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	80 93 31 2c 	sts	0x2C31, r24	; 0x802c31 <xYieldPending>
    1c96:	08 95       	ret

00001c98 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1c98:	80 91 33 2c 	lds	r24, 0x2C33	; 0x802c33 <xSchedulerRunning>
    1c9c:	88 23       	and	r24, r24
    1c9e:	31 f0       	breq	.+12     	; 0x1cac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1ca0:	80 91 28 2c 	lds	r24, 0x2C28	; 0x802c28 <uxSchedulerSuspended>
    1ca4:	81 11       	cpse	r24, r1
    1ca6:	04 c0       	rjmp	.+8      	; 0x1cb0 <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
    1ca8:	82 e0       	ldi	r24, 0x02	; 2
    1caa:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	08 95       	ret
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
			}
		}

		return xReturn;
	}
    1cb2:	08 95       	ret

00001cb4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1cb4:	cf 92       	push	r12
    1cb6:	df 92       	push	r13
    1cb8:	ef 92       	push	r14
    1cba:	ff 92       	push	r15
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1cbc:	e0 91 96 2c 	lds	r30, 0x2C96	; 0x802c96 <pxCurrentTCB>
    1cc0:	f0 91 97 2c 	lds	r31, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1cc4:	66 85       	ldd	r22, Z+14	; 0x0e
    1cc6:	77 85       	ldd	r23, Z+15	; 0x0f
    1cc8:	80 89       	ldd	r24, Z+16	; 0x10
    1cca:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1ccc:	e0 91 96 2c 	lds	r30, 0x2C96	; 0x802c96 <pxCurrentTCB>
    1cd0:	f0 91 97 2c 	lds	r31, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1cd4:	a0 91 96 2c 	lds	r26, 0x2C96	; 0x802c96 <pxCurrentTCB>
    1cd8:	b0 91 97 2c 	lds	r27, 0x2C97	; 0x802c97 <pxCurrentTCB+0x1>
    1cdc:	5a 96       	adiw	r26, 0x1a	; 26
    1cde:	2c 91       	ld	r18, X
    1ce0:	c1 2c       	mov	r12, r1
    1ce2:	d1 2c       	mov	r13, r1
    1ce4:	76 01       	movw	r14, r12
    1ce6:	68 94       	set
    1ce8:	c2 f8       	bld	r12, 2
    1cea:	c2 1a       	sub	r12, r18
    1cec:	d1 08       	sbc	r13, r1
    1cee:	e1 08       	sbc	r14, r1
    1cf0:	f1 08       	sbc	r15, r1
    1cf2:	c6 86       	std	Z+14, r12	; 0x0e
    1cf4:	d7 86       	std	Z+15, r13	; 0x0f
    1cf6:	e0 8a       	std	Z+16, r14	; 0x10
    1cf8:	f1 8a       	std	Z+17, r15	; 0x11

	return uxReturn;
}
    1cfa:	ff 90       	pop	r15
    1cfc:	ef 90       	pop	r14
    1cfe:	df 90       	pop	r13
    1d00:	cf 90       	pop	r12
    1d02:	08 95       	ret

00001d04 <prvGetNextExpireTime>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    1d04:	dc 01       	movw	r26, r24
    1d06:	e0 91 a2 2c 	lds	r30, 0x2CA2	; 0x802ca2 <pxCurrentTimerList>
    1d0a:	f0 91 a3 2c 	lds	r31, 0x2CA3	; 0x802ca3 <pxCurrentTimerList+0x1>
    1d0e:	80 81       	ld	r24, Z
    1d10:	91 e0       	ldi	r25, 0x01	; 1
    1d12:	81 11       	cpse	r24, r1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9c 93       	st	X, r25
    1d18:	91 11       	cpse	r25, r1
    1d1a:	08 c0       	rjmp	.+16     	; 0x1d2c <prvGetNextExpireTime+0x28>
    1d1c:	07 80       	ldd	r0, Z+7	; 0x07
    1d1e:	f0 85       	ldd	r31, Z+8	; 0x08
    1d20:	e0 2d       	mov	r30, r0
    1d22:	60 81       	ld	r22, Z
    1d24:	71 81       	ldd	r23, Z+1	; 0x01
    1d26:	82 81       	ldd	r24, Z+2	; 0x02
    1d28:	93 81       	ldd	r25, Z+3	; 0x03
    1d2a:	08 95       	ret
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	70 e0       	ldi	r23, 0x00	; 0
    1d30:	cb 01       	movw	r24, r22
    1d32:	08 95       	ret

00001d34 <prvInsertTimerInActiveList>:
    1d34:	cf 92       	push	r12
    1d36:	df 92       	push	r13
    1d38:	ef 92       	push	r14
    1d3a:	ff 92       	push	r15
    1d3c:	0f 93       	push	r16
    1d3e:	1f 93       	push	r17
    1d40:	fc 01       	movw	r30, r24
    1d42:	42 83       	std	Z+2, r20	; 0x02
    1d44:	53 83       	std	Z+3, r21	; 0x03
    1d46:	64 83       	std	Z+4, r22	; 0x04
    1d48:	75 83       	std	Z+5, r23	; 0x05
    1d4a:	82 87       	std	Z+10, r24	; 0x0a
    1d4c:	93 87       	std	Z+11, r25	; 0x0b
    1d4e:	04 17       	cp	r16, r20
    1d50:	15 07       	cpc	r17, r21
    1d52:	26 07       	cpc	r18, r22
    1d54:	37 07       	cpc	r19, r23
    1d56:	c0 f0       	brcs	.+48     	; 0x1d88 <prvInsertTimerInActiveList+0x54>
    1d58:	0c 19       	sub	r16, r12
    1d5a:	1d 09       	sbc	r17, r13
    1d5c:	2e 09       	sbc	r18, r14
    1d5e:	3f 09       	sbc	r19, r15
    1d60:	86 85       	ldd	r24, Z+14	; 0x0e
    1d62:	97 85       	ldd	r25, Z+15	; 0x0f
    1d64:	a0 89       	ldd	r26, Z+16	; 0x10
    1d66:	b1 89       	ldd	r27, Z+17	; 0x11
    1d68:	08 17       	cp	r16, r24
    1d6a:	19 07       	cpc	r17, r25
    1d6c:	2a 07       	cpc	r18, r26
    1d6e:	3b 07       	cpc	r19, r27
    1d70:	00 f5       	brcc	.+64     	; 0x1db2 <prvInsertTimerInActiveList+0x7e>
    1d72:	bf 01       	movw	r22, r30
    1d74:	6e 5f       	subi	r22, 0xFE	; 254
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	80 91 a0 2c 	lds	r24, 0x2CA0	; 0x802ca0 <pxOverflowTimerList>
    1d7c:	90 91 a1 2c 	lds	r25, 0x2CA1	; 0x802ca1 <pxOverflowTimerList+0x1>
    1d80:	0e 94 a7 03 	call	0x74e	; 0x74e <vListInsert>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	18 c0       	rjmp	.+48     	; 0x1db8 <prvInsertTimerInActiveList+0x84>
    1d88:	0c 15       	cp	r16, r12
    1d8a:	1d 05       	cpc	r17, r13
    1d8c:	2e 05       	cpc	r18, r14
    1d8e:	3f 05       	cpc	r19, r15
    1d90:	28 f4       	brcc	.+10     	; 0x1d9c <prvInsertTimerInActiveList+0x68>
    1d92:	4c 15       	cp	r20, r12
    1d94:	5d 05       	cpc	r21, r13
    1d96:	6e 05       	cpc	r22, r14
    1d98:	7f 05       	cpc	r23, r15
    1d9a:	68 f4       	brcc	.+26     	; 0x1db6 <prvInsertTimerInActiveList+0x82>
    1d9c:	bf 01       	movw	r22, r30
    1d9e:	6e 5f       	subi	r22, 0xFE	; 254
    1da0:	7f 4f       	sbci	r23, 0xFF	; 255
    1da2:	80 91 a2 2c 	lds	r24, 0x2CA2	; 0x802ca2 <pxCurrentTimerList>
    1da6:	90 91 a3 2c 	lds	r25, 0x2CA3	; 0x802ca3 <pxCurrentTimerList+0x1>
    1daa:	0e 94 a7 03 	call	0x74e	; 0x74e <vListInsert>
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	03 c0       	rjmp	.+6      	; 0x1db8 <prvInsertTimerInActiveList+0x84>
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	01 c0       	rjmp	.+2      	; 0x1db8 <prvInsertTimerInActiveList+0x84>
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	ff 90       	pop	r15
    1dbe:	ef 90       	pop	r14
    1dc0:	df 90       	pop	r13
    1dc2:	cf 90       	pop	r12
    1dc4:	08 95       	ret

00001dc6 <prvCheckForValidListAndQueue>:
    1dc6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1dca:	ff 93       	push	r31
    1dcc:	f8 7f       	andi	r31, 0xF8	; 248
    1dce:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1dd2:	80 91 9e 2c 	lds	r24, 0x2C9E	; 0x802c9e <xTimerQueue>
    1dd6:	90 91 9f 2c 	lds	r25, 0x2C9F	; 0x802c9f <xTimerQueue+0x1>
    1dda:	89 2b       	or	r24, r25
    1ddc:	e9 f4       	brne	.+58     	; 0x1e18 <prvCheckForValidListAndQueue+0x52>
    1dde:	8f ea       	ldi	r24, 0xAF	; 175
    1de0:	9c e2       	ldi	r25, 0x2C	; 44
    1de2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vListInitialise>
    1de6:	84 ea       	ldi	r24, 0xA4	; 164
    1de8:	9c e2       	ldi	r25, 0x2C	; 44
    1dea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vListInitialise>
    1dee:	8f ea       	ldi	r24, 0xAF	; 175
    1df0:	9c e2       	ldi	r25, 0x2C	; 44
    1df2:	80 93 a2 2c 	sts	0x2CA2, r24	; 0x802ca2 <pxCurrentTimerList>
    1df6:	90 93 a3 2c 	sts	0x2CA3, r25	; 0x802ca3 <pxCurrentTimerList+0x1>
    1dfa:	84 ea       	ldi	r24, 0xA4	; 164
    1dfc:	9c e2       	ldi	r25, 0x2C	; 44
    1dfe:	80 93 a0 2c 	sts	0x2CA0, r24	; 0x802ca0 <pxOverflowTimerList>
    1e02:	90 93 a1 2c 	sts	0x2CA1, r25	; 0x802ca1 <pxOverflowTimerList+0x1>
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	69 e0       	ldi	r22, 0x09	; 9
    1e0a:	85 e0       	ldi	r24, 0x05	; 5
    1e0c:	0e 94 e7 06 	call	0xdce	; 0xdce <xQueueGenericCreate>
    1e10:	80 93 9e 2c 	sts	0x2C9E, r24	; 0x802c9e <xTimerQueue>
    1e14:	90 93 9f 2c 	sts	0x2C9F, r25	; 0x802c9f <xTimerQueue+0x1>
    1e18:	ff 91       	pop	r31
    1e1a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e1e:	08 95       	ret

00001e20 <xTimerCreateTimerTask>:
    1e20:	ef 92       	push	r14
    1e22:	ff 92       	push	r15
    1e24:	0f 93       	push	r16
    1e26:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <prvCheckForValidListAndQueue>
    1e2a:	80 91 9e 2c 	lds	r24, 0x2C9E	; 0x802c9e <xTimerQueue>
    1e2e:	90 91 9f 2c 	lds	r25, 0x2C9F	; 0x802c9f <xTimerQueue+0x1>
    1e32:	89 2b       	or	r24, r25
    1e34:	91 f0       	breq	.+36     	; 0x1e5a <xTimerCreateTimerTask+0x3a>
    1e36:	0f 2e       	mov	r0, r31
    1e38:	fc e9       	ldi	r31, 0x9C	; 156
    1e3a:	ef 2e       	mov	r14, r31
    1e3c:	fc e2       	ldi	r31, 0x2C	; 44
    1e3e:	ff 2e       	mov	r15, r31
    1e40:	f0 2d       	mov	r31, r0
    1e42:	03 e0       	ldi	r16, 0x03	; 3
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	48 ec       	ldi	r20, 0xC8	; 200
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	65 e0       	ldi	r22, 0x05	; 5
    1e4e:	70 e2       	ldi	r23, 0x20	; 32
    1e50:	8e e7       	ldi	r24, 0x7E	; 126
    1e52:	91 e1       	ldi	r25, 0x11	; 17
    1e54:	0e 94 75 0a 	call	0x14ea	; 0x14ea <xTaskCreate>
    1e58:	01 c0       	rjmp	.+2      	; 0x1e5c <xTimerCreateTimerTask+0x3c>
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	0f 91       	pop	r16
    1e5e:	ff 90       	pop	r15
    1e60:	ef 90       	pop	r14
    1e62:	08 95       	ret

00001e64 <xTimerGenericCommand>:
    1e64:	8f 92       	push	r8
    1e66:	9f 92       	push	r9
    1e68:	af 92       	push	r10
    1e6a:	bf 92       	push	r11
    1e6c:	cf 92       	push	r12
    1e6e:	df 92       	push	r13
    1e70:	ef 92       	push	r14
    1e72:	ff 92       	push	r15
    1e74:	0f 93       	push	r16
    1e76:	1f 93       	push	r17
    1e78:	cf 93       	push	r28
    1e7a:	df 93       	push	r29
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	29 97       	sbiw	r28, 0x09	; 9
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	e0 91 9e 2c 	lds	r30, 0x2C9E	; 0x802c9e <xTimerQueue>
    1e8a:	f0 91 9f 2c 	lds	r31, 0x2C9F	; 0x802c9f <xTimerQueue+0x1>
    1e8e:	30 97       	sbiw	r30, 0x00	; 0
    1e90:	89 f1       	breq	.+98     	; 0x1ef4 <xTimerGenericCommand+0x90>
    1e92:	69 83       	std	Y+1, r22	; 0x01
    1e94:	2a 83       	std	Y+2, r18	; 0x02
    1e96:	3b 83       	std	Y+3, r19	; 0x03
    1e98:	4c 83       	std	Y+4, r20	; 0x04
    1e9a:	5d 83       	std	Y+5, r21	; 0x05
    1e9c:	8e 83       	std	Y+6, r24	; 0x06
    1e9e:	9f 83       	std	Y+7, r25	; 0x07
    1ea0:	66 30       	cpi	r22, 0x06	; 6
    1ea2:	fc f4       	brge	.+62     	; 0x1ee2 <xTimerGenericCommand+0x7e>
    1ea4:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <xTaskGetSchedulerState>
    1ea8:	82 30       	cpi	r24, 0x02	; 2
    1eaa:	69 f4       	brne	.+26     	; 0x1ec6 <xTimerGenericCommand+0x62>
    1eac:	00 e0       	ldi	r16, 0x00	; 0
    1eae:	a7 01       	movw	r20, r14
    1eb0:	96 01       	movw	r18, r12
    1eb2:	be 01       	movw	r22, r28
    1eb4:	6f 5f       	subi	r22, 0xFF	; 255
    1eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb8:	80 91 9e 2c 	lds	r24, 0x2C9E	; 0x802c9e <xTimerQueue>
    1ebc:	90 91 9f 2c 	lds	r25, 0x2C9F	; 0x802c9f <xTimerQueue+0x1>
    1ec0:	0e 94 11 07 	call	0xe22	; 0xe22 <xQueueGenericSend>
    1ec4:	18 c0       	rjmp	.+48     	; 0x1ef6 <xTimerGenericCommand+0x92>
    1ec6:	00 e0       	ldi	r16, 0x00	; 0
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	a9 01       	movw	r20, r18
    1ece:	be 01       	movw	r22, r28
    1ed0:	6f 5f       	subi	r22, 0xFF	; 255
    1ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed4:	80 91 9e 2c 	lds	r24, 0x2C9E	; 0x802c9e <xTimerQueue>
    1ed8:	90 91 9f 2c 	lds	r25, 0x2C9F	; 0x802c9f <xTimerQueue+0x1>
    1edc:	0e 94 11 07 	call	0xe22	; 0xe22 <xQueueGenericSend>
    1ee0:	0a c0       	rjmp	.+20     	; 0x1ef6 <xTimerGenericCommand+0x92>
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	a8 01       	movw	r20, r16
    1ee6:	be 01       	movw	r22, r28
    1ee8:	6f 5f       	subi	r22, 0xFF	; 255
    1eea:	7f 4f       	sbci	r23, 0xFF	; 255
    1eec:	cf 01       	movw	r24, r30
    1eee:	0e 94 b0 07 	call	0xf60	; 0xf60 <xQueueGenericSendFromISR>
    1ef2:	01 c0       	rjmp	.+2      	; 0x1ef6 <xTimerGenericCommand+0x92>
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	29 96       	adiw	r28, 0x09	; 9
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	1f 91       	pop	r17
    1f02:	0f 91       	pop	r16
    1f04:	ff 90       	pop	r15
    1f06:	ef 90       	pop	r14
    1f08:	df 90       	pop	r13
    1f0a:	cf 90       	pop	r12
    1f0c:	bf 90       	pop	r11
    1f0e:	af 90       	pop	r10
    1f10:	9f 90       	pop	r9
    1f12:	8f 90       	pop	r8
    1f14:	08 95       	ret

00001f16 <prvSwitchTimerLists>:
    1f16:	8f 92       	push	r8
    1f18:	9f 92       	push	r9
    1f1a:	af 92       	push	r10
    1f1c:	bf 92       	push	r11
    1f1e:	cf 92       	push	r12
    1f20:	df 92       	push	r13
    1f22:	ef 92       	push	r14
    1f24:	ff 92       	push	r15
    1f26:	0f 93       	push	r16
    1f28:	1f 93       	push	r17
    1f2a:	cf 93       	push	r28
    1f2c:	df 93       	push	r29
    1f2e:	3c c0       	rjmp	.+120    	; 0x1fa8 <prvSwitchTimerLists+0x92>
    1f30:	07 80       	ldd	r0, Z+7	; 0x07
    1f32:	f0 85       	ldd	r31, Z+8	; 0x08
    1f34:	e0 2d       	mov	r30, r0
    1f36:	80 80       	ld	r8, Z
    1f38:	91 80       	ldd	r9, Z+1	; 0x01
    1f3a:	a2 80       	ldd	r10, Z+2	; 0x02
    1f3c:	b3 80       	ldd	r11, Z+3	; 0x03
    1f3e:	c0 85       	ldd	r28, Z+8	; 0x08
    1f40:	d1 85       	ldd	r29, Z+9	; 0x09
    1f42:	8e 01       	movw	r16, r28
    1f44:	0e 5f       	subi	r16, 0xFE	; 254
    1f46:	1f 4f       	sbci	r17, 0xFF	; 255
    1f48:	c8 01       	movw	r24, r16
    1f4a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <uxListRemove>
    1f4e:	ed 89       	ldd	r30, Y+21	; 0x15
    1f50:	fe 89       	ldd	r31, Y+22	; 0x16
    1f52:	ce 01       	movw	r24, r28
    1f54:	19 95       	eicall
    1f56:	8a 89       	ldd	r24, Y+18	; 0x12
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	31 f5       	brne	.+76     	; 0x1fa8 <prvSwitchTimerLists+0x92>
    1f5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f60:	a8 89       	ldd	r26, Y+16	; 0x10
    1f62:	b9 89       	ldd	r27, Y+17	; 0x11
    1f64:	88 0d       	add	r24, r8
    1f66:	99 1d       	adc	r25, r9
    1f68:	aa 1d       	adc	r26, r10
    1f6a:	bb 1d       	adc	r27, r11
    1f6c:	88 16       	cp	r8, r24
    1f6e:	99 06       	cpc	r9, r25
    1f70:	aa 06       	cpc	r10, r26
    1f72:	bb 06       	cpc	r11, r27
    1f74:	70 f4       	brcc	.+28     	; 0x1f92 <prvSwitchTimerLists+0x7c>
    1f76:	8a 83       	std	Y+2, r24	; 0x02
    1f78:	9b 83       	std	Y+3, r25	; 0x03
    1f7a:	ac 83       	std	Y+4, r26	; 0x04
    1f7c:	bd 83       	std	Y+5, r27	; 0x05
    1f7e:	ca 87       	std	Y+10, r28	; 0x0a
    1f80:	db 87       	std	Y+11, r29	; 0x0b
    1f82:	b8 01       	movw	r22, r16
    1f84:	80 91 a2 2c 	lds	r24, 0x2CA2	; 0x802ca2 <pxCurrentTimerList>
    1f88:	90 91 a3 2c 	lds	r25, 0x2CA3	; 0x802ca3 <pxCurrentTimerList+0x1>
    1f8c:	0e 94 a7 03 	call	0x74e	; 0x74e <vListInsert>
    1f90:	0b c0       	rjmp	.+22     	; 0x1fa8 <prvSwitchTimerLists+0x92>
    1f92:	c1 2c       	mov	r12, r1
    1f94:	d1 2c       	mov	r13, r1
    1f96:	76 01       	movw	r14, r12
    1f98:	00 e0       	ldi	r16, 0x00	; 0
    1f9a:	10 e0       	ldi	r17, 0x00	; 0
    1f9c:	a5 01       	movw	r20, r10
    1f9e:	94 01       	movw	r18, r8
    1fa0:	60 e0       	ldi	r22, 0x00	; 0
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <xTimerGenericCommand>
    1fa8:	e0 91 a2 2c 	lds	r30, 0x2CA2	; 0x802ca2 <pxCurrentTimerList>
    1fac:	f0 91 a3 2c 	lds	r31, 0x2CA3	; 0x802ca3 <pxCurrentTimerList+0x1>
    1fb0:	80 81       	ld	r24, Z
    1fb2:	81 11       	cpse	r24, r1
    1fb4:	bd cf       	rjmp	.-134    	; 0x1f30 <prvSwitchTimerLists+0x1a>
    1fb6:	80 91 a0 2c 	lds	r24, 0x2CA0	; 0x802ca0 <pxOverflowTimerList>
    1fba:	90 91 a1 2c 	lds	r25, 0x2CA1	; 0x802ca1 <pxOverflowTimerList+0x1>
    1fbe:	80 93 a2 2c 	sts	0x2CA2, r24	; 0x802ca2 <pxCurrentTimerList>
    1fc2:	90 93 a3 2c 	sts	0x2CA3, r25	; 0x802ca3 <pxCurrentTimerList+0x1>
    1fc6:	e0 93 a0 2c 	sts	0x2CA0, r30	; 0x802ca0 <pxOverflowTimerList>
    1fca:	f0 93 a1 2c 	sts	0x2CA1, r31	; 0x802ca1 <pxOverflowTimerList+0x1>
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	ff 90       	pop	r15
    1fd8:	ef 90       	pop	r14
    1fda:	df 90       	pop	r13
    1fdc:	cf 90       	pop	r12
    1fde:	bf 90       	pop	r11
    1fe0:	af 90       	pop	r10
    1fe2:	9f 90       	pop	r9
    1fe4:	8f 90       	pop	r8
    1fe6:	08 95       	ret

00001fe8 <prvSampleTimeNow>:
    1fe8:	cf 92       	push	r12
    1fea:	df 92       	push	r13
    1fec:	ef 92       	push	r14
    1fee:	ff 92       	push	r15
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
    1ff4:	ec 01       	movw	r28, r24
    1ff6:	0e 94 0a 0b 	call	0x1614	; 0x1614 <xTaskGetTickCount>
    1ffa:	6b 01       	movw	r12, r22
    1ffc:	7c 01       	movw	r14, r24
    1ffe:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <xLastTime.4745>
    2002:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <xLastTime.4745+0x1>
    2006:	a0 91 9a 2c 	lds	r26, 0x2C9A	; 0x802c9a <xLastTime.4745+0x2>
    200a:	b0 91 9b 2c 	lds	r27, 0x2C9B	; 0x802c9b <xLastTime.4745+0x3>
    200e:	c8 16       	cp	r12, r24
    2010:	d9 06       	cpc	r13, r25
    2012:	ea 06       	cpc	r14, r26
    2014:	fb 06       	cpc	r15, r27
    2016:	28 f4       	brcc	.+10     	; 0x2022 <__DATA_REGION_LENGTH__+0x22>
    2018:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <prvSwitchTimerLists>
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	88 83       	st	Y, r24
    2020:	01 c0       	rjmp	.+2      	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
    2022:	18 82       	st	Y, r1
    2024:	c0 92 98 2c 	sts	0x2C98, r12	; 0x802c98 <xLastTime.4745>
    2028:	d0 92 99 2c 	sts	0x2C99, r13	; 0x802c99 <xLastTime.4745+0x1>
    202c:	e0 92 9a 2c 	sts	0x2C9A, r14	; 0x802c9a <xLastTime.4745+0x2>
    2030:	f0 92 9b 2c 	sts	0x2C9B, r15	; 0x802c9b <xLastTime.4745+0x3>
    2034:	c7 01       	movw	r24, r14
    2036:	b6 01       	movw	r22, r12
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	ff 90       	pop	r15
    203e:	ef 90       	pop	r14
    2040:	df 90       	pop	r13
    2042:	cf 90       	pop	r12
    2044:	08 95       	ret

00002046 <prvProcessExpiredTimer>:
    2046:	4f 92       	push	r4
    2048:	5f 92       	push	r5
    204a:	6f 92       	push	r6
    204c:	7f 92       	push	r7
    204e:	8f 92       	push	r8
    2050:	9f 92       	push	r9
    2052:	af 92       	push	r10
    2054:	bf 92       	push	r11
    2056:	cf 92       	push	r12
    2058:	df 92       	push	r13
    205a:	ef 92       	push	r14
    205c:	ff 92       	push	r15
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	4b 01       	movw	r8, r22
    2068:	5c 01       	movw	r10, r24
    206a:	29 01       	movw	r4, r18
    206c:	3a 01       	movw	r6, r20
    206e:	e0 91 a2 2c 	lds	r30, 0x2CA2	; 0x802ca2 <pxCurrentTimerList>
    2072:	f0 91 a3 2c 	lds	r31, 0x2CA3	; 0x802ca3 <pxCurrentTimerList+0x1>
    2076:	07 80       	ldd	r0, Z+7	; 0x07
    2078:	f0 85       	ldd	r31, Z+8	; 0x08
    207a:	e0 2d       	mov	r30, r0
    207c:	c0 85       	ldd	r28, Z+8	; 0x08
    207e:	d1 85       	ldd	r29, Z+9	; 0x09
    2080:	ce 01       	movw	r24, r28
    2082:	02 96       	adiw	r24, 0x02	; 2
    2084:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <uxListRemove>
    2088:	8a 89       	ldd	r24, Y+18	; 0x12
    208a:	81 30       	cpi	r24, 0x01	; 1
    208c:	e1 f4       	brne	.+56     	; 0x20c6 <prvProcessExpiredTimer+0x80>
    208e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2090:	5f 85       	ldd	r21, Y+15	; 0x0f
    2092:	68 89       	ldd	r22, Y+16	; 0x10
    2094:	79 89       	ldd	r23, Y+17	; 0x11
    2096:	48 0d       	add	r20, r8
    2098:	59 1d       	adc	r21, r9
    209a:	6a 1d       	adc	r22, r10
    209c:	7b 1d       	adc	r23, r11
    209e:	75 01       	movw	r14, r10
    20a0:	64 01       	movw	r12, r8
    20a2:	93 01       	movw	r18, r6
    20a4:	82 01       	movw	r16, r4
    20a6:	ce 01       	movw	r24, r28
    20a8:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvInsertTimerInActiveList>
    20ac:	88 23       	and	r24, r24
    20ae:	59 f0       	breq	.+22     	; 0x20c6 <prvProcessExpiredTimer+0x80>
    20b0:	c1 2c       	mov	r12, r1
    20b2:	d1 2c       	mov	r13, r1
    20b4:	76 01       	movw	r14, r12
    20b6:	00 e0       	ldi	r16, 0x00	; 0
    20b8:	10 e0       	ldi	r17, 0x00	; 0
    20ba:	a5 01       	movw	r20, r10
    20bc:	94 01       	movw	r18, r8
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	ce 01       	movw	r24, r28
    20c2:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <xTimerGenericCommand>
    20c6:	ed 89       	ldd	r30, Y+21	; 0x15
    20c8:	fe 89       	ldd	r31, Y+22	; 0x16
    20ca:	ce 01       	movw	r24, r28
    20cc:	19 95       	eicall
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	1f 91       	pop	r17
    20d4:	0f 91       	pop	r16
    20d6:	ff 90       	pop	r15
    20d8:	ef 90       	pop	r14
    20da:	df 90       	pop	r13
    20dc:	cf 90       	pop	r12
    20de:	bf 90       	pop	r11
    20e0:	af 90       	pop	r10
    20e2:	9f 90       	pop	r9
    20e4:	8f 90       	pop	r8
    20e6:	7f 90       	pop	r7
    20e8:	6f 90       	pop	r6
    20ea:	5f 90       	pop	r5
    20ec:	4f 90       	pop	r4
    20ee:	08 95       	ret

000020f0 <prvProcessTimerOrBlockTask>:
    20f0:	8f 92       	push	r8
    20f2:	9f 92       	push	r9
    20f4:	af 92       	push	r10
    20f6:	bf 92       	push	r11
    20f8:	cf 92       	push	r12
    20fa:	df 92       	push	r13
    20fc:	ef 92       	push	r14
    20fe:	ff 92       	push	r15
    2100:	1f 93       	push	r17
    2102:	cf 93       	push	r28
    2104:	df 93       	push	r29
    2106:	1f 92       	push	r1
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	6b 01       	movw	r12, r22
    210e:	7c 01       	movw	r14, r24
    2110:	14 2f       	mov	r17, r20
    2112:	0e 94 04 0b 	call	0x1608	; 0x1608 <vTaskSuspendAll>
    2116:	ce 01       	movw	r24, r28
    2118:	01 96       	adiw	r24, 0x01	; 1
    211a:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <prvSampleTimeNow>
    211e:	4b 01       	movw	r8, r22
    2120:	5c 01       	movw	r10, r24
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	81 11       	cpse	r24, r1
    2126:	2e c0       	rjmp	.+92     	; 0x2184 <prvProcessTimerOrBlockTask+0x94>
    2128:	11 11       	cpse	r17, r1
    212a:	0e c0       	rjmp	.+28     	; 0x2148 <prvProcessTimerOrBlockTask+0x58>
    212c:	8c 14       	cp	r8, r12
    212e:	9d 04       	cpc	r9, r13
    2130:	ae 04       	cpc	r10, r14
    2132:	bf 04       	cpc	r11, r15
    2134:	48 f0       	brcs	.+18     	; 0x2148 <prvProcessTimerOrBlockTask+0x58>
    2136:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskResumeAll>
    213a:	a5 01       	movw	r20, r10
    213c:	94 01       	movw	r18, r8
    213e:	c7 01       	movw	r24, r14
    2140:	b6 01       	movw	r22, r12
    2142:	0e 94 23 10 	call	0x2046	; 0x2046 <prvProcessExpiredTimer>
    2146:	20 c0       	rjmp	.+64     	; 0x2188 <prvProcessTimerOrBlockTask+0x98>
    2148:	11 23       	and	r17, r17
    214a:	41 f0       	breq	.+16     	; 0x215c <prvProcessTimerOrBlockTask+0x6c>
    214c:	e0 91 a0 2c 	lds	r30, 0x2CA0	; 0x802ca0 <pxOverflowTimerList>
    2150:	f0 91 a1 2c 	lds	r31, 0x2CA1	; 0x802ca1 <pxOverflowTimerList+0x1>
    2154:	80 81       	ld	r24, Z
    2156:	11 e0       	ldi	r17, 0x01	; 1
    2158:	81 11       	cpse	r24, r1
    215a:	10 e0       	ldi	r17, 0x00	; 0
    215c:	b7 01       	movw	r22, r14
    215e:	a6 01       	movw	r20, r12
    2160:	48 19       	sub	r20, r8
    2162:	59 09       	sbc	r21, r9
    2164:	6a 09       	sbc	r22, r10
    2166:	7b 09       	sbc	r23, r11
    2168:	21 2f       	mov	r18, r17
    216a:	80 91 9e 2c 	lds	r24, 0x2C9E	; 0x802c9e <xTimerQueue>
    216e:	90 91 9f 2c 	lds	r25, 0x2C9F	; 0x802c9f <xTimerQueue+0x1>
    2172:	0e 94 a0 08 	call	0x1140	; 0x1140 <vQueueWaitForMessageRestricted>
    2176:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskResumeAll>
    217a:	81 11       	cpse	r24, r1
    217c:	05 c0       	rjmp	.+10     	; 0x2188 <prvProcessTimerOrBlockTask+0x98>
    217e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vPortYield>
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <prvProcessTimerOrBlockTask+0x98>
    2184:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskResumeAll>
    2188:	0f 90       	pop	r0
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	1f 91       	pop	r17
    2190:	ff 90       	pop	r15
    2192:	ef 90       	pop	r14
    2194:	df 90       	pop	r13
    2196:	cf 90       	pop	r12
    2198:	bf 90       	pop	r11
    219a:	af 90       	pop	r10
    219c:	9f 90       	pop	r9
    219e:	8f 90       	pop	r8
    21a0:	08 95       	ret

000021a2 <prvProcessReceivedCommands>:
    21a2:	af 92       	push	r10
    21a4:	bf 92       	push	r11
    21a6:	cf 92       	push	r12
    21a8:	df 92       	push	r13
    21aa:	ef 92       	push	r14
    21ac:	ff 92       	push	r15
    21ae:	0f 93       	push	r16
    21b0:	1f 93       	push	r17
    21b2:	cf 93       	push	r28
    21b4:	df 93       	push	r29
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	2a 97       	sbiw	r28, 0x0a	; 10
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	81 c0       	rjmp	.+258    	; 0x22c4 <prvProcessReceivedCommands+0x122>
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	88 23       	and	r24, r24
    21c6:	4c f4       	brge	.+18     	; 0x21da <prvProcessReceivedCommands+0x38>
    21c8:	ea 81       	ldd	r30, Y+2	; 0x02
    21ca:	fb 81       	ldd	r31, Y+3	; 0x03
    21cc:	4e 81       	ldd	r20, Y+6	; 0x06
    21ce:	5f 81       	ldd	r21, Y+7	; 0x07
    21d0:	68 85       	ldd	r22, Y+8	; 0x08
    21d2:	79 85       	ldd	r23, Y+9	; 0x09
    21d4:	8c 81       	ldd	r24, Y+4	; 0x04
    21d6:	9d 81       	ldd	r25, Y+5	; 0x05
    21d8:	19 95       	eicall
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	88 23       	and	r24, r24
    21de:	0c f4       	brge	.+2      	; 0x21e2 <prvProcessReceivedCommands+0x40>
    21e0:	71 c0       	rjmp	.+226    	; 0x22c4 <prvProcessReceivedCommands+0x122>
    21e2:	ae 80       	ldd	r10, Y+6	; 0x06
    21e4:	bf 80       	ldd	r11, Y+7	; 0x07
    21e6:	d5 01       	movw	r26, r10
    21e8:	1c 96       	adiw	r26, 0x0c	; 12
    21ea:	8d 91       	ld	r24, X+
    21ec:	9c 91       	ld	r25, X
    21ee:	1d 97       	sbiw	r26, 0x0d	; 13
    21f0:	89 2b       	or	r24, r25
    21f2:	21 f0       	breq	.+8      	; 0x21fc <prvProcessReceivedCommands+0x5a>
    21f4:	c5 01       	movw	r24, r10
    21f6:	02 96       	adiw	r24, 0x02	; 2
    21f8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <uxListRemove>
    21fc:	ce 01       	movw	r24, r28
    21fe:	0a 96       	adiw	r24, 0x0a	; 10
    2200:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <prvSampleTimeNow>
    2204:	8b 01       	movw	r16, r22
    2206:	9c 01       	movw	r18, r24
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	08 2e       	mov	r0, r24
    220c:	00 0c       	add	r0, r0
    220e:	99 0b       	sbc	r25, r25
    2210:	aa 0b       	sbc	r26, r26
    2212:	bb 0b       	sbc	r27, r27
    2214:	8a 30       	cpi	r24, 0x0A	; 10
    2216:	91 05       	cpc	r25, r1
    2218:	08 f0       	brcs	.+2      	; 0x221c <prvProcessReceivedCommands+0x7a>
    221a:	54 c0       	rjmp	.+168    	; 0x22c4 <prvProcessReceivedCommands+0x122>
    221c:	fc 01       	movw	r30, r24
    221e:	88 27       	eor	r24, r24
    2220:	e2 50       	subi	r30, 0x02	; 2
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	8f 4f       	sbci	r24, 0xFF	; 255
    2226:	0c 94 af 1c 	jmp	0x395e	; 0x395e <__tablejump2__>
    222a:	ca 80       	ldd	r12, Y+2	; 0x02
    222c:	db 80       	ldd	r13, Y+3	; 0x03
    222e:	ec 80       	ldd	r14, Y+4	; 0x04
    2230:	fd 80       	ldd	r15, Y+5	; 0x05
    2232:	f5 01       	movw	r30, r10
    2234:	46 85       	ldd	r20, Z+14	; 0x0e
    2236:	57 85       	ldd	r21, Z+15	; 0x0f
    2238:	60 89       	ldd	r22, Z+16	; 0x10
    223a:	71 89       	ldd	r23, Z+17	; 0x11
    223c:	4c 0d       	add	r20, r12
    223e:	5d 1d       	adc	r21, r13
    2240:	6e 1d       	adc	r22, r14
    2242:	7f 1d       	adc	r23, r15
    2244:	c5 01       	movw	r24, r10
    2246:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvInsertTimerInActiveList>
    224a:	88 23       	and	r24, r24
    224c:	d9 f1       	breq	.+118    	; 0x22c4 <prvProcessReceivedCommands+0x122>
    224e:	d5 01       	movw	r26, r10
    2250:	55 96       	adiw	r26, 0x15	; 21
    2252:	ed 91       	ld	r30, X+
    2254:	fc 91       	ld	r31, X
    2256:	56 97       	sbiw	r26, 0x16	; 22
    2258:	c5 01       	movw	r24, r10
    225a:	19 95       	eicall
    225c:	f5 01       	movw	r30, r10
    225e:	82 89       	ldd	r24, Z+18	; 0x12
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	81 f5       	brne	.+96     	; 0x22c4 <prvProcessReceivedCommands+0x122>
    2264:	4a 81       	ldd	r20, Y+2	; 0x02
    2266:	5b 81       	ldd	r21, Y+3	; 0x03
    2268:	6c 81       	ldd	r22, Y+4	; 0x04
    226a:	7d 81       	ldd	r23, Y+5	; 0x05
    226c:	86 85       	ldd	r24, Z+14	; 0x0e
    226e:	97 85       	ldd	r25, Z+15	; 0x0f
    2270:	a0 89       	ldd	r26, Z+16	; 0x10
    2272:	b1 89       	ldd	r27, Z+17	; 0x11
    2274:	9a 01       	movw	r18, r20
    2276:	ab 01       	movw	r20, r22
    2278:	28 0f       	add	r18, r24
    227a:	39 1f       	adc	r19, r25
    227c:	4a 1f       	adc	r20, r26
    227e:	5b 1f       	adc	r21, r27
    2280:	c1 2c       	mov	r12, r1
    2282:	d1 2c       	mov	r13, r1
    2284:	76 01       	movw	r14, r12
    2286:	00 e0       	ldi	r16, 0x00	; 0
    2288:	10 e0       	ldi	r17, 0x00	; 0
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	c5 01       	movw	r24, r10
    228e:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <xTimerGenericCommand>
    2292:	18 c0       	rjmp	.+48     	; 0x22c4 <prvProcessReceivedCommands+0x122>
    2294:	4a 81       	ldd	r20, Y+2	; 0x02
    2296:	5b 81       	ldd	r21, Y+3	; 0x03
    2298:	6c 81       	ldd	r22, Y+4	; 0x04
    229a:	7d 81       	ldd	r23, Y+5	; 0x05
    229c:	d5 01       	movw	r26, r10
    229e:	1e 96       	adiw	r26, 0x0e	; 14
    22a0:	4d 93       	st	X+, r20
    22a2:	5d 93       	st	X+, r21
    22a4:	6d 93       	st	X+, r22
    22a6:	7c 93       	st	X, r23
    22a8:	51 97       	sbiw	r26, 0x11	; 17
    22aa:	40 0f       	add	r20, r16
    22ac:	51 1f       	adc	r21, r17
    22ae:	62 1f       	adc	r22, r18
    22b0:	73 1f       	adc	r23, r19
    22b2:	68 01       	movw	r12, r16
    22b4:	79 01       	movw	r14, r18
    22b6:	c5 01       	movw	r24, r10
    22b8:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvInsertTimerInActiveList>
    22bc:	03 c0       	rjmp	.+6      	; 0x22c4 <prvProcessReceivedCommands+0x122>
    22be:	c5 01       	movw	r24, r10
    22c0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vPortFree>
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	a9 01       	movw	r20, r18
    22ca:	be 01       	movw	r22, r28
    22cc:	6f 5f       	subi	r22, 0xFF	; 255
    22ce:	7f 4f       	sbci	r23, 0xFF	; 255
    22d0:	80 91 9e 2c 	lds	r24, 0x2C9E	; 0x802c9e <xTimerQueue>
    22d4:	90 91 9f 2c 	lds	r25, 0x2C9F	; 0x802c9f <xTimerQueue+0x1>
    22d8:	0e 94 f5 07 	call	0xfea	; 0xfea <xQueueReceive>
    22dc:	81 11       	cpse	r24, r1
    22de:	71 cf       	rjmp	.-286    	; 0x21c2 <prvProcessReceivedCommands+0x20>
    22e0:	2a 96       	adiw	r28, 0x0a	; 10
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	ff 90       	pop	r15
    22f0:	ef 90       	pop	r14
    22f2:	df 90       	pop	r13
    22f4:	cf 90       	pop	r12
    22f6:	bf 90       	pop	r11
    22f8:	af 90       	pop	r10
    22fa:	08 95       	ret

000022fc <prvTimerTask>:
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	1f 92       	push	r1
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	ce 01       	movw	r24, r28
    2308:	01 96       	adiw	r24, 0x01	; 1
    230a:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <prvGetNextExpireTime>
    230e:	49 81       	ldd	r20, Y+1	; 0x01
    2310:	0e 94 78 10 	call	0x20f0	; 0x20f0 <prvProcessTimerOrBlockTask>
    2314:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <prvProcessReceivedCommands>
    2318:	f6 cf       	rjmp	.-20     	; 0x2306 <prvTimerTask+0xa>

0000231a <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    231a:	0f 93       	push	r16
    231c:	1f 93       	push	r17
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	29 97       	sbiw	r28, 0x09	; 9
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    232c:	ee ef       	ldi	r30, 0xFE	; 254
    232e:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    2330:	8a 83       	std	Y+2, r24	; 0x02
    2332:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    2334:	6c 83       	std	Y+4, r22	; 0x04
    2336:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    2338:	2e 83       	std	Y+6, r18	; 0x06
    233a:	3f 83       	std	Y+7, r19	; 0x07
    233c:	48 87       	std	Y+8, r20	; 0x08
    233e:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	a8 01       	movw	r20, r16
    2344:	be 01       	movw	r22, r28
    2346:	6f 5f       	subi	r22, 0xFF	; 255
    2348:	7f 4f       	sbci	r23, 0xFF	; 255
    234a:	80 91 9e 2c 	lds	r24, 0x2C9E	; 0x802c9e <xTimerQueue>
    234e:	90 91 9f 2c 	lds	r25, 0x2C9F	; 0x802c9f <xTimerQueue+0x1>
    2352:	0e 94 b0 07 	call	0xf60	; 0xf60 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    2356:	29 96       	adiw	r28, 0x09	; 9
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	08 95       	ret

00002366 <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    2366:	e0 e5       	ldi	r30, 0x50	; 80
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	81 60       	ori	r24, 0x01	; 1
    236e:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    2370:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    2374:	80 ff       	sbrs	r24, 0
    2376:	fc cf       	rjmp	.-8      	; 0x2370 <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    237e:	8e e1       	ldi	r24, 0x1E	; 30
    2380:	0e 94 69 01 	call	0x2d2	; 0x2d2 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    238c:	43 e0       	ldi	r20, 0x03	; 3
    238e:	60 e0       	ldi	r22, 0x00	; 0
    2390:	80 e4       	ldi	r24, 0x40	; 64
    2392:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    2396:	e0 e5       	ldi	r30, 0x50	; 80
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	88 60       	ori	r24, 0x08	; 8
    239e:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    23a0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    23a4:	83 ff       	sbrs	r24, 3
    23a6:	fc cf       	rjmp	.-8      	; 0x23a0 <vInitClock+0x3a>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    23a8:	64 e0       	ldi	r22, 0x04	; 4
    23aa:	80 ec       	ldi	r24, 0xC0	; 192
    23ac:	0e 94 64 01 	call	0x2c8	; 0x2c8 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    23b0:	e0 e5       	ldi	r30, 0x50	; 80
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	80 61       	ori	r24, 0x10	; 16
    23b8:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    23ba:	60 e0       	ldi	r22, 0x00	; 0
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    23c2:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    23c6:	84 ff       	sbrs	r24, 4
    23c8:	fc cf       	rjmp	.-8      	; 0x23c2 <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    23ca:	84 e0       	ldi	r24, 0x04	; 4
    23cc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    23d0:	87 e0       	ldi	r24, 0x07	; 7
    23d2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <CLKSYS_Disable>
    23d6:	08 95       	ret

000023d8 <LSM9DS1Init>:
            return gy;
        case Z_AXIS:
            return gz;
    }
    return 0;
}
    23d8:	0e 94 19 1a 	call	0x3432	; 0x3432 <initI2C>
    23dc:	08 95       	ret

000023de <readACCData>:
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	00 d0       	rcall	.+0      	; 0x23e4 <readACCData+0x6>
    23e4:	00 d0       	rcall	.+0      	; 0x23e6 <readACCData+0x8>
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	9e 01       	movw	r18, r28
    23ec:	2f 5f       	subi	r18, 0xFF	; 255
    23ee:	3f 4f       	sbci	r19, 0xFF	; 255
    23f0:	46 e0       	ldi	r20, 0x06	; 6
    23f2:	68 e2       	ldi	r22, 0x28	; 40
    23f4:	84 ed       	ldi	r24, 0xD4	; 212
    23f6:	0e 94 2c 1a 	call	0x3458	; 0x3458 <i2cRead>
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	98 2f       	mov	r25, r24
    2400:	88 27       	eor	r24, r24
    2402:	29 81       	ldd	r18, Y+1	; 0x01
    2404:	82 2b       	or	r24, r18
    2406:	80 93 c8 2c 	sts	0x2CC8, r24	; 0x802cc8 <ax>
    240a:	90 93 c9 2c 	sts	0x2CC9, r25	; 0x802cc9 <ax+0x1>
    240e:	8c 81       	ldd	r24, Y+4	; 0x04
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	98 2f       	mov	r25, r24
    2414:	88 27       	eor	r24, r24
    2416:	2b 81       	ldd	r18, Y+3	; 0x03
    2418:	82 2b       	or	r24, r18
    241a:	80 93 c6 2c 	sts	0x2CC6, r24	; 0x802cc6 <ay>
    241e:	90 93 c7 2c 	sts	0x2CC7, r25	; 0x802cc7 <ay+0x1>
    2422:	8e 81       	ldd	r24, Y+6	; 0x06
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	98 2f       	mov	r25, r24
    2428:	88 27       	eor	r24, r24
    242a:	2d 81       	ldd	r18, Y+5	; 0x05
    242c:	82 2b       	or	r24, r18
    242e:	80 93 c4 2c 	sts	0x2CC4, r24	; 0x802cc4 <az>
    2432:	90 93 c5 2c 	sts	0x2CC5, r25	; 0x802cc5 <az+0x1>
    2436:	26 96       	adiw	r28, 0x06	; 6
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	08 95       	ret

00002442 <readMagData>:
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	00 d0       	rcall	.+0      	; 0x2448 <readMagData+0x6>
    2448:	00 d0       	rcall	.+0      	; 0x244a <readMagData+0x8>
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	9e 01       	movw	r18, r28
    2450:	2f 5f       	subi	r18, 0xFF	; 255
    2452:	3f 4f       	sbci	r19, 0xFF	; 255
    2454:	46 e0       	ldi	r20, 0x06	; 6
    2456:	68 e2       	ldi	r22, 0x28	; 40
    2458:	88 e3       	ldi	r24, 0x38	; 56
    245a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <i2cRead>
    245e:	8a 81       	ldd	r24, Y+2	; 0x02
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	98 2f       	mov	r25, r24
    2464:	88 27       	eor	r24, r24
    2466:	29 81       	ldd	r18, Y+1	; 0x01
    2468:	82 2b       	or	r24, r18
    246a:	80 93 c2 2c 	sts	0x2CC2, r24	; 0x802cc2 <mx>
    246e:	90 93 c3 2c 	sts	0x2CC3, r25	; 0x802cc3 <mx+0x1>
    2472:	8c 81       	ldd	r24, Y+4	; 0x04
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	98 2f       	mov	r25, r24
    2478:	88 27       	eor	r24, r24
    247a:	2b 81       	ldd	r18, Y+3	; 0x03
    247c:	82 2b       	or	r24, r18
    247e:	80 93 c0 2c 	sts	0x2CC0, r24	; 0x802cc0 <my>
    2482:	90 93 c1 2c 	sts	0x2CC1, r25	; 0x802cc1 <my+0x1>
    2486:	8e 81       	ldd	r24, Y+6	; 0x06
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	98 2f       	mov	r25, r24
    248c:	88 27       	eor	r24, r24
    248e:	2d 81       	ldd	r18, Y+5	; 0x05
    2490:	82 2b       	or	r24, r18
    2492:	80 93 be 2c 	sts	0x2CBE, r24	; 0x802cbe <mz>
    2496:	90 93 bf 2c 	sts	0x2CBF, r25	; 0x802cbf <mz+0x1>
    249a:	26 96       	adiw	r28, 0x06	; 6
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	08 95       	ret

000024a6 <readTempData>:
    24a6:	cf 92       	push	r12
    24a8:	df 92       	push	r13
    24aa:	ef 92       	push	r14
    24ac:	ff 92       	push	r15
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	1f 92       	push	r1
    24b8:	1f 92       	push	r1
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	9e 01       	movw	r18, r28
    24c0:	2f 5f       	subi	r18, 0xFF	; 255
    24c2:	3f 4f       	sbci	r19, 0xFF	; 255
    24c4:	42 e0       	ldi	r20, 0x02	; 2
    24c6:	65 e1       	ldi	r22, 0x15	; 21
    24c8:	84 ed       	ldi	r24, 0xD4	; 212
    24ca:	0e 94 2c 1a 	call	0x3458	; 0x3458 <i2cRead>
    24ce:	6a 81       	ldd	r22, Y+2	; 0x02
    24d0:	70 e0       	ldi	r23, 0x00	; 0
    24d2:	76 2f       	mov	r23, r22
    24d4:	66 27       	eor	r22, r22
    24d6:	72 95       	swap	r23
    24d8:	70 7f       	andi	r23, 0xF0	; 240
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	20 e1       	ldi	r18, 0x10	; 16
    24de:	82 9f       	mul	r24, r18
    24e0:	c0 01       	movw	r24, r0
    24e2:	11 24       	eor	r1, r1
    24e4:	68 2b       	or	r22, r24
    24e6:	79 2b       	or	r23, r25
    24e8:	8b 01       	movw	r16, r22
    24ea:	15 95       	asr	r17
    24ec:	07 95       	ror	r16
    24ee:	15 95       	asr	r17
    24f0:	07 95       	ror	r16
    24f2:	15 95       	asr	r17
    24f4:	07 95       	ror	r16
    24f6:	15 95       	asr	r17
    24f8:	07 95       	ror	r16
    24fa:	26 e6       	ldi	r18, 0x66	; 102
    24fc:	36 e6       	ldi	r19, 0x66	; 102
    24fe:	46 e6       	ldi	r20, 0x66	; 102
    2500:	5f e3       	ldi	r21, 0x3F	; 63
    2502:	60 91 ba 2c 	lds	r22, 0x2CBA	; 0x802cba <temperature>
    2506:	70 91 bb 2c 	lds	r23, 0x2CBB	; 0x802cbb <temperature+0x1>
    250a:	80 91 bc 2c 	lds	r24, 0x2CBC	; 0x802cbc <temperature+0x2>
    250e:	90 91 bd 2c 	lds	r25, 0x2CBD	; 0x802cbd <temperature+0x3>
    2512:	0e 94 42 1c 	call	0x3884	; 0x3884 <__mulsf3>
    2516:	6b 01       	movw	r12, r22
    2518:	7c 01       	movw	r14, r24
    251a:	b8 01       	movw	r22, r16
    251c:	11 0f       	add	r17, r17
    251e:	88 0b       	sbc	r24, r24
    2520:	99 0b       	sbc	r25, r25
    2522:	0e 94 8d 1b 	call	0x371a	; 0x371a <__floatsisf>
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	40 e8       	ldi	r20, 0x80	; 128
    252c:	5d e3       	ldi	r21, 0x3D	; 61
    252e:	0e 94 42 1c 	call	0x3884	; 0x3884 <__mulsf3>
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	48 ec       	ldi	r20, 0xC8	; 200
    2538:	51 e4       	ldi	r21, 0x41	; 65
    253a:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__addsf3>
    253e:	9b 01       	movw	r18, r22
    2540:	ac 01       	movw	r20, r24
    2542:	c7 01       	movw	r24, r14
    2544:	b6 01       	movw	r22, r12
    2546:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__addsf3>
    254a:	60 93 ba 2c 	sts	0x2CBA, r22	; 0x802cba <temperature>
    254e:	70 93 bb 2c 	sts	0x2CBB, r23	; 0x802cbb <temperature+0x1>
    2552:	80 93 bc 2c 	sts	0x2CBC, r24	; 0x802cbc <temperature+0x2>
    2556:	90 93 bd 2c 	sts	0x2CBD, r25	; 0x802cbd <temperature+0x3>
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	df 91       	pop	r29
    2560:	cf 91       	pop	r28
    2562:	1f 91       	pop	r17
    2564:	0f 91       	pop	r16
    2566:	ff 90       	pop	r15
    2568:	ef 90       	pop	r14
    256a:	df 90       	pop	r13
    256c:	cf 90       	pop	r12
    256e:	08 95       	ret

00002570 <getACCData>:

int16_t getACCData(int axis) {
    switch(axis) {
    2570:	81 30       	cpi	r24, 0x01	; 1
    2572:	91 05       	cpc	r25, r1
    2574:	51 f0       	breq	.+20     	; 0x258a <getACCData+0x1a>
    2576:	82 30       	cpi	r24, 0x02	; 2
    2578:	91 05       	cpc	r25, r1
    257a:	61 f0       	breq	.+24     	; 0x2594 <getACCData+0x24>
    257c:	89 2b       	or	r24, r25
    257e:	79 f4       	brne	.+30     	; 0x259e <getACCData+0x2e>
        case X_AXIS:
            return ax;
    2580:	80 91 c8 2c 	lds	r24, 0x2CC8	; 0x802cc8 <ax>
    2584:	90 91 c9 2c 	lds	r25, 0x2CC9	; 0x802cc9 <ax+0x1>
    2588:	08 95       	ret
        case Y_AXIS:
            return ay;
    258a:	80 91 c6 2c 	lds	r24, 0x2CC6	; 0x802cc6 <ay>
    258e:	90 91 c7 2c 	lds	r25, 0x2CC7	; 0x802cc7 <ay+0x1>
    2592:	08 95       	ret
        case Z_AXIS:
            return az;
    2594:	80 91 c4 2c 	lds	r24, 0x2CC4	; 0x802cc4 <az>
    2598:	90 91 c5 2c 	lds	r25, 0x2CC5	; 0x802cc5 <az+0x1>
    259c:	08 95       	ret
    }
    return 0;
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	90 e0       	ldi	r25, 0x00	; 0
}
    25a2:	08 95       	ret

000025a4 <getMagData>:

int16_t getMagData(int axis) {
    switch(axis) {
    25a4:	81 30       	cpi	r24, 0x01	; 1
    25a6:	91 05       	cpc	r25, r1
    25a8:	51 f0       	breq	.+20     	; 0x25be <getMagData+0x1a>
    25aa:	82 30       	cpi	r24, 0x02	; 2
    25ac:	91 05       	cpc	r25, r1
    25ae:	61 f0       	breq	.+24     	; 0x25c8 <getMagData+0x24>
    25b0:	89 2b       	or	r24, r25
    25b2:	79 f4       	brne	.+30     	; 0x25d2 <getMagData+0x2e>
        case X_AXIS: 
            return mx;
    25b4:	80 91 c2 2c 	lds	r24, 0x2CC2	; 0x802cc2 <mx>
    25b8:	90 91 c3 2c 	lds	r25, 0x2CC3	; 0x802cc3 <mx+0x1>
    25bc:	08 95       	ret
        case Y_AXIS:
            return my;
    25be:	80 91 c0 2c 	lds	r24, 0x2CC0	; 0x802cc0 <my>
    25c2:	90 91 c1 2c 	lds	r25, 0x2CC1	; 0x802cc1 <my+0x1>
    25c6:	08 95       	ret
        case Z_AXIS: 
            return mz;
    25c8:	80 91 be 2c 	lds	r24, 0x2CBE	; 0x802cbe <mz>
    25cc:	90 91 bf 2c 	lds	r25, 0x2CBF	; 0x802cbf <mz+0x1>
    25d0:	08 95       	ret
    }
    return 0;
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
}
    25d6:	08 95       	ret

000025d8 <getTemperatureData>:

float getTemperatureData() {
    return temperature / 10;
    25d8:	60 91 ba 2c 	lds	r22, 0x2CBA	; 0x802cba <temperature>
    25dc:	70 91 bb 2c 	lds	r23, 0x2CBB	; 0x802cbb <temperature+0x1>
    25e0:	80 91 bc 2c 	lds	r24, 0x2CBC	; 0x802cbc <temperature+0x2>
    25e4:	90 91 bd 2c 	lds	r25, 0x2CBD	; 0x802cbd <temperature+0x3>
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	40 e2       	ldi	r20, 0x20	; 32
    25ee:	51 e4       	ldi	r21, 0x41	; 65
    25f0:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <__divsf3>
    25f4:	08 95       	ret

000025f6 <vSensorDataDisplay>:
	int16_t mx, my, mz; // Variables for magnetometer data

	for (;;)
	{
		// Read temperature data
		readTempData();
    25f6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <readTempData>
		float temperature = getTemperatureData(); // Fetch temperature from LSM9DS1 sensor
    25fa:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <getTemperatureData>
    25fe:	76 2e       	mov	r7, r22
    2600:	67 2e       	mov	r6, r23
    2602:	58 2e       	mov	r5, r24
    2604:	49 2e       	mov	r4, r25

		// Read acceleration data
		readACCData();
    2606:	0e 94 ef 11 	call	0x23de	; 0x23de <readACCData>
		ax = getACCData(X_AXIS); // Fetch X-axis acceleration
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	0e 94 b8 12 	call	0x2570	; 0x2570 <getACCData>
    2612:	b8 2e       	mov	r11, r24
    2614:	a9 2e       	mov	r10, r25
		ay = getACCData(Y_AXIS); // Fetch Y-axis acceleration
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	0e 94 b8 12 	call	0x2570	; 0x2570 <getACCData>
    261e:	f8 2e       	mov	r15, r24
    2620:	e9 2e       	mov	r14, r25
		az = getACCData(Z_AXIS); // Fetch Z-axis acceleration
    2622:	82 e0       	ldi	r24, 0x02	; 2
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	0e 94 b8 12 	call	0x2570	; 0x2570 <getACCData>
    262a:	c8 2f       	mov	r28, r24
    262c:	d9 2f       	mov	r29, r25

		// Read magnetometer data
		readMagData();
    262e:	0e 94 21 12 	call	0x2442	; 0x2442 <readMagData>
		mx = getMagData(X_AXIS); // Fetch X-axis magnetometer data
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <getMagData>
    263a:	98 2e       	mov	r9, r24
    263c:	89 2e       	mov	r8, r25
		my = getMagData(Y_AXIS); // Fetch Y-axis magnetometer data
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <getMagData>
    2646:	d8 2e       	mov	r13, r24
    2648:	c9 2e       	mov	r12, r25
		mz = getMagData(Z_AXIS); // Fetch Z-axis magnetometer data
    264a:	82 e0       	ldi	r24, 0x02	; 2
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <getMagData>
    2652:	18 2f       	mov	r17, r24
    2654:	09 2f       	mov	r16, r25

		// Clear the display and show the data
		vDisplayClear();
    2656:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <vDisplayClear>
		vDisplayWriteStringAtPos(0,0,"Temp: %f C", temperature);
    265a:	4f 92       	push	r4
    265c:	5f 92       	push	r5
    265e:	6f 92       	push	r6
    2660:	7f 92       	push	r7
    2662:	8d e0       	ldi	r24, 0x0D	; 13
    2664:	90 e2       	ldi	r25, 0x20	; 32
    2666:	9f 93       	push	r25
    2668:	8f 93       	push	r24
    266a:	1f 92       	push	r1
    266c:	1f 92       	push	r1
    266e:	1f 92       	push	r1
    2670:	1f 92       	push	r1
    2672:	0e 94 fd 19 	call	0x33fa	; 0x33fa <vDisplayWriteStringAtPos>
		vDisplayWriteStringAtPos(1,0,"Acc/Mag X: %d / %d", ax, mx);
    2676:	8f 92       	push	r8
    2678:	9f 92       	push	r9
    267a:	af 92       	push	r10
    267c:	bf 92       	push	r11
    267e:	88 e1       	ldi	r24, 0x18	; 24
    2680:	90 e2       	ldi	r25, 0x20	; 32
    2682:	9f 93       	push	r25
    2684:	8f 93       	push	r24
    2686:	1f 92       	push	r1
    2688:	1f 92       	push	r1
    268a:	1f 92       	push	r1
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	8f 93       	push	r24
    2690:	0e 94 fd 19 	call	0x33fa	; 0x33fa <vDisplayWriteStringAtPos>
		vDisplayWriteStringAtPos(2,0,"Acc/Mag Y: %d / %d", ay, my);
    2694:	cf 92       	push	r12
    2696:	df 92       	push	r13
    2698:	ef 92       	push	r14
    269a:	ff 92       	push	r15
    269c:	8b e2       	ldi	r24, 0x2B	; 43
    269e:	90 e2       	ldi	r25, 0x20	; 32
    26a0:	9f 93       	push	r25
    26a2:	8f 93       	push	r24
    26a4:	1f 92       	push	r1
    26a6:	1f 92       	push	r1
    26a8:	1f 92       	push	r1
    26aa:	82 e0       	ldi	r24, 0x02	; 2
    26ac:	8f 93       	push	r24
    26ae:	0e 94 fd 19 	call	0x33fa	; 0x33fa <vDisplayWriteStringAtPos>
		vDisplayWriteStringAtPos(3,0,"Acc/Mag Z: %d / %d", az, mz);
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	8e e3       	ldi	r24, 0x3E	; 62
    26bc:	90 e2       	ldi	r25, 0x20	; 32
    26be:	9f 93       	push	r25
    26c0:	8f 93       	push	r24
    26c2:	1f 92       	push	r1
    26c4:	1f 92       	push	r1
    26c6:	1f 92       	push	r1
    26c8:	83 e0       	ldi	r24, 0x03	; 3
    26ca:	8f 93       	push	r24
    26cc:	0e 94 fd 19 	call	0x33fa	; 0x33fa <vDisplayWriteStringAtPos>

		// Wait for 1 second before updating again
		vTaskDelay(1000 / portTICK_RATE_MS);
    26d0:	8d b7       	in	r24, 0x3d	; 61
    26d2:	9e b7       	in	r25, 0x3e	; 62
    26d4:	88 96       	adiw	r24, 0x28	; 40
    26d6:	8d bf       	out	0x3d, r24	; 61
    26d8:	9e bf       	out	0x3e, r25	; 62
    26da:	68 ee       	ldi	r22, 0xE8	; 232
    26dc:	73 e0       	ldi	r23, 0x03	; 3
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <vTaskDelay>
    26e6:	87 cf       	rjmp	.-242    	; 0x25f6 <vSensorDataDisplay>

000026e8 <vApplicationIdleHook>:
void vSensorDataDisplay(void *pvParameters);

TaskHandle_t sensorDataTask;

void vApplicationIdleHook(void)
{
    26e8:	08 95       	ret

000026ea <main>:
	// Idle hook function body can be added here if needed
}

int main(void)
{
    26ea:	ef 92       	push	r14
    26ec:	ff 92       	push	r15
    26ee:	0f 93       	push	r16
	vInitClock(); // Initialize the clock system
    26f0:	0e 94 b3 11 	call	0x2366	; 0x2366 <vInitClock>
	vInitDisplay(); // Initialize the display
    26f4:	0e 94 66 18 	call	0x30cc	; 0x30cc <vInitDisplay>
	LSM9DS1Init(); // Initialize LSM9DS1 sensor
    26f8:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <LSM9DS1Init>

	// Create the sensor data display task
	xTaskCreate(vSensorDataDisplay,
    26fc:	0f 2e       	mov	r0, r31
    26fe:	f3 ef       	ldi	r31, 0xF3	; 243
    2700:	ef 2e       	mov	r14, r31
    2702:	fc e2       	ldi	r31, 0x2C	; 44
    2704:	ff 2e       	mov	r15, r31
    2706:	f0 2d       	mov	r31, r0
    2708:	01 e0       	ldi	r16, 0x01	; 1
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	42 ed       	ldi	r20, 0xD2	; 210
    2710:	50 e0       	ldi	r21, 0x00	; 0
    2712:	61 e5       	ldi	r22, 0x51	; 81
    2714:	70 e2       	ldi	r23, 0x20	; 32
    2716:	8b ef       	ldi	r24, 0xFB	; 251
    2718:	92 e1       	ldi	r25, 0x12	; 18
    271a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <xTaskCreate>
	NULL,
	1,
	&sensorDataTask);

	// Display initial messages on the screen
	vDisplayClear();
    271e:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <vDisplayClear>

	// Start the FreeRTOS scheduler
	vTaskStartScheduler();
    2722:	0e 94 c9 0a 	call	0x1592	; 0x1592 <vTaskStartScheduler>

	// Main function ends
	return 0;
}
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0f 91       	pop	r16
    272c:	ff 90       	pop	r15
    272e:	ef 90       	pop	r14
    2730:	08 95       	ret

00002732 <normalize>:
 void displayHome() {
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
    2732:	cf 92       	push	r12
    2734:	df 92       	push	r13
    2736:	ef 92       	push	r14
    2738:	ff 92       	push	r15
    273a:	0f 93       	push	r16
    273c:	1f 93       	push	r17
    273e:	cf 93       	push	r28
    2740:	df 93       	push	r29
    2742:	8c 01       	movw	r16, r24
    2744:	fc 01       	movw	r30, r24
    2746:	c0 80       	ld	r12, Z
    2748:	d1 80       	ldd	r13, Z+1	; 0x01
    274a:	e2 80       	ldd	r14, Z+2	; 0x02
    274c:	f3 80       	ldd	r15, Z+3	; 0x03
    274e:	c0 e0       	ldi	r28, 0x00	; 0
    2750:	d0 e0       	ldi	r29, 0x00	; 0
    2752:	0b c0       	rjmp	.+22     	; 0x276a <normalize+0x38>
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e2       	ldi	r20, 0x20	; 32
    275a:	51 e4       	ldi	r21, 0x41	; 65
    275c:	c7 01       	movw	r24, r14
    275e:	b6 01       	movw	r22, r12
    2760:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <__divsf3>
    2764:	6b 01       	movw	r12, r22
    2766:	7c 01       	movw	r14, r24
    2768:	21 96       	adiw	r28, 0x01	; 1
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e8       	ldi	r20, 0x80	; 128
    2770:	5f e3       	ldi	r21, 0x3F	; 63
    2772:	c7 01       	movw	r24, r14
    2774:	b6 01       	movw	r22, r12
    2776:	0e 94 3d 1c 	call	0x387a	; 0x387a <__gesf2>
    277a:	88 23       	and	r24, r24
    277c:	5c f7       	brge	.-42     	; 0x2754 <normalize+0x22>
    277e:	0b c0       	rjmp	.+22     	; 0x2796 <normalize+0x64>
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e2       	ldi	r20, 0x20	; 32
    2786:	51 e4       	ldi	r21, 0x41	; 65
    2788:	c7 01       	movw	r24, r14
    278a:	b6 01       	movw	r22, r12
    278c:	0e 94 42 1c 	call	0x3884	; 0x3884 <__mulsf3>
    2790:	6b 01       	movw	r12, r22
    2792:	7c 01       	movw	r14, r24
    2794:	21 97       	sbiw	r28, 0x01	; 1
    2796:	2d ec       	ldi	r18, 0xCD	; 205
    2798:	3c ec       	ldi	r19, 0xCC	; 204
    279a:	4c ec       	ldi	r20, 0xCC	; 204
    279c:	5d e3       	ldi	r21, 0x3D	; 61
    279e:	c7 01       	movw	r24, r14
    27a0:	b6 01       	movw	r22, r12
    27a2:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__cmpsf2>
    27a6:	88 23       	and	r24, r24
    27a8:	5c f3       	brlt	.-42     	; 0x2780 <normalize+0x4e>
    27aa:	f8 01       	movw	r30, r16
    27ac:	c0 82       	st	Z, r12
    27ae:	d1 82       	std	Z+1, r13	; 0x01
    27b0:	e2 82       	std	Z+2, r14	; 0x02
    27b2:	f3 82       	std	Z+3, r15	; 0x03
    27b4:	ce 01       	movw	r24, r28
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	1f 91       	pop	r17
    27bc:	0f 91       	pop	r16
    27be:	ff 90       	pop	r15
    27c0:	ef 90       	pop	r14
    27c2:	df 90       	pop	r13
    27c4:	cf 90       	pop	r12
    27c6:	08 95       	ret

000027c8 <ftoa_fixed>:
    27c8:	4f 92       	push	r4
    27ca:	5f 92       	push	r5
    27cc:	6f 92       	push	r6
    27ce:	7f 92       	push	r7
    27d0:	8f 92       	push	r8
    27d2:	9f 92       	push	r9
    27d4:	af 92       	push	r10
    27d6:	bf 92       	push	r11
    27d8:	cf 92       	push	r12
    27da:	df 92       	push	r13
    27dc:	ef 92       	push	r14
    27de:	ff 92       	push	r15
    27e0:	0f 93       	push	r16
    27e2:	1f 93       	push	r17
    27e4:	cf 93       	push	r28
    27e6:	df 93       	push	r29
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <ftoa_fixed+0x22>
    27ea:	1f 92       	push	r1
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	5c 01       	movw	r10, r24
    27f2:	e4 2e       	mov	r14, r20
    27f4:	f5 2e       	mov	r15, r21
    27f6:	06 2f       	mov	r16, r22
    27f8:	17 2f       	mov	r17, r23
    27fa:	49 83       	std	Y+1, r20	; 0x01
    27fc:	5a 83       	std	Y+2, r21	; 0x02
    27fe:	6b 83       	std	Y+3, r22	; 0x03
    2800:	7c 83       	std	Y+4, r23	; 0x04
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	a9 01       	movw	r20, r18
    2808:	6e 2d       	mov	r22, r14
    280a:	7f 2d       	mov	r23, r15
    280c:	80 2f       	mov	r24, r16
    280e:	91 2f       	mov	r25, r17
    2810:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__cmpsf2>
    2814:	81 11       	cpse	r24, r1
    2816:	05 c0       	rjmp	.+10     	; 0x2822 <ftoa_fixed+0x5a>
    2818:	80 e3       	ldi	r24, 0x30	; 48
    281a:	f5 01       	movw	r30, r10
    281c:	80 83       	st	Z, r24
    281e:	11 82       	std	Z+1, r1	; 0x01
    2820:	b9 c0       	rjmp	.+370    	; 0x2994 <ftoa_fixed+0x1cc>
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	a9 01       	movw	r20, r18
    2828:	6e 2d       	mov	r22, r14
    282a:	7f 2d       	mov	r23, r15
    282c:	80 2f       	mov	r24, r16
    282e:	91 2f       	mov	r25, r17
    2830:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__cmpsf2>
    2834:	88 23       	and	r24, r24
    2836:	7c f4       	brge	.+30     	; 0x2856 <ftoa_fixed+0x8e>
    2838:	8d e2       	ldi	r24, 0x2D	; 45
    283a:	f5 01       	movw	r30, r10
    283c:	80 83       	st	Z, r24
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	9a 81       	ldd	r25, Y+2	; 0x02
    2842:	ab 81       	ldd	r26, Y+3	; 0x03
    2844:	bc 81       	ldd	r27, Y+4	; 0x04
    2846:	b0 58       	subi	r27, 0x80	; 128
    2848:	89 83       	std	Y+1, r24	; 0x01
    284a:	9a 83       	std	Y+2, r25	; 0x02
    284c:	ab 83       	std	Y+3, r26	; 0x03
    284e:	bc 83       	std	Y+4, r27	; 0x04
    2850:	c5 01       	movw	r24, r10
    2852:	01 96       	adiw	r24, 0x01	; 1
    2854:	5c 01       	movw	r10, r24
    2856:	ce 01       	movw	r24, r28
    2858:	01 96       	adiw	r24, 0x01	; 1
    285a:	0e 94 99 13 	call	0x2732	; 0x2732 <normalize>
    285e:	7c 01       	movw	r14, r24
    2860:	00 e0       	ldi	r16, 0x00	; 0
    2862:	10 e0       	ldi	r17, 0x00	; 0
    2864:	38 c0       	rjmp	.+112    	; 0x28d6 <ftoa_fixed+0x10e>
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e2       	ldi	r20, 0x20	; 32
    286c:	51 e4       	ldi	r21, 0x41	; 65
    286e:	69 81       	ldd	r22, Y+1	; 0x01
    2870:	7a 81       	ldd	r23, Y+2	; 0x02
    2872:	8b 81       	ldd	r24, Y+3	; 0x03
    2874:	9c 81       	ldd	r25, Y+4	; 0x04
    2876:	0e 94 42 1c 	call	0x3884	; 0x3884 <__mulsf3>
    287a:	0e 94 55 1b 	call	0x36aa	; 0x36aa <__fixsfsi>
    287e:	2b 01       	movw	r4, r22
    2880:	3c 01       	movw	r6, r24
    2882:	65 01       	movw	r12, r10
    2884:	9f ef       	ldi	r25, 0xFF	; 255
    2886:	c9 1a       	sub	r12, r25
    2888:	d9 0a       	sbc	r13, r25
    288a:	80 e3       	ldi	r24, 0x30	; 48
    288c:	84 0d       	add	r24, r4
    288e:	f5 01       	movw	r30, r10
    2890:	80 83       	st	Z, r24
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	40 e2       	ldi	r20, 0x20	; 32
    2898:	51 e4       	ldi	r21, 0x41	; 65
    289a:	69 81       	ldd	r22, Y+1	; 0x01
    289c:	7a 81       	ldd	r23, Y+2	; 0x02
    289e:	8b 81       	ldd	r24, Y+3	; 0x03
    28a0:	9c 81       	ldd	r25, Y+4	; 0x04
    28a2:	0e 94 42 1c 	call	0x3884	; 0x3884 <__mulsf3>
    28a6:	4b 01       	movw	r8, r22
    28a8:	5c 01       	movw	r10, r24
    28aa:	b2 01       	movw	r22, r4
    28ac:	55 0c       	add	r5, r5
    28ae:	88 0b       	sbc	r24, r24
    28b0:	99 0b       	sbc	r25, r25
    28b2:	0e 94 8d 1b 	call	0x371a	; 0x371a <__floatsisf>
    28b6:	9b 01       	movw	r18, r22
    28b8:	ac 01       	movw	r20, r24
    28ba:	c5 01       	movw	r24, r10
    28bc:	b4 01       	movw	r22, r8
    28be:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__subsf3>
    28c2:	69 83       	std	Y+1, r22	; 0x01
    28c4:	7a 83       	std	Y+2, r23	; 0x02
    28c6:	8b 83       	std	Y+3, r24	; 0x03
    28c8:	9c 83       	std	Y+4, r25	; 0x04
    28ca:	0f 5f       	subi	r16, 0xFF	; 255
    28cc:	1f 4f       	sbci	r17, 0xFF	; 255
    28ce:	f1 e0       	ldi	r31, 0x01	; 1
    28d0:	ef 1a       	sub	r14, r31
    28d2:	f1 08       	sbc	r15, r1
    28d4:	56 01       	movw	r10, r12
    28d6:	1e 14       	cp	r1, r14
    28d8:	1f 04       	cpc	r1, r15
    28da:	2c f2       	brlt	.-118    	; 0x2866 <ftoa_fixed+0x9e>
    28dc:	01 15       	cp	r16, r1
    28de:	11 05       	cpc	r17, r1
    28e0:	31 f4       	brne	.+12     	; 0x28ee <ftoa_fixed+0x126>
    28e2:	80 e3       	ldi	r24, 0x30	; 48
    28e4:	f5 01       	movw	r30, r10
    28e6:	80 83       	st	Z, r24
    28e8:	c5 01       	movw	r24, r10
    28ea:	01 96       	adiw	r24, 0x01	; 1
    28ec:	5c 01       	movw	r10, r24
    28ee:	65 01       	movw	r12, r10
    28f0:	9f ef       	ldi	r25, 0xFF	; 255
    28f2:	c9 1a       	sub	r12, r25
    28f4:	d9 0a       	sbc	r13, r25
    28f6:	8e e2       	ldi	r24, 0x2E	; 46
    28f8:	f5 01       	movw	r30, r10
    28fa:	80 83       	st	Z, r24
    28fc:	0b c0       	rjmp	.+22     	; 0x2914 <ftoa_fixed+0x14c>
    28fe:	80 e3       	ldi	r24, 0x30	; 48
    2900:	f6 01       	movw	r30, r12
    2902:	80 83       	st	Z, r24
    2904:	f1 e0       	ldi	r31, 0x01	; 1
    2906:	ef 1a       	sub	r14, r31
    2908:	f1 08       	sbc	r15, r1
    290a:	0f 5f       	subi	r16, 0xFF	; 255
    290c:	1f 4f       	sbci	r17, 0xFF	; 255
    290e:	c6 01       	movw	r24, r12
    2910:	01 96       	adiw	r24, 0x01	; 1
    2912:	6c 01       	movw	r12, r24
    2914:	ff 20       	and	r15, r15
    2916:	cc f5       	brge	.+114    	; 0x298a <ftoa_fixed+0x1c2>
    2918:	04 30       	cpi	r16, 0x04	; 4
    291a:	11 05       	cpc	r17, r1
    291c:	84 f3       	brlt	.-32     	; 0x28fe <ftoa_fixed+0x136>
    291e:	35 c0       	rjmp	.+106    	; 0x298a <ftoa_fixed+0x1c2>
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e2       	ldi	r20, 0x20	; 32
    2926:	51 e4       	ldi	r21, 0x41	; 65
    2928:	69 81       	ldd	r22, Y+1	; 0x01
    292a:	7a 81       	ldd	r23, Y+2	; 0x02
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	9c 81       	ldd	r25, Y+4	; 0x04
    2930:	0e 94 42 1c 	call	0x3884	; 0x3884 <__mulsf3>
    2934:	0e 94 55 1b 	call	0x36aa	; 0x36aa <__fixsfsi>
    2938:	4b 01       	movw	r8, r22
    293a:	5c 01       	movw	r10, r24
    293c:	76 01       	movw	r14, r12
    293e:	9f ef       	ldi	r25, 0xFF	; 255
    2940:	e9 1a       	sub	r14, r25
    2942:	f9 0a       	sbc	r15, r25
    2944:	80 e3       	ldi	r24, 0x30	; 48
    2946:	88 0d       	add	r24, r8
    2948:	f6 01       	movw	r30, r12
    294a:	80 83       	st	Z, r24
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e2       	ldi	r20, 0x20	; 32
    2952:	51 e4       	ldi	r21, 0x41	; 65
    2954:	69 81       	ldd	r22, Y+1	; 0x01
    2956:	7a 81       	ldd	r23, Y+2	; 0x02
    2958:	8b 81       	ldd	r24, Y+3	; 0x03
    295a:	9c 81       	ldd	r25, Y+4	; 0x04
    295c:	0e 94 42 1c 	call	0x3884	; 0x3884 <__mulsf3>
    2960:	2b 01       	movw	r4, r22
    2962:	3c 01       	movw	r6, r24
    2964:	b4 01       	movw	r22, r8
    2966:	99 0c       	add	r9, r9
    2968:	88 0b       	sbc	r24, r24
    296a:	99 0b       	sbc	r25, r25
    296c:	0e 94 8d 1b 	call	0x371a	; 0x371a <__floatsisf>
    2970:	9b 01       	movw	r18, r22
    2972:	ac 01       	movw	r20, r24
    2974:	c3 01       	movw	r24, r6
    2976:	b2 01       	movw	r22, r4
    2978:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__subsf3>
    297c:	69 83       	std	Y+1, r22	; 0x01
    297e:	7a 83       	std	Y+2, r23	; 0x02
    2980:	8b 83       	std	Y+3, r24	; 0x03
    2982:	9c 83       	std	Y+4, r25	; 0x04
    2984:	0f 5f       	subi	r16, 0xFF	; 255
    2986:	1f 4f       	sbci	r17, 0xFF	; 255
    2988:	67 01       	movw	r12, r14
    298a:	04 30       	cpi	r16, 0x04	; 4
    298c:	11 05       	cpc	r17, r1
    298e:	44 f2       	brlt	.-112    	; 0x2920 <ftoa_fixed+0x158>
    2990:	f6 01       	movw	r30, r12
    2992:	10 82       	st	Z, r1
    2994:	24 96       	adiw	r28, 0x04	; 4
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	de bf       	out	0x3e, r29	; 62
    299a:	df 91       	pop	r29
    299c:	cf 91       	pop	r28
    299e:	1f 91       	pop	r17
    29a0:	0f 91       	pop	r16
    29a2:	ff 90       	pop	r15
    29a4:	ef 90       	pop	r14
    29a6:	df 90       	pop	r13
    29a8:	cf 90       	pop	r12
    29aa:	bf 90       	pop	r11
    29ac:	af 90       	pop	r10
    29ae:	9f 90       	pop	r9
    29b0:	8f 90       	pop	r8
    29b2:	7f 90       	pop	r7
    29b4:	6f 90       	pop	r6
    29b6:	5f 90       	pop	r5
    29b8:	4f 90       	pop	r4
    29ba:	08 95       	ret

000029bc <ftoa_sci>:
    29bc:	2f 92       	push	r2
    29be:	3f 92       	push	r3
    29c0:	4f 92       	push	r4
    29c2:	5f 92       	push	r5
    29c4:	6f 92       	push	r6
    29c6:	7f 92       	push	r7
    29c8:	8f 92       	push	r8
    29ca:	9f 92       	push	r9
    29cc:	af 92       	push	r10
    29ce:	bf 92       	push	r11
    29d0:	cf 92       	push	r12
    29d2:	df 92       	push	r13
    29d4:	ef 92       	push	r14
    29d6:	ff 92       	push	r15
    29d8:	0f 93       	push	r16
    29da:	1f 93       	push	r17
    29dc:	cf 93       	push	r28
    29de:	df 93       	push	r29
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	28 97       	sbiw	r28, 0x08	; 8
    29e6:	cd bf       	out	0x3d, r28	; 61
    29e8:	de bf       	out	0x3e, r29	; 62
    29ea:	7c 01       	movw	r14, r24
    29ec:	c4 2e       	mov	r12, r20
    29ee:	d5 2e       	mov	r13, r21
    29f0:	06 2f       	mov	r16, r22
    29f2:	17 2f       	mov	r17, r23
    29f4:	49 83       	std	Y+1, r20	; 0x01
    29f6:	5a 83       	std	Y+2, r21	; 0x02
    29f8:	6b 83       	std	Y+3, r22	; 0x03
    29fa:	7c 83       	std	Y+4, r23	; 0x04
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	a9 01       	movw	r20, r18
    2a02:	6c 2d       	mov	r22, r12
    2a04:	7d 2d       	mov	r23, r13
    2a06:	80 2f       	mov	r24, r16
    2a08:	91 2f       	mov	r25, r17
    2a0a:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__cmpsf2>
    2a0e:	81 11       	cpse	r24, r1
    2a10:	05 c0       	rjmp	.+10     	; 0x2a1c <ftoa_sci+0x60>
    2a12:	80 e3       	ldi	r24, 0x30	; 48
    2a14:	f7 01       	movw	r30, r14
    2a16:	80 83       	st	Z, r24
    2a18:	11 82       	std	Z+1, r1	; 0x01
    2a1a:	a2 c0       	rjmp	.+324    	; 0x2b60 <ftoa_sci+0x1a4>
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	a9 01       	movw	r20, r18
    2a22:	6c 2d       	mov	r22, r12
    2a24:	7d 2d       	mov	r23, r13
    2a26:	80 2f       	mov	r24, r16
    2a28:	91 2f       	mov	r25, r17
    2a2a:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__cmpsf2>
    2a2e:	88 23       	and	r24, r24
    2a30:	7c f4       	brge	.+30     	; 0x2a50 <ftoa_sci+0x94>
    2a32:	8d e2       	ldi	r24, 0x2D	; 45
    2a34:	f7 01       	movw	r30, r14
    2a36:	80 83       	st	Z, r24
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a3e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a40:	b0 58       	subi	r27, 0x80	; 128
    2a42:	89 83       	std	Y+1, r24	; 0x01
    2a44:	9a 83       	std	Y+2, r25	; 0x02
    2a46:	ab 83       	std	Y+3, r26	; 0x03
    2a48:	bc 83       	std	Y+4, r27	; 0x04
    2a4a:	c7 01       	movw	r24, r14
    2a4c:	01 96       	adiw	r24, 0x01	; 1
    2a4e:	7c 01       	movw	r14, r24
    2a50:	ce 01       	movw	r24, r28
    2a52:	01 96       	adiw	r24, 0x01	; 1
    2a54:	0e 94 99 13 	call	0x2732	; 0x2732 <normalize>
    2a58:	5c 01       	movw	r10, r24
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	40 e2       	ldi	r20, 0x20	; 32
    2a60:	51 e4       	ldi	r21, 0x41	; 65
    2a62:	69 81       	ldd	r22, Y+1	; 0x01
    2a64:	7a 81       	ldd	r23, Y+2	; 0x02
    2a66:	8b 81       	ldd	r24, Y+3	; 0x03
    2a68:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6a:	0e 94 42 1c 	call	0x3884	; 0x3884 <__mulsf3>
    2a6e:	0e 94 55 1b 	call	0x36aa	; 0x36aa <__fixsfsi>
    2a72:	2b 01       	movw	r4, r22
    2a74:	3c 01       	movw	r6, r24
    2a76:	80 e3       	ldi	r24, 0x30	; 48
    2a78:	84 0d       	add	r24, r4
    2a7a:	f7 01       	movw	r30, r14
    2a7c:	80 83       	st	Z, r24
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	40 e2       	ldi	r20, 0x20	; 32
    2a84:	51 e4       	ldi	r21, 0x41	; 65
    2a86:	69 81       	ldd	r22, Y+1	; 0x01
    2a88:	7a 81       	ldd	r23, Y+2	; 0x02
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8e:	0e 94 42 1c 	call	0x3884	; 0x3884 <__mulsf3>
    2a92:	6d 83       	std	Y+5, r22	; 0x05
    2a94:	7e 83       	std	Y+6, r23	; 0x06
    2a96:	8f 83       	std	Y+7, r24	; 0x07
    2a98:	98 87       	std	Y+8, r25	; 0x08
    2a9a:	b2 01       	movw	r22, r4
    2a9c:	55 0c       	add	r5, r5
    2a9e:	88 0b       	sbc	r24, r24
    2aa0:	99 0b       	sbc	r25, r25
    2aa2:	0e 94 8d 1b 	call	0x371a	; 0x371a <__floatsisf>
    2aa6:	9b 01       	movw	r18, r22
    2aa8:	ac 01       	movw	r20, r24
    2aaa:	6d 81       	ldd	r22, Y+5	; 0x05
    2aac:	7e 81       	ldd	r23, Y+6	; 0x06
    2aae:	8f 81       	ldd	r24, Y+7	; 0x07
    2ab0:	98 85       	ldd	r25, Y+8	; 0x08
    2ab2:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__subsf3>
    2ab6:	69 83       	std	Y+1, r22	; 0x01
    2ab8:	7a 83       	std	Y+2, r23	; 0x02
    2aba:	8b 83       	std	Y+3, r24	; 0x03
    2abc:	9c 83       	std	Y+4, r25	; 0x04
    2abe:	15 01       	movw	r2, r10
    2ac0:	f1 e0       	ldi	r31, 0x01	; 1
    2ac2:	2f 1a       	sub	r2, r31
    2ac4:	31 08       	sbc	r3, r1
    2ac6:	87 01       	movw	r16, r14
    2ac8:	0e 5f       	subi	r16, 0xFE	; 254
    2aca:	1f 4f       	sbci	r17, 0xFF	; 255
    2acc:	8e e2       	ldi	r24, 0x2E	; 46
    2ace:	f7 01       	movw	r30, r14
    2ad0:	81 83       	std	Z+1, r24	; 0x01
    2ad2:	e1 2c       	mov	r14, r1
    2ad4:	f1 2c       	mov	r15, r1
    2ad6:	36 c0       	rjmp	.+108    	; 0x2b44 <ftoa_sci+0x188>
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e2       	ldi	r20, 0x20	; 32
    2ade:	51 e4       	ldi	r21, 0x41	; 65
    2ae0:	69 81       	ldd	r22, Y+1	; 0x01
    2ae2:	7a 81       	ldd	r23, Y+2	; 0x02
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae8:	0e 94 42 1c 	call	0x3884	; 0x3884 <__mulsf3>
    2aec:	0e 94 55 1b 	call	0x36aa	; 0x36aa <__fixsfsi>
    2af0:	2b 01       	movw	r4, r22
    2af2:	3c 01       	movw	r6, r24
    2af4:	68 01       	movw	r12, r16
    2af6:	ff ef       	ldi	r31, 0xFF	; 255
    2af8:	cf 1a       	sub	r12, r31
    2afa:	df 0a       	sbc	r13, r31
    2afc:	80 e3       	ldi	r24, 0x30	; 48
    2afe:	84 0d       	add	r24, r4
    2b00:	f8 01       	movw	r30, r16
    2b02:	80 83       	st	Z, r24
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e2       	ldi	r20, 0x20	; 32
    2b0a:	51 e4       	ldi	r21, 0x41	; 65
    2b0c:	69 81       	ldd	r22, Y+1	; 0x01
    2b0e:	7a 81       	ldd	r23, Y+2	; 0x02
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	9c 81       	ldd	r25, Y+4	; 0x04
    2b14:	0e 94 42 1c 	call	0x3884	; 0x3884 <__mulsf3>
    2b18:	4b 01       	movw	r8, r22
    2b1a:	5c 01       	movw	r10, r24
    2b1c:	b2 01       	movw	r22, r4
    2b1e:	55 0c       	add	r5, r5
    2b20:	88 0b       	sbc	r24, r24
    2b22:	99 0b       	sbc	r25, r25
    2b24:	0e 94 8d 1b 	call	0x371a	; 0x371a <__floatsisf>
    2b28:	9b 01       	movw	r18, r22
    2b2a:	ac 01       	movw	r20, r24
    2b2c:	c5 01       	movw	r24, r10
    2b2e:	b4 01       	movw	r22, r8
    2b30:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__subsf3>
    2b34:	69 83       	std	Y+1, r22	; 0x01
    2b36:	7a 83       	std	Y+2, r23	; 0x02
    2b38:	8b 83       	std	Y+3, r24	; 0x03
    2b3a:	9c 83       	std	Y+4, r25	; 0x04
    2b3c:	ff ef       	ldi	r31, 0xFF	; 255
    2b3e:	ef 1a       	sub	r14, r31
    2b40:	ff 0a       	sbc	r15, r31
    2b42:	86 01       	movw	r16, r12
    2b44:	84 e0       	ldi	r24, 0x04	; 4
    2b46:	e8 16       	cp	r14, r24
    2b48:	f1 04       	cpc	r15, r1
    2b4a:	34 f2       	brlt	.-116    	; 0x2ad8 <ftoa_sci+0x11c>
    2b4c:	b8 01       	movw	r22, r16
    2b4e:	6f 5f       	subi	r22, 0xFF	; 255
    2b50:	7f 4f       	sbci	r23, 0xFF	; 255
    2b52:	85 e6       	ldi	r24, 0x65	; 101
    2b54:	f8 01       	movw	r30, r16
    2b56:	80 83       	st	Z, r24
    2b58:	4a e0       	ldi	r20, 0x0A	; 10
    2b5a:	c1 01       	movw	r24, r2
    2b5c:	0e 94 c7 1c 	call	0x398e	; 0x398e <__itoa_ncheck>
    2b60:	28 96       	adiw	r28, 0x08	; 8
    2b62:	cd bf       	out	0x3d, r28	; 61
    2b64:	de bf       	out	0x3e, r29	; 62
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	1f 91       	pop	r17
    2b6c:	0f 91       	pop	r16
    2b6e:	ff 90       	pop	r15
    2b70:	ef 90       	pop	r14
    2b72:	df 90       	pop	r13
    2b74:	cf 90       	pop	r12
    2b76:	bf 90       	pop	r11
    2b78:	af 90       	pop	r10
    2b7a:	9f 90       	pop	r9
    2b7c:	8f 90       	pop	r8
    2b7e:	7f 90       	pop	r7
    2b80:	6f 90       	pop	r6
    2b82:	5f 90       	pop	r5
    2b84:	4f 90       	pop	r4
    2b86:	3f 90       	pop	r3
    2b88:	2f 90       	pop	r2
    2b8a:	08 95       	ret

00002b8c <display_vprintf>:
    2b8c:	6f 92       	push	r6
    2b8e:	7f 92       	push	r7
    2b90:	8f 92       	push	r8
    2b92:	9f 92       	push	r9
    2b94:	bf 92       	push	r11
    2b96:	cf 92       	push	r12
    2b98:	df 92       	push	r13
    2b9a:	ef 92       	push	r14
    2b9c:	ff 92       	push	r15
    2b9e:	0f 93       	push	r16
    2ba0:	1f 93       	push	r17
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
    2baa:	66 97       	sbiw	r28, 0x16	; 22
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	b8 2e       	mov	r11, r24
    2bb2:	8b 01       	movw	r16, r22
    2bb4:	da 01       	movw	r26, r20
    2bb6:	39 01       	movw	r6, r18
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	05 c0       	rjmp	.+10     	; 0x2bc8 <display_vprintf+0x3c>
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	e2 52       	subi	r30, 0x22	; 34
    2bc2:	f3 4d       	sbci	r31, 0xD3	; 211
    2bc4:	10 82       	st	Z, r1
    2bc6:	01 96       	adiw	r24, 0x01	; 1
    2bc8:	84 31       	cpi	r24, 0x14	; 20
    2bca:	91 05       	cpc	r25, r1
    2bcc:	c4 f3       	brlt	.-16     	; 0x2bbe <display_vprintf+0x32>
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	05 c0       	rjmp	.+10     	; 0x2bde <display_vprintf+0x52>
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	e6 53       	subi	r30, 0x36	; 54
    2bd8:	f3 4d       	sbci	r31, 0xD3	; 211
    2bda:	10 82       	st	Z, r1
    2bdc:	01 96       	adiw	r24, 0x01	; 1
    2bde:	84 31       	cpi	r24, 0x14	; 20
    2be0:	91 05       	cpc	r25, r1
    2be2:	c4 f3       	brlt	.-16     	; 0x2bd4 <display_vprintf+0x48>
    2be4:	e1 2c       	mov	r14, r1
    2be6:	f1 2c       	mov	r15, r1
    2be8:	14 c1       	rjmp	.+552    	; 0x2e12 <display_vprintf+0x286>
    2bea:	85 32       	cpi	r24, 0x25	; 37
    2bec:	09 f0       	breq	.+2      	; 0x2bf0 <display_vprintf+0x64>
    2bee:	01 c1       	rjmp	.+514    	; 0x2df2 <display_vprintf+0x266>
    2bf0:	6d 01       	movw	r12, r26
    2bf2:	82 e0       	ldi	r24, 0x02	; 2
    2bf4:	c8 0e       	add	r12, r24
    2bf6:	d1 1c       	adc	r13, r1
    2bf8:	11 96       	adiw	r26, 0x01	; 1
    2bfa:	8c 91       	ld	r24, X
    2bfc:	85 36       	cpi	r24, 0x65	; 101
    2bfe:	09 f4       	brne	.+2      	; 0x2c02 <display_vprintf+0x76>
    2c00:	cd c0       	rjmp	.+410    	; 0x2d9c <display_vprintf+0x210>
    2c02:	38 f4       	brcc	.+14     	; 0x2c12 <display_vprintf+0x86>
    2c04:	83 36       	cpi	r24, 0x63	; 99
    2c06:	c1 f0       	breq	.+48     	; 0x2c38 <display_vprintf+0xac>
    2c08:	08 f0       	brcs	.+2      	; 0x2c0c <display_vprintf+0x80>
    2c0a:	49 c0       	rjmp	.+146    	; 0x2c9e <display_vprintf+0x112>
    2c0c:	85 32       	cpi	r24, 0x25	; 37
    2c0e:	51 f0       	breq	.+20     	; 0x2c24 <display_vprintf+0x98>
    2c10:	ff c0       	rjmp	.+510    	; 0x2e10 <display_vprintf+0x284>
    2c12:	83 37       	cpi	r24, 0x73	; 115
    2c14:	f9 f0       	breq	.+62     	; 0x2c54 <display_vprintf+0xc8>
    2c16:	88 37       	cpi	r24, 0x78	; 120
    2c18:	09 f4       	brne	.+2      	; 0x2c1c <display_vprintf+0x90>
    2c1a:	6b c0       	rjmp	.+214    	; 0x2cf2 <display_vprintf+0x166>
    2c1c:	86 36       	cpi	r24, 0x66	; 102
    2c1e:	09 f0       	breq	.+2      	; 0x2c22 <display_vprintf+0x96>
    2c20:	f7 c0       	rjmp	.+494    	; 0x2e10 <display_vprintf+0x284>
    2c22:	91 c0       	rjmp	.+290    	; 0x2d46 <display_vprintf+0x1ba>
    2c24:	d7 01       	movw	r26, r14
    2c26:	a6 53       	subi	r26, 0x36	; 54
    2c28:	b3 4d       	sbci	r27, 0xD3	; 211
    2c2a:	85 e2       	ldi	r24, 0x25	; 37
    2c2c:	8c 93       	st	X, r24
    2c2e:	9f ef       	ldi	r25, 0xFF	; 255
    2c30:	e9 1a       	sub	r14, r25
    2c32:	f9 0a       	sbc	r15, r25
    2c34:	d6 01       	movw	r26, r12
    2c36:	ed c0       	rjmp	.+474    	; 0x2e12 <display_vprintf+0x286>
    2c38:	f3 01       	movw	r30, r6
    2c3a:	80 81       	ld	r24, Z
    2c3c:	d7 01       	movw	r26, r14
    2c3e:	a6 53       	subi	r26, 0x36	; 54
    2c40:	b3 4d       	sbci	r27, 0xD3	; 211
    2c42:	8c 93       	st	X, r24
    2c44:	ff ef       	ldi	r31, 0xFF	; 255
    2c46:	ef 1a       	sub	r14, r31
    2c48:	ff 0a       	sbc	r15, r31
    2c4a:	c3 01       	movw	r24, r6
    2c4c:	02 96       	adiw	r24, 0x02	; 2
    2c4e:	3c 01       	movw	r6, r24
    2c50:	d6 01       	movw	r26, r12
    2c52:	df c0       	rjmp	.+446    	; 0x2e12 <display_vprintf+0x286>
    2c54:	93 01       	movw	r18, r6
    2c56:	2e 5f       	subi	r18, 0xFE	; 254
    2c58:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5a:	f3 01       	movw	r30, r6
    2c5c:	a0 81       	ld	r26, Z
    2c5e:	b1 81       	ldd	r27, Z+1	; 0x01
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	0d c0       	rjmp	.+26     	; 0x2c80 <display_vprintf+0xf4>
    2c66:	b7 01       	movw	r22, r14
    2c68:	68 0f       	add	r22, r24
    2c6a:	79 1f       	adc	r23, r25
    2c6c:	ad 01       	movw	r20, r26
    2c6e:	48 0f       	add	r20, r24
    2c70:	59 1f       	adc	r21, r25
    2c72:	fa 01       	movw	r30, r20
    2c74:	40 81       	ld	r20, Z
    2c76:	fb 01       	movw	r30, r22
    2c78:	e6 53       	subi	r30, 0x36	; 54
    2c7a:	f3 4d       	sbci	r31, 0xD3	; 211
    2c7c:	40 83       	st	Z, r20
    2c7e:	01 96       	adiw	r24, 0x01	; 1
    2c80:	fd 01       	movw	r30, r26
    2c82:	01 90       	ld	r0, Z+
    2c84:	00 20       	and	r0, r0
    2c86:	e9 f7       	brne	.-6      	; 0x2c82 <display_vprintf+0xf6>
    2c88:	31 97       	sbiw	r30, 0x01	; 1
    2c8a:	ea 1b       	sub	r30, r26
    2c8c:	fb 0b       	sbc	r31, r27
    2c8e:	8e 17       	cp	r24, r30
    2c90:	9f 07       	cpc	r25, r31
    2c92:	48 f3       	brcs	.-46     	; 0x2c66 <display_vprintf+0xda>
    2c94:	ee 0e       	add	r14, r30
    2c96:	ff 1e       	adc	r15, r31
    2c98:	39 01       	movw	r6, r18
    2c9a:	d6 01       	movw	r26, r12
    2c9c:	ba c0       	rjmp	.+372    	; 0x2e12 <display_vprintf+0x286>
    2c9e:	43 01       	movw	r8, r6
    2ca0:	f2 e0       	ldi	r31, 0x02	; 2
    2ca2:	8f 0e       	add	r8, r31
    2ca4:	91 1c       	adc	r9, r1
    2ca6:	4a e0       	ldi	r20, 0x0A	; 10
    2ca8:	6e ed       	ldi	r22, 0xDE	; 222
    2caa:	7c e2       	ldi	r23, 0x2C	; 44
    2cac:	f3 01       	movw	r30, r6
    2cae:	80 81       	ld	r24, Z
    2cb0:	91 81       	ldd	r25, Z+1	; 0x01
    2cb2:	0e 94 c7 1c 	call	0x398e	; 0x398e <__itoa_ncheck>
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	0b c0       	rjmp	.+22     	; 0x2cd2 <display_vprintf+0x146>
    2cbc:	f7 01       	movw	r30, r14
    2cbe:	e8 0f       	add	r30, r24
    2cc0:	f9 1f       	adc	r31, r25
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	a2 52       	subi	r26, 0x22	; 34
    2cc6:	b3 4d       	sbci	r27, 0xD3	; 211
    2cc8:	2c 91       	ld	r18, X
    2cca:	e6 53       	subi	r30, 0x36	; 54
    2ccc:	f3 4d       	sbci	r31, 0xD3	; 211
    2cce:	20 83       	st	Z, r18
    2cd0:	01 96       	adiw	r24, 0x01	; 1
    2cd2:	ee ed       	ldi	r30, 0xDE	; 222
    2cd4:	fc e2       	ldi	r31, 0x2C	; 44
    2cd6:	01 90       	ld	r0, Z+
    2cd8:	00 20       	and	r0, r0
    2cda:	e9 f7       	brne	.-6      	; 0x2cd6 <display_vprintf+0x14a>
    2cdc:	31 97       	sbiw	r30, 0x01	; 1
    2cde:	ee 5d       	subi	r30, 0xDE	; 222
    2ce0:	fc 42       	sbci	r31, 0x2C	; 44
    2ce2:	8e 17       	cp	r24, r30
    2ce4:	9f 07       	cpc	r25, r31
    2ce6:	50 f3       	brcs	.-44     	; 0x2cbc <display_vprintf+0x130>
    2ce8:	ee 0e       	add	r14, r30
    2cea:	ff 1e       	adc	r15, r31
    2cec:	34 01       	movw	r6, r8
    2cee:	d6 01       	movw	r26, r12
    2cf0:	90 c0       	rjmp	.+288    	; 0x2e12 <display_vprintf+0x286>
    2cf2:	43 01       	movw	r8, r6
    2cf4:	f2 e0       	ldi	r31, 0x02	; 2
    2cf6:	8f 0e       	add	r8, r31
    2cf8:	91 1c       	adc	r9, r1
    2cfa:	40 e1       	ldi	r20, 0x10	; 16
    2cfc:	6e ed       	ldi	r22, 0xDE	; 222
    2cfe:	7c e2       	ldi	r23, 0x2C	; 44
    2d00:	f3 01       	movw	r30, r6
    2d02:	80 81       	ld	r24, Z
    2d04:	91 81       	ldd	r25, Z+1	; 0x01
    2d06:	0e 94 c7 1c 	call	0x398e	; 0x398e <__itoa_ncheck>
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	0b c0       	rjmp	.+22     	; 0x2d26 <display_vprintf+0x19a>
    2d10:	f7 01       	movw	r30, r14
    2d12:	e8 0f       	add	r30, r24
    2d14:	f9 1f       	adc	r31, r25
    2d16:	dc 01       	movw	r26, r24
    2d18:	a2 52       	subi	r26, 0x22	; 34
    2d1a:	b3 4d       	sbci	r27, 0xD3	; 211
    2d1c:	2c 91       	ld	r18, X
    2d1e:	e6 53       	subi	r30, 0x36	; 54
    2d20:	f3 4d       	sbci	r31, 0xD3	; 211
    2d22:	20 83       	st	Z, r18
    2d24:	01 96       	adiw	r24, 0x01	; 1
    2d26:	ee ed       	ldi	r30, 0xDE	; 222
    2d28:	fc e2       	ldi	r31, 0x2C	; 44
    2d2a:	01 90       	ld	r0, Z+
    2d2c:	00 20       	and	r0, r0
    2d2e:	e9 f7       	brne	.-6      	; 0x2d2a <display_vprintf+0x19e>
    2d30:	31 97       	sbiw	r30, 0x01	; 1
    2d32:	ee 5d       	subi	r30, 0xDE	; 222
    2d34:	fc 42       	sbci	r31, 0x2C	; 44
    2d36:	8e 17       	cp	r24, r30
    2d38:	9f 07       	cpc	r25, r31
    2d3a:	50 f3       	brcs	.-44     	; 0x2d10 <display_vprintf+0x184>
    2d3c:	ee 0e       	add	r14, r30
    2d3e:	ff 1e       	adc	r15, r31
    2d40:	34 01       	movw	r6, r8
    2d42:	d6 01       	movw	r26, r12
    2d44:	66 c0       	rjmp	.+204    	; 0x2e12 <display_vprintf+0x286>
    2d46:	43 01       	movw	r8, r6
    2d48:	f4 e0       	ldi	r31, 0x04	; 4
    2d4a:	8f 0e       	add	r8, r31
    2d4c:	91 1c       	adc	r9, r1
    2d4e:	f3 01       	movw	r30, r6
    2d50:	40 81       	ld	r20, Z
    2d52:	51 81       	ldd	r21, Z+1	; 0x01
    2d54:	62 81       	ldd	r22, Z+2	; 0x02
    2d56:	73 81       	ldd	r23, Z+3	; 0x03
    2d58:	8e ed       	ldi	r24, 0xDE	; 222
    2d5a:	9c e2       	ldi	r25, 0x2C	; 44
    2d5c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <ftoa_fixed>
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	0b c0       	rjmp	.+22     	; 0x2d7c <display_vprintf+0x1f0>
    2d66:	f7 01       	movw	r30, r14
    2d68:	e8 0f       	add	r30, r24
    2d6a:	f9 1f       	adc	r31, r25
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	a2 52       	subi	r26, 0x22	; 34
    2d70:	b3 4d       	sbci	r27, 0xD3	; 211
    2d72:	2c 91       	ld	r18, X
    2d74:	e6 53       	subi	r30, 0x36	; 54
    2d76:	f3 4d       	sbci	r31, 0xD3	; 211
    2d78:	20 83       	st	Z, r18
    2d7a:	01 96       	adiw	r24, 0x01	; 1
    2d7c:	ee ed       	ldi	r30, 0xDE	; 222
    2d7e:	fc e2       	ldi	r31, 0x2C	; 44
    2d80:	01 90       	ld	r0, Z+
    2d82:	00 20       	and	r0, r0
    2d84:	e9 f7       	brne	.-6      	; 0x2d80 <display_vprintf+0x1f4>
    2d86:	31 97       	sbiw	r30, 0x01	; 1
    2d88:	ee 5d       	subi	r30, 0xDE	; 222
    2d8a:	fc 42       	sbci	r31, 0x2C	; 44
    2d8c:	8e 17       	cp	r24, r30
    2d8e:	9f 07       	cpc	r25, r31
    2d90:	50 f3       	brcs	.-44     	; 0x2d66 <display_vprintf+0x1da>
    2d92:	ee 0e       	add	r14, r30
    2d94:	ff 1e       	adc	r15, r31
    2d96:	34 01       	movw	r6, r8
    2d98:	d6 01       	movw	r26, r12
    2d9a:	3b c0       	rjmp	.+118    	; 0x2e12 <display_vprintf+0x286>
    2d9c:	43 01       	movw	r8, r6
    2d9e:	f4 e0       	ldi	r31, 0x04	; 4
    2da0:	8f 0e       	add	r8, r31
    2da2:	91 1c       	adc	r9, r1
    2da4:	f3 01       	movw	r30, r6
    2da6:	40 81       	ld	r20, Z
    2da8:	51 81       	ldd	r21, Z+1	; 0x01
    2daa:	62 81       	ldd	r22, Z+2	; 0x02
    2dac:	73 81       	ldd	r23, Z+3	; 0x03
    2dae:	8e ed       	ldi	r24, 0xDE	; 222
    2db0:	9c e2       	ldi	r25, 0x2C	; 44
    2db2:	0e 94 de 14 	call	0x29bc	; 0x29bc <ftoa_sci>
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	0b c0       	rjmp	.+22     	; 0x2dd2 <display_vprintf+0x246>
    2dbc:	f7 01       	movw	r30, r14
    2dbe:	e8 0f       	add	r30, r24
    2dc0:	f9 1f       	adc	r31, r25
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	a2 52       	subi	r26, 0x22	; 34
    2dc6:	b3 4d       	sbci	r27, 0xD3	; 211
    2dc8:	2c 91       	ld	r18, X
    2dca:	e6 53       	subi	r30, 0x36	; 54
    2dcc:	f3 4d       	sbci	r31, 0xD3	; 211
    2dce:	20 83       	st	Z, r18
    2dd0:	01 96       	adiw	r24, 0x01	; 1
    2dd2:	ee ed       	ldi	r30, 0xDE	; 222
    2dd4:	fc e2       	ldi	r31, 0x2C	; 44
    2dd6:	01 90       	ld	r0, Z+
    2dd8:	00 20       	and	r0, r0
    2dda:	e9 f7       	brne	.-6      	; 0x2dd6 <display_vprintf+0x24a>
    2ddc:	31 97       	sbiw	r30, 0x01	; 1
    2dde:	ee 5d       	subi	r30, 0xDE	; 222
    2de0:	fc 42       	sbci	r31, 0x2C	; 44
    2de2:	8e 17       	cp	r24, r30
    2de4:	9f 07       	cpc	r25, r31
    2de6:	50 f3       	brcs	.-44     	; 0x2dbc <display_vprintf+0x230>
    2de8:	ee 0e       	add	r14, r30
    2dea:	ff 1e       	adc	r15, r31
    2dec:	34 01       	movw	r6, r8
    2dee:	d6 01       	movw	r26, r12
    2df0:	10 c0       	rjmp	.+32     	; 0x2e12 <display_vprintf+0x286>
    2df2:	d7 01       	movw	r26, r14
    2df4:	a6 53       	subi	r26, 0x36	; 54
    2df6:	b3 4d       	sbci	r27, 0xD3	; 211
    2df8:	8c 93       	st	X, r24
    2dfa:	8a 30       	cpi	r24, 0x0A	; 10
    2dfc:	21 f4       	brne	.+8      	; 0x2e06 <display_vprintf+0x27a>
    2dfe:	d7 01       	movw	r26, r14
    2e00:	a6 53       	subi	r26, 0x36	; 54
    2e02:	b3 4d       	sbci	r27, 0xD3	; 211
    2e04:	1c 92       	st	X, r1
    2e06:	ff ef       	ldi	r31, 0xFF	; 255
    2e08:	ef 1a       	sub	r14, r31
    2e0a:	ff 0a       	sbc	r15, r31
    2e0c:	d9 01       	movw	r26, r18
    2e0e:	01 c0       	rjmp	.+2      	; 0x2e12 <display_vprintf+0x286>
    2e10:	d6 01       	movw	r26, r12
    2e12:	9d 01       	movw	r18, r26
    2e14:	2f 5f       	subi	r18, 0xFF	; 255
    2e16:	3f 4f       	sbci	r19, 0xFF	; 255
    2e18:	8c 91       	ld	r24, X
    2e1a:	81 11       	cpse	r24, r1
    2e1c:	e6 ce       	rjmp	.-564    	; 0x2bea <display_vprintf+0x5e>
    2e1e:	c7 01       	movw	r24, r14
    2e20:	80 0f       	add	r24, r16
    2e22:	91 1f       	adc	r25, r17
    2e24:	44 97       	sbiw	r24, 0x14	; 20
    2e26:	2c f0       	brlt	.+10     	; 0x2e32 <display_vprintf+0x2a6>
    2e28:	84 e1       	ldi	r24, 0x14	; 20
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	7c 01       	movw	r14, r24
    2e2e:	e0 1a       	sub	r14, r16
    2e30:	f1 0a       	sbc	r15, r17
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	08 c0       	rjmp	.+16     	; 0x2e48 <display_vprintf+0x2bc>
    2e38:	e3 e0       	ldi	r30, 0x03	; 3
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	ec 0f       	add	r30, r28
    2e3e:	fd 1f       	adc	r31, r29
    2e40:	e8 0f       	add	r30, r24
    2e42:	f9 1f       	adc	r31, r25
    2e44:	10 82       	st	Z, r1
    2e46:	01 96       	adiw	r24, 0x01	; 1
    2e48:	84 31       	cpi	r24, 0x14	; 20
    2e4a:	91 05       	cpc	r25, r1
    2e4c:	ac f3       	brlt	.-22     	; 0x2e38 <display_vprintf+0x2ac>
    2e4e:	b9 82       	std	Y+1, r11	; 0x01
    2e50:	0a 83       	std	Y+2, r16	; 0x02
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	0c c0       	rjmp	.+24     	; 0x2e70 <display_vprintf+0x2e4>
    2e58:	fc 01       	movw	r30, r24
    2e5a:	e6 53       	subi	r30, 0x36	; 54
    2e5c:	f3 4d       	sbci	r31, 0xD3	; 211
    2e5e:	20 81       	ld	r18, Z
    2e60:	e3 e0       	ldi	r30, 0x03	; 3
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	ec 0f       	add	r30, r28
    2e66:	fd 1f       	adc	r31, r29
    2e68:	e8 0f       	add	r30, r24
    2e6a:	f9 1f       	adc	r31, r25
    2e6c:	20 83       	st	Z, r18
    2e6e:	01 96       	adiw	r24, 0x01	; 1
    2e70:	8e 15       	cp	r24, r14
    2e72:	9f 05       	cpc	r25, r15
    2e74:	8c f3       	brlt	.-30     	; 0x2e58 <display_vprintf+0x2cc>
    2e76:	00 e0       	ldi	r16, 0x00	; 0
    2e78:	2f ef       	ldi	r18, 0xFF	; 255
    2e7a:	3f ef       	ldi	r19, 0xFF	; 255
    2e7c:	a9 01       	movw	r20, r18
    2e7e:	be 01       	movw	r22, r28
    2e80:	6f 5f       	subi	r22, 0xFF	; 255
    2e82:	7f 4f       	sbci	r23, 0xFF	; 255
    2e84:	80 91 f5 2c 	lds	r24, 0x2CF5	; 0x802cf5 <displayLineQueue>
    2e88:	90 91 f6 2c 	lds	r25, 0x2CF6	; 0x802cf6 <displayLineQueue+0x1>
    2e8c:	0e 94 11 07 	call	0xe22	; 0xe22 <xQueueGenericSend>
    2e90:	c7 01       	movw	r24, r14
    2e92:	66 96       	adiw	r28, 0x16	; 22
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	ff 90       	pop	r15
    2ea2:	ef 90       	pop	r14
    2ea4:	df 90       	pop	r13
    2ea6:	cf 90       	pop	r12
    2ea8:	bf 90       	pop	r11
    2eaa:	9f 90       	pop	r9
    2eac:	8f 90       	pop	r8
    2eae:	7f 90       	pop	r7
    2eb0:	6f 90       	pop	r6
    2eb2:	08 95       	ret

00002eb4 <__vector_108>:
    2eb4:	1f 92       	push	r1
    2eb6:	0f 92       	push	r0
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	0f 92       	push	r0
    2ebc:	11 24       	eor	r1, r1
    2ebe:	0b b6       	in	r0, 0x3b	; 59
    2ec0:	0f 92       	push	r0
    2ec2:	2f 93       	push	r18
    2ec4:	3f 93       	push	r19
    2ec6:	4f 93       	push	r20
    2ec8:	5f 93       	push	r21
    2eca:	6f 93       	push	r22
    2ecc:	7f 93       	push	r23
    2ece:	8f 93       	push	r24
    2ed0:	9f 93       	push	r25
    2ed2:	af 93       	push	r26
    2ed4:	bf 93       	push	r27
    2ed6:	ef 93       	push	r30
    2ed8:	ff 93       	push	r31
    2eda:	cf 93       	push	r28
    2edc:	df 93       	push	r29
    2ede:	1f 92       	push	r1
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
    2ee4:	19 82       	std	Y+1, r1	; 0x01
    2ee6:	9e 01       	movw	r18, r28
    2ee8:	2f 5f       	subi	r18, 0xFF	; 255
    2eea:	3f 4f       	sbci	r19, 0xFF	; 255
    2eec:	41 e0       	ldi	r20, 0x01	; 1
    2eee:	50 e0       	ldi	r21, 0x00	; 0
    2ef0:	60 e0       	ldi	r22, 0x00	; 0
    2ef2:	70 e0       	ldi	r23, 0x00	; 0
    2ef4:	80 91 f7 2c 	lds	r24, 0x2CF7	; 0x802cf7 <egDisplayTiming>
    2ef8:	90 91 f8 2c 	lds	r25, 0x2CF8	; 0x802cf8 <egDisplayTiming+0x1>
    2efc:	0e 94 3d 03 	call	0x67a	; 0x67a <xEventGroupSetBitsFromISR>
    2f00:	60 e0       	ldi	r22, 0x00	; 0
    2f02:	80 e0       	ldi	r24, 0x00	; 0
    2f04:	9b e0       	ldi	r25, 0x0B	; 11
    2f06:	0e 94 8e 01 	call	0x31c	; 0x31c <TC0_ConfigClockSource>
    2f0a:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7deb06>
    2f0e:	0f 90       	pop	r0
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	ff 91       	pop	r31
    2f16:	ef 91       	pop	r30
    2f18:	bf 91       	pop	r27
    2f1a:	af 91       	pop	r26
    2f1c:	9f 91       	pop	r25
    2f1e:	8f 91       	pop	r24
    2f20:	7f 91       	pop	r23
    2f22:	6f 91       	pop	r22
    2f24:	5f 91       	pop	r21
    2f26:	4f 91       	pop	r20
    2f28:	3f 91       	pop	r19
    2f2a:	2f 91       	pop	r18
    2f2c:	0f 90       	pop	r0
    2f2e:	0b be       	out	0x3b, r0	; 59
    2f30:	0f 90       	pop	r0
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	0f 90       	pop	r0
    2f36:	1f 90       	pop	r1
    2f38:	18 95       	reti

00002f3a <delayUS>:
    2f3a:	cf 92       	push	r12
    2f3c:	df 92       	push	r13
    2f3e:	ef 92       	push	r14
    2f40:	ff 92       	push	r15
    2f42:	0f 93       	push	r16
    2f44:	6b 01       	movw	r12, r22
    2f46:	7c 01       	movw	r14, r24
    2f48:	82 e0       	ldi	r24, 0x02	; 2
    2f4a:	c8 16       	cp	r12, r24
    2f4c:	d1 04       	cpc	r13, r1
    2f4e:	e1 04       	cpc	r14, r1
    2f50:	f1 04       	cpc	r15, r1
    2f52:	28 f4       	brcc	.+10     	; 0x2f5e <delayUS+0x24>
    2f54:	c1 2c       	mov	r12, r1
    2f56:	d1 2c       	mov	r13, r1
    2f58:	76 01       	movw	r14, r12
    2f5a:	68 94       	set
    2f5c:	c1 f8       	bld	r12, 1
    2f5e:	e0 e0       	ldi	r30, 0x00	; 0
    2f60:	fb e0       	ldi	r31, 0x0B	; 11
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	86 83       	std	Z+6, r24	; 0x06
    2f66:	10 a2       	std	Z+32, r1	; 0x20
    2f68:	11 a2       	std	Z+33, r1	; 0x21
    2f6a:	60 e0       	ldi	r22, 0x00	; 0
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	9b e0       	ldi	r25, 0x0B	; 11
    2f70:	0e 94 94 01 	call	0x328	; 0x328 <TC0_ConfigWGM>
    2f74:	8e ef       	ldi	r24, 0xFE	; 254
    2f76:	c8 16       	cp	r12, r24
    2f78:	8f ef       	ldi	r24, 0xFF	; 255
    2f7a:	d8 06       	cpc	r13, r24
    2f7c:	e1 04       	cpc	r14, r1
    2f7e:	f1 04       	cpc	r15, r1
    2f80:	70 f4       	brcc	.+28     	; 0x2f9e <delayUS+0x64>
    2f82:	f6 94       	lsr	r15
    2f84:	e7 94       	ror	r14
    2f86:	d7 94       	ror	r13
    2f88:	c7 94       	ror	r12
    2f8a:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7deb26>
    2f8e:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x7deb27>
    2f92:	65 e0       	ldi	r22, 0x05	; 5
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	9b e0       	ldi	r25, 0x0B	; 11
    2f98:	0e 94 8e 01 	call	0x31c	; 0x31c <TC0_ConfigClockSource>
    2f9c:	19 c0       	rjmp	.+50     	; 0x2fd0 <delayUS+0x96>
    2f9e:	80 e4       	ldi	r24, 0x40	; 64
    2fa0:	c8 16       	cp	r12, r24
    2fa2:	82 e4       	ldi	r24, 0x42	; 66
    2fa4:	d8 06       	cpc	r13, r24
    2fa6:	8f e0       	ldi	r24, 0x0F	; 15
    2fa8:	e8 06       	cpc	r14, r24
    2faa:	f1 04       	cpc	r15, r1
    2fac:	88 f4       	brcc	.+34     	; 0x2fd0 <delayUS+0x96>
    2fae:	68 94       	set
    2fb0:	14 f8       	bld	r1, 4
    2fb2:	f6 94       	lsr	r15
    2fb4:	e7 94       	ror	r14
    2fb6:	d7 94       	ror	r13
    2fb8:	c7 94       	ror	r12
    2fba:	16 94       	lsr	r1
    2fbc:	d1 f7       	brne	.-12     	; 0x2fb2 <delayUS+0x78>
    2fbe:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7deb26>
    2fc2:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x7deb27>
    2fc6:	67 e0       	ldi	r22, 0x07	; 7
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	9b e0       	ldi	r25, 0x0B	; 11
    2fcc:	0e 94 8e 01 	call	0x31c	; 0x31c <TC0_ConfigClockSource>
    2fd0:	0f 2e       	mov	r0, r31
    2fd2:	f4 ef       	ldi	r31, 0xF4	; 244
    2fd4:	cf 2e       	mov	r12, r31
    2fd6:	dd 24       	eor	r13, r13
    2fd8:	d3 94       	inc	r13
    2fda:	e1 2c       	mov	r14, r1
    2fdc:	f1 2c       	mov	r15, r1
    2fde:	f0 2d       	mov	r31, r0
    2fe0:	00 e0       	ldi	r16, 0x00	; 0
    2fe2:	21 e0       	ldi	r18, 0x01	; 1
    2fe4:	41 e0       	ldi	r20, 0x01	; 1
    2fe6:	50 e0       	ldi	r21, 0x00	; 0
    2fe8:	60 e0       	ldi	r22, 0x00	; 0
    2fea:	70 e0       	ldi	r23, 0x00	; 0
    2fec:	80 91 f7 2c 	lds	r24, 0x2CF7	; 0x802cf7 <egDisplayTiming>
    2ff0:	90 91 f8 2c 	lds	r25, 0x2CF8	; 0x802cf8 <egDisplayTiming+0x1>
    2ff4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <xEventGroupWaitBits>
    2ff8:	0f 91       	pop	r16
    2ffa:	ff 90       	pop	r15
    2ffc:	ef 90       	pop	r14
    2ffe:	df 90       	pop	r13
    3000:	cf 90       	pop	r12
    3002:	08 95       	ret

00003004 <setPort>:
    3004:	82 95       	swap	r24
    3006:	80 7f       	andi	r24, 0xF0	; 240
    3008:	e0 e0       	ldi	r30, 0x00	; 0
    300a:	f6 e0       	ldi	r31, 0x06	; 6
    300c:	94 81       	ldd	r25, Z+4	; 0x04
    300e:	28 2f       	mov	r18, r24
    3010:	2f 60       	ori	r18, 0x0F	; 15
    3012:	92 23       	and	r25, r18
    3014:	94 83       	std	Z+4, r25	; 0x04
    3016:	94 81       	ldd	r25, Z+4	; 0x04
    3018:	89 2b       	or	r24, r25
    301a:	84 83       	std	Z+4, r24	; 0x04
    301c:	08 95       	ret

0000301e <setRS>:
    301e:	88 23       	and	r24, r24
    3020:	21 f0       	breq	.+8      	; 0x302a <setRS+0xc>
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    3028:	08 95       	ret
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    3030:	08 95       	ret

00003032 <setRW>:
    3032:	88 23       	and	r24, r24
    3034:	21 f0       	breq	.+8      	; 0x303e <setRW+0xc>
    3036:	82 e0       	ldi	r24, 0x02	; 2
    3038:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    303c:	08 95       	ret
    303e:	82 e0       	ldi	r24, 0x02	; 2
    3040:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    3044:	08 95       	ret

00003046 <setE>:
    3046:	88 23       	and	r24, r24
    3048:	21 f0       	breq	.+8      	; 0x3052 <setE+0xc>
    304a:	84 e0       	ldi	r24, 0x04	; 4
    304c:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    3050:	08 95       	ret
    3052:	84 e0       	ldi	r24, 0x04	; 4
    3054:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    3058:	08 95       	ret

0000305a <Nybble>:
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	0e 94 23 18 	call	0x3046	; 0x3046 <setE>
    3060:	61 e0       	ldi	r22, 0x01	; 1
    3062:	70 e0       	ldi	r23, 0x00	; 0
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <delayUS>
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	0e 94 23 18 	call	0x3046	; 0x3046 <setE>
    3072:	08 95       	ret

00003074 <command>:
    3074:	cf 93       	push	r28
    3076:	c8 2f       	mov	r28, r24
    3078:	82 95       	swap	r24
    307a:	8f 70       	andi	r24, 0x0F	; 15
    307c:	0e 94 02 18 	call	0x3004	; 0x3004 <setPort>
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	0e 94 0f 18 	call	0x301e	; 0x301e <setRS>
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	0e 94 19 18 	call	0x3032	; 0x3032 <setRW>
    308c:	0e 94 2d 18 	call	0x305a	; 0x305a <Nybble>
    3090:	8c 2f       	mov	r24, r28
    3092:	8f 70       	andi	r24, 0x0F	; 15
    3094:	0e 94 02 18 	call	0x3004	; 0x3004 <setPort>
    3098:	0e 94 2d 18 	call	0x305a	; 0x305a <Nybble>
    309c:	cf 91       	pop	r28
    309e:	08 95       	ret

000030a0 <write>:
    30a0:	cf 93       	push	r28
    30a2:	c8 2f       	mov	r28, r24
    30a4:	82 95       	swap	r24
    30a6:	8f 70       	andi	r24, 0x0F	; 15
    30a8:	0e 94 02 18 	call	0x3004	; 0x3004 <setPort>
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	0e 94 0f 18 	call	0x301e	; 0x301e <setRS>
    30b2:	80 e0       	ldi	r24, 0x00	; 0
    30b4:	0e 94 19 18 	call	0x3032	; 0x3032 <setRW>
    30b8:	0e 94 2d 18 	call	0x305a	; 0x305a <Nybble>
    30bc:	8c 2f       	mov	r24, r28
    30be:	8f 70       	andi	r24, 0x0F	; 15
    30c0:	0e 94 02 18 	call	0x3004	; 0x3004 <setPort>
    30c4:	0e 94 2d 18 	call	0x305a	; 0x305a <Nybble>
    30c8:	cf 91       	pop	r28
    30ca:	08 95       	ret

000030cc <vInitDisplay>:
 }
 
 void vInitDisplay() {
    30cc:	ef 92       	push	r14
    30ce:	ff 92       	push	r15
    30d0:	0f 93       	push	r16
	PORTA.DIRSET = PIN4_bm;
    30d2:	e0 e0       	ldi	r30, 0x00	; 0
    30d4:	f6 e0       	ldi	r31, 0x06	; 6
    30d6:	80 e1       	ldi	r24, 0x10	; 16
    30d8:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN5_bm;
    30da:	80 e2       	ldi	r24, 0x20	; 32
    30dc:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN6_bm;
    30de:	80 e4       	ldi	r24, 0x40	; 64
    30e0:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN7_bm;
    30e2:	80 e8       	ldi	r24, 0x80	; 128
    30e4:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET = PIN0_bm;
    30e6:	a0 e6       	ldi	r26, 0x60	; 96
    30e8:	b6 e0       	ldi	r27, 0x06	; 6
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	11 96       	adiw	r26, 0x01	; 1
    30ee:	8c 93       	st	X, r24
    30f0:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN1_bm;
    30f2:	82 e0       	ldi	r24, 0x02	; 2
    30f4:	11 96       	adiw	r26, 0x01	; 1
    30f6:	8c 93       	st	X, r24
    30f8:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN2_bm;
    30fa:	84 e0       	ldi	r24, 0x04	; 4
    30fc:	11 96       	adiw	r26, 0x01	; 1
    30fe:	8c 93       	st	X, r24
    3100:	11 97       	sbiw	r26, 0x01	; 1
	PORTA.OUT &= 0x0F;
    3102:	84 81       	ldd	r24, Z+4	; 0x04
    3104:	8f 70       	andi	r24, 0x0F	; 15
    3106:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUT &= 0xF8;
    3108:	14 96       	adiw	r26, 0x04	; 4
    310a:	8c 91       	ld	r24, X
    310c:	14 97       	sbiw	r26, 0x04	; 4
    310e:	88 7f       	andi	r24, 0xF8	; 248
    3110:	14 96       	adiw	r26, 0x04	; 4
    3112:	8c 93       	st	X, r24

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    3114:	40 e0       	ldi	r20, 0x00	; 0
    3116:	66 e1       	ldi	r22, 0x16	; 22
    3118:	88 e0       	ldi	r24, 0x08	; 8
    311a:	0e 94 e7 06 	call	0xdce	; 0xdce <xQueueGenericCreate>
    311e:	80 93 f5 2c 	sts	0x2CF5, r24	; 0x802cf5 <displayLineQueue>
    3122:	90 93 f6 2c 	sts	0x2CF6, r25	; 0x802cf6 <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    3126:	0e 94 cf 01 	call	0x39e	; 0x39e <xEventGroupCreate>
    312a:	80 93 f7 2c 	sts	0x2CF7, r24	; 0x802cf7 <egDisplayTiming>
    312e:	90 93 f8 2c 	sts	0x2CF8, r25	; 0x802cf8 <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 1, NULL);	
    3132:	e1 2c       	mov	r14, r1
    3134:	f1 2c       	mov	r15, r1
    3136:	01 e0       	ldi	r16, 0x01	; 1
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	4e e5       	ldi	r20, 0x5E	; 94
    313e:	51 e0       	ldi	r21, 0x01	; 1
    3140:	63 e6       	ldi	r22, 0x63	; 99
    3142:	70 e2       	ldi	r23, 0x20	; 32
    3144:	8e ef       	ldi	r24, 0xFE	; 254
    3146:	98 e1       	ldi	r25, 0x18	; 24
    3148:	0e 94 75 0a 	call	0x14ea	; 0x14ea <xTaskCreate>
 }
    314c:	0f 91       	pop	r16
    314e:	ff 90       	pop	r15
    3150:	ef 90       	pop	r14
    3152:	08 95       	ret

00003154 <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
	 switch(line) {
    3154:	81 30       	cpi	r24, 0x01	; 1
    3156:	91 05       	cpc	r25, r1
    3158:	79 f0       	breq	.+30     	; 0x3178 <_displaySetPos+0x24>
    315a:	1c f4       	brge	.+6      	; 0x3162 <_displaySetPos+0xe>
    315c:	89 2b       	or	r24, r25
    315e:	39 f0       	breq	.+14     	; 0x316e <_displaySetPos+0x1a>
    3160:	19 c0       	rjmp	.+50     	; 0x3194 <_displaySetPos+0x40>
    3162:	82 30       	cpi	r24, 0x02	; 2
    3164:	91 05       	cpc	r25, r1
    3166:	69 f0       	breq	.+26     	; 0x3182 <_displaySetPos+0x2e>
    3168:	03 97       	sbiw	r24, 0x03	; 3
    316a:	81 f0       	breq	.+32     	; 0x318c <_displaySetPos+0x38>
    316c:	13 c0       	rjmp	.+38     	; 0x3194 <_displaySetPos+0x40>
		 case 0:
		 command(0x80 + 0x00 + pos);
    316e:	80 e8       	ldi	r24, 0x80	; 128
    3170:	86 0f       	add	r24, r22
    3172:	0e 94 3a 18 	call	0x3074	; 0x3074 <command>
		 break;
    3176:	0e c0       	rjmp	.+28     	; 0x3194 <_displaySetPos+0x40>
		 case 1:
		 command(0x80 + 0x40 + pos);
    3178:	80 ec       	ldi	r24, 0xC0	; 192
    317a:	86 0f       	add	r24, r22
    317c:	0e 94 3a 18 	call	0x3074	; 0x3074 <command>
		 break;
    3180:	09 c0       	rjmp	.+18     	; 0x3194 <_displaySetPos+0x40>
		 case 2:
		 command(0x80 + 0x14 + pos);
    3182:	84 e9       	ldi	r24, 0x94	; 148
    3184:	86 0f       	add	r24, r22
    3186:	0e 94 3a 18 	call	0x3074	; 0x3074 <command>
		 break;
    318a:	04 c0       	rjmp	.+8      	; 0x3194 <_displaySetPos+0x40>
		 case 3:
		 command(0x80 + 0x54 + pos);
    318c:	84 ed       	ldi	r24, 0xD4	; 212
    318e:	86 0f       	add	r24, r22
    3190:	0e 94 3a 18 	call	0x3074	; 0x3074 <command>
		 break;
	 }
	 delayUS(39);
    3194:	67 e2       	ldi	r22, 0x27	; 39
    3196:	70 e0       	ldi	r23, 0x00	; 0
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <delayUS>
    31a0:	08 95       	ret

000031a2 <_displayWriteChar>:
 }

 void _displayWriteChar(char c) {
	 write(c);
    31a2:	0e 94 50 18 	call	0x30a0	; 0x30a0 <write>
	 delayUS(43);
    31a6:	6b e2       	ldi	r22, 0x2B	; 43
    31a8:	70 e0       	ldi	r23, 0x00	; 0
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <delayUS>
    31b2:	08 95       	ret

000031b4 <_displayWriteString>:
 }
 
 void _displayWriteString(char* s) {
    31b4:	0f 93       	push	r16
    31b6:	1f 93       	push	r17
    31b8:	cf 93       	push	r28
    31ba:	df 93       	push	r29
    31bc:	8c 01       	movw	r16, r24
	 for(int i = 0; i < 20; i++) {
    31be:	c0 e0       	ldi	r28, 0x00	; 0
    31c0:	d0 e0       	ldi	r29, 0x00	; 0
    31c2:	09 c0       	rjmp	.+18     	; 0x31d6 <_displayWriteString+0x22>
		 if(s[i] == '\0') {
    31c4:	f8 01       	movw	r30, r16
    31c6:	ec 0f       	add	r30, r28
    31c8:	fd 1f       	adc	r31, r29
    31ca:	80 81       	ld	r24, Z
    31cc:	88 23       	and	r24, r24
    31ce:	31 f0       	breq	.+12     	; 0x31dc <_displayWriteString+0x28>
			 break;
		 }
		 _displayWriteChar(s[i]);
    31d0:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    31d4:	21 96       	adiw	r28, 0x01	; 1
    31d6:	c4 31       	cpi	r28, 0x14	; 20
    31d8:	d1 05       	cpc	r29, r1
    31da:	a4 f3       	brlt	.-24     	; 0x31c4 <_displayWriteString+0x10>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    31dc:	df 91       	pop	r29
    31de:	cf 91       	pop	r28
    31e0:	1f 91       	pop	r17
    31e2:	0f 91       	pop	r16
    31e4:	08 95       	ret

000031e6 <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    31e6:	cf 93       	push	r28
    31e8:	df 93       	push	r29
    31ea:	ea 01       	movw	r28, r20
	 _displaySetPos(line, pos);
    31ec:	0e 94 aa 18 	call	0x3154	; 0x3154 <_displaySetPos>
	 _displayWriteString(s);
    31f0:	ce 01       	movw	r24, r28
    31f2:	0e 94 da 18 	call	0x31b4	; 0x31b4 <_displayWriteString>
 }
    31f6:	df 91       	pop	r29
    31f8:	cf 91       	pop	r28
    31fa:	08 95       	ret

000031fc <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    31fc:	cf 93       	push	r28
    31fe:	df 93       	push	r29
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
    3204:	c6 56       	subi	r28, 0x66	; 102
    3206:	d1 09       	sbc	r29, r1
    3208:	cd bf       	out	0x3d, r28	; 61
    320a:	de bf       	out	0x3e, r29	; 62
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	19 c0       	rjmp	.+50     	; 0x3244 <vDisplayUpdateTask+0x48>
		for(int j = 0; j < 20; j ++) {
			displayLines[i][j] = 0x20;
    3212:	44 e1       	ldi	r20, 0x14	; 20
    3214:	48 9f       	mul	r20, r24
    3216:	f0 01       	movw	r30, r0
    3218:	49 9f       	mul	r20, r25
    321a:	f0 0d       	add	r31, r0
    321c:	11 24       	eor	r1, r1
    321e:	41 e0       	ldi	r20, 0x01	; 1
    3220:	50 e0       	ldi	r21, 0x00	; 0
    3222:	4c 0f       	add	r20, r28
    3224:	5d 1f       	adc	r21, r29
    3226:	e4 0f       	add	r30, r20
    3228:	f5 1f       	adc	r31, r21
    322a:	e2 0f       	add	r30, r18
    322c:	f3 1f       	adc	r31, r19
    322e:	40 e2       	ldi	r20, 0x20	; 32
    3230:	40 83       	st	Z, r20
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    3232:	2f 5f       	subi	r18, 0xFF	; 255
    3234:	3f 4f       	sbci	r19, 0xFF	; 255
    3236:	02 c0       	rjmp	.+4      	; 0x323c <vDisplayUpdateTask+0x40>
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	24 31       	cpi	r18, 0x14	; 20
    323e:	31 05       	cpc	r19, r1
    3240:	44 f3       	brlt	.-48     	; 0x3212 <vDisplayUpdateTask+0x16>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    3242:	01 96       	adiw	r24, 0x01	; 1
    3244:	84 30       	cpi	r24, 0x04	; 4
    3246:	91 05       	cpc	r25, r1
    3248:	bc f3       	brlt	.-18     	; 0x3238 <vDisplayUpdateTask+0x3c>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    324a:	60 e4       	ldi	r22, 0x40	; 64
    324c:	7c e9       	ldi	r23, 0x9C	; 156
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <delayUS>
	 setPort(0x03);
    3256:	83 e0       	ldi	r24, 0x03	; 3
    3258:	0e 94 02 18 	call	0x3004	; 0x3004 <setPort>
	 delayUS(5000);
    325c:	68 e8       	ldi	r22, 0x88	; 136
    325e:	73 e1       	ldi	r23, 0x13	; 19
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <delayUS>
	 Nybble();
    3268:	0e 94 2d 18 	call	0x305a	; 0x305a <Nybble>
	 delayUS(160);
    326c:	60 ea       	ldi	r22, 0xA0	; 160
    326e:	70 e0       	ldi	r23, 0x00	; 0
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <delayUS>
	 Nybble();
    3278:	0e 94 2d 18 	call	0x305a	; 0x305a <Nybble>
	 delayUS(160);
    327c:	60 ea       	ldi	r22, 0xA0	; 160
    327e:	70 e0       	ldi	r23, 0x00	; 0
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <delayUS>
	 Nybble();
    3288:	0e 94 2d 18 	call	0x305a	; 0x305a <Nybble>
	 delayUS(160);
    328c:	60 ea       	ldi	r22, 0xA0	; 160
    328e:	70 e0       	ldi	r23, 0x00	; 0
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <delayUS>
	 setPort(0x02);
    3298:	82 e0       	ldi	r24, 0x02	; 2
    329a:	0e 94 02 18 	call	0x3004	; 0x3004 <setPort>
	 Nybble();
    329e:	0e 94 2d 18 	call	0x305a	; 0x305a <Nybble>
	 command(0x28);
    32a2:	88 e2       	ldi	r24, 0x28	; 40
    32a4:	0e 94 3a 18 	call	0x3074	; 0x3074 <command>
	 command(0x10);
    32a8:	80 e1       	ldi	r24, 0x10	; 16
    32aa:	0e 94 3a 18 	call	0x3074	; 0x3074 <command>
	 command(0x0C); //Cursor and Blinking off
    32ae:	8c e0       	ldi	r24, 0x0C	; 12
    32b0:	0e 94 3a 18 	call	0x3074	; 0x3074 <command>
	 command(0x06);
    32b4:	86 e0       	ldi	r24, 0x06	; 6
    32b6:	0e 94 3a 18 	call	0x3074	; 0x3074 <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    32ba:	68 ec       	ldi	r22, 0xC8	; 200
    32bc:	70 e0       	ldi	r23, 0x00	; 0
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    32c6:	40 e0       	ldi	r20, 0x00	; 0
    32c8:	50 e0       	ldi	r21, 0x00	; 0
    32ca:	ba 01       	movw	r22, r20
    32cc:	80 91 f7 2c 	lds	r24, 0x2CF7	; 0x802cf7 <egDisplayTiming>
    32d0:	90 91 f8 2c 	lds	r25, 0x2CF8	; 0x802cf8 <egDisplayTiming+0x1>
    32d4:	0e 94 8b 02 	call	0x516	; 0x516 <xEventGroupClearBits>
    32d8:	67 2b       	or	r22, r23
    32da:	68 2b       	or	r22, r24
    32dc:	69 2b       	or	r22, r25
    32de:	09 f4       	brne	.+2      	; 0x32e2 <vDisplayUpdateTask+0xe6>
    32e0:	5f c0       	rjmp	.+190    	; 0x33a0 <vDisplayUpdateTask+0x1a4>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    32e2:	42 e0       	ldi	r20, 0x02	; 2
    32e4:	50 e0       	ldi	r21, 0x00	; 0
    32e6:	60 e0       	ldi	r22, 0x00	; 0
    32e8:	70 e0       	ldi	r23, 0x00	; 0
    32ea:	80 91 f7 2c 	lds	r24, 0x2CF7	; 0x802cf7 <egDisplayTiming>
    32ee:	90 91 f8 2c 	lds	r25, 0x2CF8	; 0x802cf8 <egDisplayTiming+0x1>
    32f2:	0e 94 8b 02 	call	0x516	; 0x516 <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    32f6:	40 e0       	ldi	r20, 0x00	; 0
    32f8:	50 e0       	ldi	r21, 0x00	; 0
    32fa:	19 c0       	rjmp	.+50     	; 0x332e <vDisplayUpdateTask+0x132>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
    32fc:	24 e1       	ldi	r18, 0x14	; 20
    32fe:	24 9f       	mul	r18, r20
    3300:	f0 01       	movw	r30, r0
    3302:	25 9f       	mul	r18, r21
    3304:	f0 0d       	add	r31, r0
    3306:	11 24       	eor	r1, r1
    3308:	21 e0       	ldi	r18, 0x01	; 1
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	2c 0f       	add	r18, r28
    330e:	3d 1f       	adc	r19, r29
    3310:	e2 0f       	add	r30, r18
    3312:	f3 1f       	adc	r31, r19
    3314:	e8 0f       	add	r30, r24
    3316:	f9 1f       	adc	r31, r25
    3318:	20 e2       	ldi	r18, 0x20	; 32
    331a:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    331c:	01 96       	adiw	r24, 0x01	; 1
    331e:	02 c0       	rjmp	.+4      	; 0x3324 <vDisplayUpdateTask+0x128>
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	84 31       	cpi	r24, 0x14	; 20
    3326:	91 05       	cpc	r25, r1
    3328:	4c f3       	brlt	.-46     	; 0x32fc <vDisplayUpdateTask+0x100>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    332a:	4f 5f       	subi	r20, 0xFF	; 255
    332c:	5f 4f       	sbci	r21, 0xFF	; 255
    332e:	44 30       	cpi	r20, 0x04	; 4
    3330:	51 05       	cpc	r21, r1
    3332:	b4 f3       	brlt	.-20     	; 0x3320 <vDisplayUpdateTask+0x124>
    3334:	35 c0       	rjmp	.+106    	; 0x33a0 <vDisplayUpdateTask+0x1a4>
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    3336:	2f ef       	ldi	r18, 0xFF	; 255
    3338:	3f ef       	ldi	r19, 0xFF	; 255
    333a:	a9 01       	movw	r20, r18
    333c:	be 01       	movw	r22, r28
    333e:	6f 5a       	subi	r22, 0xAF	; 175
    3340:	7f 4f       	sbci	r23, 0xFF	; 255
    3342:	80 91 f5 2c 	lds	r24, 0x2CF5	; 0x802cf5 <displayLineQueue>
    3346:	90 91 f6 2c 	lds	r25, 0x2CF6	; 0x802cf6 <displayLineQueue+0x1>
    334a:	0e 94 f5 07 	call	0xfea	; 0xfea <xQueueReceive>
    334e:	88 23       	and	r24, r24
    3350:	39 f1       	breq	.+78     	; 0x33a0 <vDisplayUpdateTask+0x1a4>
    3352:	12 c0       	rjmp	.+36     	; 0x3378 <vDisplayUpdateTask+0x17c>
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    3354:	62 96       	adiw	r28, 0x12	; 18
    3356:	4f ad       	ldd	r20, Y+63	; 0x3f
    3358:	62 97       	sbiw	r28, 0x12	; 18
    335a:	e1 e0       	ldi	r30, 0x01	; 1
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	ec 0f       	add	r30, r28
    3360:	fd 1f       	adc	r31, r29
    3362:	74 e1       	ldi	r23, 0x14	; 20
    3364:	47 9f       	mul	r20, r23
    3366:	e0 0d       	add	r30, r0
    3368:	f1 1d       	adc	r31, r1
    336a:	11 24       	eor	r1, r1
    336c:	e8 0f       	add	r30, r24
    336e:	f9 1f       	adc	r31, r25
    3370:	60 83       	st	Z, r22
					i++;
    3372:	2f 5f       	subi	r18, 0xFF	; 255
    3374:	3f 4f       	sbci	r19, 0xFF	; 255
    3376:	02 c0       	rjmp	.+4      	; 0x337c <vDisplayUpdateTask+0x180>
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    337c:	63 96       	adiw	r28, 0x13	; 19
    337e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3380:	63 97       	sbiw	r28, 0x13	; 19
    3382:	f9 01       	movw	r30, r18
    3384:	e8 0f       	add	r30, r24
    3386:	f1 1d       	adc	r31, r1
    3388:	cf 01       	movw	r24, r30
    338a:	74 97       	sbiw	r30, 0x14	; 20
    338c:	4c f4       	brge	.+18     	; 0x33a0 <vDisplayUpdateTask+0x1a4>
    338e:	e1 e5       	ldi	r30, 0x51	; 81
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	ec 0f       	add	r30, r28
    3394:	fd 1f       	adc	r31, r29
    3396:	e2 0f       	add	r30, r18
    3398:	f3 1f       	adc	r31, r19
    339a:	62 81       	ldd	r22, Z+2	; 0x02
    339c:	61 11       	cpse	r22, r1
    339e:	da cf       	rjmp	.-76     	; 0x3354 <vDisplayUpdateTask+0x158>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    33a0:	80 91 f5 2c 	lds	r24, 0x2CF5	; 0x802cf5 <displayLineQueue>
    33a4:	90 91 f6 2c 	lds	r25, 0x2CF6	; 0x802cf6 <displayLineQueue+0x1>
    33a8:	0e 94 94 08 	call	0x1128	; 0x1128 <uxQueueMessagesWaiting>
    33ac:	81 11       	cpse	r24, r1
    33ae:	c3 cf       	rjmp	.-122    	; 0x3336 <vDisplayUpdateTask+0x13a>
    33b0:	00 e0       	ldi	r16, 0x00	; 0
    33b2:	10 e0       	ldi	r17, 0x00	; 0
    33b4:	13 c0       	rjmp	.+38     	; 0x33dc <vDisplayUpdateTask+0x1e0>
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    33b6:	84 e1       	ldi	r24, 0x14	; 20
    33b8:	80 9f       	mul	r24, r16
    33ba:	a0 01       	movw	r20, r0
    33bc:	81 9f       	mul	r24, r17
    33be:	50 0d       	add	r21, r0
    33c0:	11 24       	eor	r1, r1
    33c2:	21 e0       	ldi	r18, 0x01	; 1
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	2c 0f       	add	r18, r28
    33c8:	3d 1f       	adc	r19, r29
    33ca:	42 0f       	add	r20, r18
    33cc:	53 1f       	adc	r21, r19
    33ce:	60 e0       	ldi	r22, 0x00	; 0
    33d0:	70 e0       	ldi	r23, 0x00	; 0
    33d2:	c8 01       	movw	r24, r16
    33d4:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    33d8:	0f 5f       	subi	r16, 0xFF	; 255
    33da:	1f 4f       	sbci	r17, 0xFF	; 255
    33dc:	04 30       	cpi	r16, 0x04	; 4
    33de:	11 05       	cpc	r17, r1
    33e0:	54 f3       	brlt	.-44     	; 0x33b6 <vDisplayUpdateTask+0x1ba>
    33e2:	6b cf       	rjmp	.-298    	; 0x32ba <vDisplayUpdateTask+0xbe>

000033e4 <vDisplayClear>:
	 }
 }
 

void vDisplayClear() {
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    33e4:	42 e0       	ldi	r20, 0x02	; 2
    33e6:	50 e0       	ldi	r21, 0x00	; 0
    33e8:	60 e0       	ldi	r22, 0x00	; 0
    33ea:	70 e0       	ldi	r23, 0x00	; 0
    33ec:	80 91 f7 2c 	lds	r24, 0x2CF7	; 0x802cf7 <egDisplayTiming>
    33f0:	90 91 f8 2c 	lds	r25, 0x2CF8	; 0x802cf8 <egDisplayTiming+0x1>
    33f4:	0e 94 ac 02 	call	0x558	; 0x558 <xEventGroupSetBits>
    33f8:	08 95       	ret

000033fa <vDisplayWriteStringAtPos>:
}

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    33fa:	cf 93       	push	r28
    33fc:	df 93       	push	r29
    33fe:	cd b7       	in	r28, 0x3d	; 61
    3400:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
    3402:	9e 01       	movw	r18, r28
    3404:	24 5f       	subi	r18, 0xF4	; 244
    3406:	3f 4f       	sbci	r19, 0xFF	; 255
    3408:	4a 85       	ldd	r20, Y+10	; 0x0a
    340a:	5b 85       	ldd	r21, Y+11	; 0x0b
    340c:	68 85       	ldd	r22, Y+8	; 0x08
    340e:	79 85       	ldd	r23, Y+9	; 0x09
    3410:	8e 81       	ldd	r24, Y+6	; 0x06
    3412:	9f 81       	ldd	r25, Y+7	; 0x07
    3414:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <display_vprintf>
	va_end(arg);	
}
    3418:	df 91       	pop	r29
    341a:	cf 91       	pop	r28
    341c:	08 95       	ret

0000341e <i2cControl>:
#define BAUDRATE 400000
#define TWI_BAUD(F_SYS, F_TWI) ((F_SYS / (2 * F_TWI)) - 5)
#define TWI_BAUDSETTING TWI_BAUD(CPU_SPEED, BAUDRATE)

uint8_t i2cControl(uint8_t ack, i2cCmd_t cmd) {
    ack = (ack > 0 ? 1 : 0);
    341e:	91 e0       	ldi	r25, 0x01	; 1
    3420:	81 11       	cpse	r24, r1
    3422:	01 c0       	rjmp	.+2      	; 0x3426 <i2cControl+0x8>
    3424:	90 e0       	ldi	r25, 0x00	; 0
    ack <<= 2;
    3426:	99 0f       	add	r25, r25
    3428:	99 0f       	add	r25, r25
    return ack | (cmd & 0x03);
    342a:	86 2f       	mov	r24, r22
    342c:	83 70       	andi	r24, 0x03	; 3
}
    342e:	89 2b       	or	r24, r25
    3430:	08 95       	ret

00003432 <initI2C>:

void initI2C(void) {
    PORTC.DIRSET = 0x03;
    3432:	e0 e4       	ldi	r30, 0x40	; 64
    3434:	f6 e0       	ldi	r31, 0x06	; 6
    3436:	83 e0       	ldi	r24, 0x03	; 3
    3438:	81 83       	std	Z+1, r24	; 0x01
    PORTC.OUT = 0x03;
    343a:	84 83       	std	Z+4, r24	; 0x04
    TWIC.MASTER.CTRLC = i2cControl(1, NOACT);
    343c:	60 e0       	ldi	r22, 0x00	; 0
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	0e 94 0f 1a 	call	0x341e	; 0x341e <i2cControl>
    3444:	e0 e8       	ldi	r30, 0x80	; 128
    3446:	f4 e0       	ldi	r31, 0x04	; 4
    3448:	83 83       	std	Z+3, r24	; 0x03
    TWIC.MASTER.BAUD = TWI_BAUDSETTING;
    344a:	83 e2       	ldi	r24, 0x23	; 35
    344c:	85 83       	std	Z+5, r24	; 0x05
    TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    344e:	88 e0       	ldi	r24, 0x08	; 8
    3450:	81 83       	std	Z+1, r24	; 0x01
    TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	84 83       	std	Z+4, r24	; 0x04
    3456:	08 95       	ret

00003458 <i2cRead>:
}

void i2cRead(uint8_t add, uint8_t reg, uint8_t n, uint8_t* data) {
    3458:	ff 92       	push	r15
    345a:	0f 93       	push	r16
    345c:	1f 93       	push	r17
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	f4 2e       	mov	r15, r20
    3464:	89 01       	movw	r16, r18
    TWIC.MASTER.ADDR = add;
    3466:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7de486>
    while (!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    346a:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7de484>
    346e:	96 ff       	sbrs	r25, 6
    3470:	fc cf       	rjmp	.-8      	; 0x346a <i2cRead+0x12>
    TWIC.MASTER.DATA = reg;
    3472:	e0 e8       	ldi	r30, 0x80	; 128
    3474:	f4 e0       	ldi	r31, 0x04	; 4
    3476:	67 83       	std	Z+7, r22	; 0x07
    TWIC.MASTER.ADDR = (add | 0x01);
    3478:	81 60       	ori	r24, 0x01	; 1
    347a:	86 83       	std	Z+6, r24	; 0x06
    TWIC.MASTER.CTRLC = i2cControl((n > 1 ? 1 : 0), START);
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	8f 15       	cp	r24, r15
    3480:	08 f0       	brcs	.+2      	; 0x3484 <i2cRead+0x2c>
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	61 e0       	ldi	r22, 0x01	; 1
    3486:	0e 94 0f 1a 	call	0x341e	; 0x341e <i2cControl>
    348a:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7de483>
    for (int i = 0; i < n; i++) {
    348e:	c0 e0       	ldi	r28, 0x00	; 0
    3490:	d0 e0       	ldi	r29, 0x00	; 0
    3492:	1c c0       	rjmp	.+56     	; 0x34cc <i2cRead+0x74>
        while (!(TWIC.MASTER.STATUS & TWI_MASTER_RIF_bm));
    3494:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7de484>
    3498:	88 23       	and	r24, r24
    349a:	e4 f7       	brge	.-8      	; 0x3494 <i2cRead+0x3c>
        data[i] = TWIC.MASTER.DATA;
    349c:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <__TEXT_REGION_LENGTH__+0x7de487>
    34a0:	f8 01       	movw	r30, r16
    34a2:	ec 0f       	add	r30, r28
    34a4:	fd 1f       	adc	r31, r29
    34a6:	80 83       	st	Z, r24
        TWIC.MASTER.CTRLC = i2cControl((i >= n - 1 ? 1 : 0), (i >= n - 1 ? STOP : BYTEREC));
    34a8:	21 50       	subi	r18, 0x01	; 1
    34aa:	31 09       	sbc	r19, r1
    34ac:	c2 17       	cp	r28, r18
    34ae:	d3 07       	cpc	r29, r19
    34b0:	14 f0       	brlt	.+4      	; 0x34b6 <i2cRead+0x5e>
    34b2:	63 e0       	ldi	r22, 0x03	; 3
    34b4:	01 c0       	rjmp	.+2      	; 0x34b8 <i2cRead+0x60>
    34b6:	62 e0       	ldi	r22, 0x02	; 2
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	c2 17       	cp	r28, r18
    34bc:	d3 07       	cpc	r29, r19
    34be:	0c f4       	brge	.+2      	; 0x34c2 <i2cRead+0x6a>
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	0e 94 0f 1a 	call	0x341e	; 0x341e <i2cControl>
    34c6:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <__TEXT_REGION_LENGTH__+0x7de483>
    TWIC.MASTER.ADDR = add;
    while (!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    TWIC.MASTER.DATA = reg;
    TWIC.MASTER.ADDR = (add | 0x01);
    TWIC.MASTER.CTRLC = i2cControl((n > 1 ? 1 : 0), START);
    for (int i = 0; i < n; i++) {
    34ca:	21 96       	adiw	r28, 0x01	; 1
    34cc:	2f 2d       	mov	r18, r15
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	c2 17       	cp	r28, r18
    34d2:	d3 07       	cpc	r29, r19
    34d4:	fc f2       	brlt	.-66     	; 0x3494 <i2cRead+0x3c>
        while (!(TWIC.MASTER.STATUS & TWI_MASTER_RIF_bm));
        data[i] = TWIC.MASTER.DATA;
        TWIC.MASTER.CTRLC = i2cControl((i >= n - 1 ? 1 : 0), (i >= n - 1 ? STOP : BYTEREC));
    }
}
    34d6:	df 91       	pop	r29
    34d8:	cf 91       	pop	r28
    34da:	1f 91       	pop	r17
    34dc:	0f 91       	pop	r16
    34de:	ff 90       	pop	r15
    34e0:	08 95       	ret

000034e2 <__subsf3>:
    34e2:	50 58       	subi	r21, 0x80	; 128

000034e4 <__addsf3>:
    34e4:	bb 27       	eor	r27, r27
    34e6:	aa 27       	eor	r26, r26
    34e8:	0e 94 89 1a 	call	0x3512	; 0x3512 <__addsf3x>
    34ec:	0c 94 03 1c 	jmp	0x3806	; 0x3806 <__fp_round>
    34f0:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__fp_pscA>
    34f4:	38 f0       	brcs	.+14     	; 0x3504 <__addsf3+0x20>
    34f6:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__fp_pscB>
    34fa:	20 f0       	brcs	.+8      	; 0x3504 <__addsf3+0x20>
    34fc:	39 f4       	brne	.+14     	; 0x350c <__addsf3+0x28>
    34fe:	9f 3f       	cpi	r25, 0xFF	; 255
    3500:	19 f4       	brne	.+6      	; 0x3508 <__addsf3+0x24>
    3502:	26 f4       	brtc	.+8      	; 0x350c <__addsf3+0x28>
    3504:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__fp_nan>
    3508:	0e f4       	brtc	.+2      	; 0x350c <__addsf3+0x28>
    350a:	e0 95       	com	r30
    350c:	e7 fb       	bst	r30, 7
    350e:	0c 94 ec 1b 	jmp	0x37d8	; 0x37d8 <__fp_inf>

00003512 <__addsf3x>:
    3512:	e9 2f       	mov	r30, r25
    3514:	0e 94 14 1c 	call	0x3828	; 0x3828 <__fp_split3>
    3518:	58 f3       	brcs	.-42     	; 0x34f0 <__addsf3+0xc>
    351a:	ba 17       	cp	r27, r26
    351c:	62 07       	cpc	r22, r18
    351e:	73 07       	cpc	r23, r19
    3520:	84 07       	cpc	r24, r20
    3522:	95 07       	cpc	r25, r21
    3524:	20 f0       	brcs	.+8      	; 0x352e <__addsf3x+0x1c>
    3526:	79 f4       	brne	.+30     	; 0x3546 <__addsf3x+0x34>
    3528:	a6 f5       	brtc	.+104    	; 0x3592 <__addsf3x+0x80>
    352a:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__fp_zero>
    352e:	0e f4       	brtc	.+2      	; 0x3532 <__addsf3x+0x20>
    3530:	e0 95       	com	r30
    3532:	0b 2e       	mov	r0, r27
    3534:	ba 2f       	mov	r27, r26
    3536:	a0 2d       	mov	r26, r0
    3538:	0b 01       	movw	r0, r22
    353a:	b9 01       	movw	r22, r18
    353c:	90 01       	movw	r18, r0
    353e:	0c 01       	movw	r0, r24
    3540:	ca 01       	movw	r24, r20
    3542:	a0 01       	movw	r20, r0
    3544:	11 24       	eor	r1, r1
    3546:	ff 27       	eor	r31, r31
    3548:	59 1b       	sub	r21, r25
    354a:	99 f0       	breq	.+38     	; 0x3572 <__addsf3x+0x60>
    354c:	59 3f       	cpi	r21, 0xF9	; 249
    354e:	50 f4       	brcc	.+20     	; 0x3564 <__addsf3x+0x52>
    3550:	50 3e       	cpi	r21, 0xE0	; 224
    3552:	68 f1       	brcs	.+90     	; 0x35ae <__addsf3x+0x9c>
    3554:	1a 16       	cp	r1, r26
    3556:	f0 40       	sbci	r31, 0x00	; 0
    3558:	a2 2f       	mov	r26, r18
    355a:	23 2f       	mov	r18, r19
    355c:	34 2f       	mov	r19, r20
    355e:	44 27       	eor	r20, r20
    3560:	58 5f       	subi	r21, 0xF8	; 248
    3562:	f3 cf       	rjmp	.-26     	; 0x354a <__addsf3x+0x38>
    3564:	46 95       	lsr	r20
    3566:	37 95       	ror	r19
    3568:	27 95       	ror	r18
    356a:	a7 95       	ror	r26
    356c:	f0 40       	sbci	r31, 0x00	; 0
    356e:	53 95       	inc	r21
    3570:	c9 f7       	brne	.-14     	; 0x3564 <__addsf3x+0x52>
    3572:	7e f4       	brtc	.+30     	; 0x3592 <__addsf3x+0x80>
    3574:	1f 16       	cp	r1, r31
    3576:	ba 0b       	sbc	r27, r26
    3578:	62 0b       	sbc	r22, r18
    357a:	73 0b       	sbc	r23, r19
    357c:	84 0b       	sbc	r24, r20
    357e:	ba f0       	brmi	.+46     	; 0x35ae <__addsf3x+0x9c>
    3580:	91 50       	subi	r25, 0x01	; 1
    3582:	a1 f0       	breq	.+40     	; 0x35ac <__addsf3x+0x9a>
    3584:	ff 0f       	add	r31, r31
    3586:	bb 1f       	adc	r27, r27
    3588:	66 1f       	adc	r22, r22
    358a:	77 1f       	adc	r23, r23
    358c:	88 1f       	adc	r24, r24
    358e:	c2 f7       	brpl	.-16     	; 0x3580 <__addsf3x+0x6e>
    3590:	0e c0       	rjmp	.+28     	; 0x35ae <__addsf3x+0x9c>
    3592:	ba 0f       	add	r27, r26
    3594:	62 1f       	adc	r22, r18
    3596:	73 1f       	adc	r23, r19
    3598:	84 1f       	adc	r24, r20
    359a:	48 f4       	brcc	.+18     	; 0x35ae <__addsf3x+0x9c>
    359c:	87 95       	ror	r24
    359e:	77 95       	ror	r23
    35a0:	67 95       	ror	r22
    35a2:	b7 95       	ror	r27
    35a4:	f7 95       	ror	r31
    35a6:	9e 3f       	cpi	r25, 0xFE	; 254
    35a8:	08 f0       	brcs	.+2      	; 0x35ac <__addsf3x+0x9a>
    35aa:	b0 cf       	rjmp	.-160    	; 0x350c <__addsf3+0x28>
    35ac:	93 95       	inc	r25
    35ae:	88 0f       	add	r24, r24
    35b0:	08 f0       	brcs	.+2      	; 0x35b4 <__addsf3x+0xa2>
    35b2:	99 27       	eor	r25, r25
    35b4:	ee 0f       	add	r30, r30
    35b6:	97 95       	ror	r25
    35b8:	87 95       	ror	r24
    35ba:	08 95       	ret

000035bc <__cmpsf2>:
    35bc:	0e 94 c8 1b 	call	0x3790	; 0x3790 <__fp_cmp>
    35c0:	08 f4       	brcc	.+2      	; 0x35c4 <__cmpsf2+0x8>
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	08 95       	ret

000035c6 <__divsf3>:
    35c6:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <__divsf3x>
    35ca:	0c 94 03 1c 	jmp	0x3806	; 0x3806 <__fp_round>
    35ce:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__fp_pscB>
    35d2:	58 f0       	brcs	.+22     	; 0x35ea <__divsf3+0x24>
    35d4:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__fp_pscA>
    35d8:	40 f0       	brcs	.+16     	; 0x35ea <__divsf3+0x24>
    35da:	29 f4       	brne	.+10     	; 0x35e6 <__divsf3+0x20>
    35dc:	5f 3f       	cpi	r21, 0xFF	; 255
    35de:	29 f0       	breq	.+10     	; 0x35ea <__divsf3+0x24>
    35e0:	0c 94 ec 1b 	jmp	0x37d8	; 0x37d8 <__fp_inf>
    35e4:	51 11       	cpse	r21, r1
    35e6:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__fp_szero>
    35ea:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__fp_nan>

000035ee <__divsf3x>:
    35ee:	0e 94 14 1c 	call	0x3828	; 0x3828 <__fp_split3>
    35f2:	68 f3       	brcs	.-38     	; 0x35ce <__divsf3+0x8>

000035f4 <__divsf3_pse>:
    35f4:	99 23       	and	r25, r25
    35f6:	b1 f3       	breq	.-20     	; 0x35e4 <__divsf3+0x1e>
    35f8:	55 23       	and	r21, r21
    35fa:	91 f3       	breq	.-28     	; 0x35e0 <__divsf3+0x1a>
    35fc:	95 1b       	sub	r25, r21
    35fe:	55 0b       	sbc	r21, r21
    3600:	bb 27       	eor	r27, r27
    3602:	aa 27       	eor	r26, r26
    3604:	62 17       	cp	r22, r18
    3606:	73 07       	cpc	r23, r19
    3608:	84 07       	cpc	r24, r20
    360a:	38 f0       	brcs	.+14     	; 0x361a <__divsf3_pse+0x26>
    360c:	9f 5f       	subi	r25, 0xFF	; 255
    360e:	5f 4f       	sbci	r21, 0xFF	; 255
    3610:	22 0f       	add	r18, r18
    3612:	33 1f       	adc	r19, r19
    3614:	44 1f       	adc	r20, r20
    3616:	aa 1f       	adc	r26, r26
    3618:	a9 f3       	breq	.-22     	; 0x3604 <__divsf3_pse+0x10>
    361a:	35 d0       	rcall	.+106    	; 0x3686 <__divsf3_pse+0x92>
    361c:	0e 2e       	mov	r0, r30
    361e:	3a f0       	brmi	.+14     	; 0x362e <__divsf3_pse+0x3a>
    3620:	e0 e8       	ldi	r30, 0x80	; 128
    3622:	32 d0       	rcall	.+100    	; 0x3688 <__divsf3_pse+0x94>
    3624:	91 50       	subi	r25, 0x01	; 1
    3626:	50 40       	sbci	r21, 0x00	; 0
    3628:	e6 95       	lsr	r30
    362a:	00 1c       	adc	r0, r0
    362c:	ca f7       	brpl	.-14     	; 0x3620 <__divsf3_pse+0x2c>
    362e:	2b d0       	rcall	.+86     	; 0x3686 <__divsf3_pse+0x92>
    3630:	fe 2f       	mov	r31, r30
    3632:	29 d0       	rcall	.+82     	; 0x3686 <__divsf3_pse+0x92>
    3634:	66 0f       	add	r22, r22
    3636:	77 1f       	adc	r23, r23
    3638:	88 1f       	adc	r24, r24
    363a:	bb 1f       	adc	r27, r27
    363c:	26 17       	cp	r18, r22
    363e:	37 07       	cpc	r19, r23
    3640:	48 07       	cpc	r20, r24
    3642:	ab 07       	cpc	r26, r27
    3644:	b0 e8       	ldi	r27, 0x80	; 128
    3646:	09 f0       	breq	.+2      	; 0x364a <__divsf3_pse+0x56>
    3648:	bb 0b       	sbc	r27, r27
    364a:	80 2d       	mov	r24, r0
    364c:	bf 01       	movw	r22, r30
    364e:	ff 27       	eor	r31, r31
    3650:	93 58       	subi	r25, 0x83	; 131
    3652:	5f 4f       	sbci	r21, 0xFF	; 255
    3654:	3a f0       	brmi	.+14     	; 0x3664 <__divsf3_pse+0x70>
    3656:	9e 3f       	cpi	r25, 0xFE	; 254
    3658:	51 05       	cpc	r21, r1
    365a:	78 f0       	brcs	.+30     	; 0x367a <__divsf3_pse+0x86>
    365c:	0c 94 ec 1b 	jmp	0x37d8	; 0x37d8 <__fp_inf>
    3660:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__fp_szero>
    3664:	5f 3f       	cpi	r21, 0xFF	; 255
    3666:	e4 f3       	brlt	.-8      	; 0x3660 <__divsf3_pse+0x6c>
    3668:	98 3e       	cpi	r25, 0xE8	; 232
    366a:	d4 f3       	brlt	.-12     	; 0x3660 <__divsf3_pse+0x6c>
    366c:	86 95       	lsr	r24
    366e:	77 95       	ror	r23
    3670:	67 95       	ror	r22
    3672:	b7 95       	ror	r27
    3674:	f7 95       	ror	r31
    3676:	9f 5f       	subi	r25, 0xFF	; 255
    3678:	c9 f7       	brne	.-14     	; 0x366c <__divsf3_pse+0x78>
    367a:	88 0f       	add	r24, r24
    367c:	91 1d       	adc	r25, r1
    367e:	96 95       	lsr	r25
    3680:	87 95       	ror	r24
    3682:	97 f9       	bld	r25, 7
    3684:	08 95       	ret
    3686:	e1 e0       	ldi	r30, 0x01	; 1
    3688:	66 0f       	add	r22, r22
    368a:	77 1f       	adc	r23, r23
    368c:	88 1f       	adc	r24, r24
    368e:	bb 1f       	adc	r27, r27
    3690:	62 17       	cp	r22, r18
    3692:	73 07       	cpc	r23, r19
    3694:	84 07       	cpc	r24, r20
    3696:	ba 07       	cpc	r27, r26
    3698:	20 f0       	brcs	.+8      	; 0x36a2 <__divsf3_pse+0xae>
    369a:	62 1b       	sub	r22, r18
    369c:	73 0b       	sbc	r23, r19
    369e:	84 0b       	sbc	r24, r20
    36a0:	ba 0b       	sbc	r27, r26
    36a2:	ee 1f       	adc	r30, r30
    36a4:	88 f7       	brcc	.-30     	; 0x3688 <__divsf3_pse+0x94>
    36a6:	e0 95       	com	r30
    36a8:	08 95       	ret

000036aa <__fixsfsi>:
    36aa:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <__fixunssfsi>
    36ae:	68 94       	set
    36b0:	b1 11       	cpse	r27, r1
    36b2:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__fp_szero>
    36b6:	08 95       	ret

000036b8 <__fixunssfsi>:
    36b8:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__fp_splitA>
    36bc:	88 f0       	brcs	.+34     	; 0x36e0 <__fixunssfsi+0x28>
    36be:	9f 57       	subi	r25, 0x7F	; 127
    36c0:	98 f0       	brcs	.+38     	; 0x36e8 <__fixunssfsi+0x30>
    36c2:	b9 2f       	mov	r27, r25
    36c4:	99 27       	eor	r25, r25
    36c6:	b7 51       	subi	r27, 0x17	; 23
    36c8:	b0 f0       	brcs	.+44     	; 0x36f6 <__fixunssfsi+0x3e>
    36ca:	e1 f0       	breq	.+56     	; 0x3704 <__fixunssfsi+0x4c>
    36cc:	66 0f       	add	r22, r22
    36ce:	77 1f       	adc	r23, r23
    36d0:	88 1f       	adc	r24, r24
    36d2:	99 1f       	adc	r25, r25
    36d4:	1a f0       	brmi	.+6      	; 0x36dc <__fixunssfsi+0x24>
    36d6:	ba 95       	dec	r27
    36d8:	c9 f7       	brne	.-14     	; 0x36cc <__fixunssfsi+0x14>
    36da:	14 c0       	rjmp	.+40     	; 0x3704 <__fixunssfsi+0x4c>
    36dc:	b1 30       	cpi	r27, 0x01	; 1
    36de:	91 f0       	breq	.+36     	; 0x3704 <__fixunssfsi+0x4c>
    36e0:	0e 94 36 1c 	call	0x386c	; 0x386c <__fp_zero>
    36e4:	b1 e0       	ldi	r27, 0x01	; 1
    36e6:	08 95       	ret
    36e8:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__fp_zero>
    36ec:	67 2f       	mov	r22, r23
    36ee:	78 2f       	mov	r23, r24
    36f0:	88 27       	eor	r24, r24
    36f2:	b8 5f       	subi	r27, 0xF8	; 248
    36f4:	39 f0       	breq	.+14     	; 0x3704 <__fixunssfsi+0x4c>
    36f6:	b9 3f       	cpi	r27, 0xF9	; 249
    36f8:	cc f3       	brlt	.-14     	; 0x36ec <__fixunssfsi+0x34>
    36fa:	86 95       	lsr	r24
    36fc:	77 95       	ror	r23
    36fe:	67 95       	ror	r22
    3700:	b3 95       	inc	r27
    3702:	d9 f7       	brne	.-10     	; 0x36fa <__fixunssfsi+0x42>
    3704:	3e f4       	brtc	.+14     	; 0x3714 <__fixunssfsi+0x5c>
    3706:	90 95       	com	r25
    3708:	80 95       	com	r24
    370a:	70 95       	com	r23
    370c:	61 95       	neg	r22
    370e:	7f 4f       	sbci	r23, 0xFF	; 255
    3710:	8f 4f       	sbci	r24, 0xFF	; 255
    3712:	9f 4f       	sbci	r25, 0xFF	; 255
    3714:	08 95       	ret

00003716 <__floatunsisf>:
    3716:	e8 94       	clt
    3718:	09 c0       	rjmp	.+18     	; 0x372c <__floatsisf+0x12>

0000371a <__floatsisf>:
    371a:	97 fb       	bst	r25, 7
    371c:	3e f4       	brtc	.+14     	; 0x372c <__floatsisf+0x12>
    371e:	90 95       	com	r25
    3720:	80 95       	com	r24
    3722:	70 95       	com	r23
    3724:	61 95       	neg	r22
    3726:	7f 4f       	sbci	r23, 0xFF	; 255
    3728:	8f 4f       	sbci	r24, 0xFF	; 255
    372a:	9f 4f       	sbci	r25, 0xFF	; 255
    372c:	99 23       	and	r25, r25
    372e:	a9 f0       	breq	.+42     	; 0x375a <__floatsisf+0x40>
    3730:	f9 2f       	mov	r31, r25
    3732:	96 e9       	ldi	r25, 0x96	; 150
    3734:	bb 27       	eor	r27, r27
    3736:	93 95       	inc	r25
    3738:	f6 95       	lsr	r31
    373a:	87 95       	ror	r24
    373c:	77 95       	ror	r23
    373e:	67 95       	ror	r22
    3740:	b7 95       	ror	r27
    3742:	f1 11       	cpse	r31, r1
    3744:	f8 cf       	rjmp	.-16     	; 0x3736 <__floatsisf+0x1c>
    3746:	fa f4       	brpl	.+62     	; 0x3786 <__floatsisf+0x6c>
    3748:	bb 0f       	add	r27, r27
    374a:	11 f4       	brne	.+4      	; 0x3750 <__floatsisf+0x36>
    374c:	60 ff       	sbrs	r22, 0
    374e:	1b c0       	rjmp	.+54     	; 0x3786 <__floatsisf+0x6c>
    3750:	6f 5f       	subi	r22, 0xFF	; 255
    3752:	7f 4f       	sbci	r23, 0xFF	; 255
    3754:	8f 4f       	sbci	r24, 0xFF	; 255
    3756:	9f 4f       	sbci	r25, 0xFF	; 255
    3758:	16 c0       	rjmp	.+44     	; 0x3786 <__floatsisf+0x6c>
    375a:	88 23       	and	r24, r24
    375c:	11 f0       	breq	.+4      	; 0x3762 <__floatsisf+0x48>
    375e:	96 e9       	ldi	r25, 0x96	; 150
    3760:	11 c0       	rjmp	.+34     	; 0x3784 <__floatsisf+0x6a>
    3762:	77 23       	and	r23, r23
    3764:	21 f0       	breq	.+8      	; 0x376e <__floatsisf+0x54>
    3766:	9e e8       	ldi	r25, 0x8E	; 142
    3768:	87 2f       	mov	r24, r23
    376a:	76 2f       	mov	r23, r22
    376c:	05 c0       	rjmp	.+10     	; 0x3778 <__floatsisf+0x5e>
    376e:	66 23       	and	r22, r22
    3770:	71 f0       	breq	.+28     	; 0x378e <__floatsisf+0x74>
    3772:	96 e8       	ldi	r25, 0x86	; 134
    3774:	86 2f       	mov	r24, r22
    3776:	70 e0       	ldi	r23, 0x00	; 0
    3778:	60 e0       	ldi	r22, 0x00	; 0
    377a:	2a f0       	brmi	.+10     	; 0x3786 <__floatsisf+0x6c>
    377c:	9a 95       	dec	r25
    377e:	66 0f       	add	r22, r22
    3780:	77 1f       	adc	r23, r23
    3782:	88 1f       	adc	r24, r24
    3784:	da f7       	brpl	.-10     	; 0x377c <__floatsisf+0x62>
    3786:	88 0f       	add	r24, r24
    3788:	96 95       	lsr	r25
    378a:	87 95       	ror	r24
    378c:	97 f9       	bld	r25, 7
    378e:	08 95       	ret

00003790 <__fp_cmp>:
    3790:	99 0f       	add	r25, r25
    3792:	00 08       	sbc	r0, r0
    3794:	55 0f       	add	r21, r21
    3796:	aa 0b       	sbc	r26, r26
    3798:	e0 e8       	ldi	r30, 0x80	; 128
    379a:	fe ef       	ldi	r31, 0xFE	; 254
    379c:	16 16       	cp	r1, r22
    379e:	17 06       	cpc	r1, r23
    37a0:	e8 07       	cpc	r30, r24
    37a2:	f9 07       	cpc	r31, r25
    37a4:	c0 f0       	brcs	.+48     	; 0x37d6 <__fp_cmp+0x46>
    37a6:	12 16       	cp	r1, r18
    37a8:	13 06       	cpc	r1, r19
    37aa:	e4 07       	cpc	r30, r20
    37ac:	f5 07       	cpc	r31, r21
    37ae:	98 f0       	brcs	.+38     	; 0x37d6 <__fp_cmp+0x46>
    37b0:	62 1b       	sub	r22, r18
    37b2:	73 0b       	sbc	r23, r19
    37b4:	84 0b       	sbc	r24, r20
    37b6:	95 0b       	sbc	r25, r21
    37b8:	39 f4       	brne	.+14     	; 0x37c8 <__fp_cmp+0x38>
    37ba:	0a 26       	eor	r0, r26
    37bc:	61 f0       	breq	.+24     	; 0x37d6 <__fp_cmp+0x46>
    37be:	23 2b       	or	r18, r19
    37c0:	24 2b       	or	r18, r20
    37c2:	25 2b       	or	r18, r21
    37c4:	21 f4       	brne	.+8      	; 0x37ce <__fp_cmp+0x3e>
    37c6:	08 95       	ret
    37c8:	0a 26       	eor	r0, r26
    37ca:	09 f4       	brne	.+2      	; 0x37ce <__fp_cmp+0x3e>
    37cc:	a1 40       	sbci	r26, 0x01	; 1
    37ce:	a6 95       	lsr	r26
    37d0:	8f ef       	ldi	r24, 0xFF	; 255
    37d2:	81 1d       	adc	r24, r1
    37d4:	81 1d       	adc	r24, r1
    37d6:	08 95       	ret

000037d8 <__fp_inf>:
    37d8:	97 f9       	bld	r25, 7
    37da:	9f 67       	ori	r25, 0x7F	; 127
    37dc:	80 e8       	ldi	r24, 0x80	; 128
    37de:	70 e0       	ldi	r23, 0x00	; 0
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	08 95       	ret

000037e4 <__fp_nan>:
    37e4:	9f ef       	ldi	r25, 0xFF	; 255
    37e6:	80 ec       	ldi	r24, 0xC0	; 192
    37e8:	08 95       	ret

000037ea <__fp_pscA>:
    37ea:	00 24       	eor	r0, r0
    37ec:	0a 94       	dec	r0
    37ee:	16 16       	cp	r1, r22
    37f0:	17 06       	cpc	r1, r23
    37f2:	18 06       	cpc	r1, r24
    37f4:	09 06       	cpc	r0, r25
    37f6:	08 95       	ret

000037f8 <__fp_pscB>:
    37f8:	00 24       	eor	r0, r0
    37fa:	0a 94       	dec	r0
    37fc:	12 16       	cp	r1, r18
    37fe:	13 06       	cpc	r1, r19
    3800:	14 06       	cpc	r1, r20
    3802:	05 06       	cpc	r0, r21
    3804:	08 95       	ret

00003806 <__fp_round>:
    3806:	09 2e       	mov	r0, r25
    3808:	03 94       	inc	r0
    380a:	00 0c       	add	r0, r0
    380c:	11 f4       	brne	.+4      	; 0x3812 <__fp_round+0xc>
    380e:	88 23       	and	r24, r24
    3810:	52 f0       	brmi	.+20     	; 0x3826 <__fp_round+0x20>
    3812:	bb 0f       	add	r27, r27
    3814:	40 f4       	brcc	.+16     	; 0x3826 <__fp_round+0x20>
    3816:	bf 2b       	or	r27, r31
    3818:	11 f4       	brne	.+4      	; 0x381e <__fp_round+0x18>
    381a:	60 ff       	sbrs	r22, 0
    381c:	04 c0       	rjmp	.+8      	; 0x3826 <__fp_round+0x20>
    381e:	6f 5f       	subi	r22, 0xFF	; 255
    3820:	7f 4f       	sbci	r23, 0xFF	; 255
    3822:	8f 4f       	sbci	r24, 0xFF	; 255
    3824:	9f 4f       	sbci	r25, 0xFF	; 255
    3826:	08 95       	ret

00003828 <__fp_split3>:
    3828:	57 fd       	sbrc	r21, 7
    382a:	90 58       	subi	r25, 0x80	; 128
    382c:	44 0f       	add	r20, r20
    382e:	55 1f       	adc	r21, r21
    3830:	59 f0       	breq	.+22     	; 0x3848 <__fp_splitA+0x10>
    3832:	5f 3f       	cpi	r21, 0xFF	; 255
    3834:	71 f0       	breq	.+28     	; 0x3852 <__fp_splitA+0x1a>
    3836:	47 95       	ror	r20

00003838 <__fp_splitA>:
    3838:	88 0f       	add	r24, r24
    383a:	97 fb       	bst	r25, 7
    383c:	99 1f       	adc	r25, r25
    383e:	61 f0       	breq	.+24     	; 0x3858 <__fp_splitA+0x20>
    3840:	9f 3f       	cpi	r25, 0xFF	; 255
    3842:	79 f0       	breq	.+30     	; 0x3862 <__fp_splitA+0x2a>
    3844:	87 95       	ror	r24
    3846:	08 95       	ret
    3848:	12 16       	cp	r1, r18
    384a:	13 06       	cpc	r1, r19
    384c:	14 06       	cpc	r1, r20
    384e:	55 1f       	adc	r21, r21
    3850:	f2 cf       	rjmp	.-28     	; 0x3836 <__fp_split3+0xe>
    3852:	46 95       	lsr	r20
    3854:	f1 df       	rcall	.-30     	; 0x3838 <__fp_splitA>
    3856:	08 c0       	rjmp	.+16     	; 0x3868 <__fp_splitA+0x30>
    3858:	16 16       	cp	r1, r22
    385a:	17 06       	cpc	r1, r23
    385c:	18 06       	cpc	r1, r24
    385e:	99 1f       	adc	r25, r25
    3860:	f1 cf       	rjmp	.-30     	; 0x3844 <__fp_splitA+0xc>
    3862:	86 95       	lsr	r24
    3864:	71 05       	cpc	r23, r1
    3866:	61 05       	cpc	r22, r1
    3868:	08 94       	sec
    386a:	08 95       	ret

0000386c <__fp_zero>:
    386c:	e8 94       	clt

0000386e <__fp_szero>:
    386e:	bb 27       	eor	r27, r27
    3870:	66 27       	eor	r22, r22
    3872:	77 27       	eor	r23, r23
    3874:	cb 01       	movw	r24, r22
    3876:	97 f9       	bld	r25, 7
    3878:	08 95       	ret

0000387a <__gesf2>:
    387a:	0e 94 c8 1b 	call	0x3790	; 0x3790 <__fp_cmp>
    387e:	08 f4       	brcc	.+2      	; 0x3882 <__gesf2+0x8>
    3880:	8f ef       	ldi	r24, 0xFF	; 255
    3882:	08 95       	ret

00003884 <__mulsf3>:
    3884:	0e 94 55 1c 	call	0x38aa	; 0x38aa <__mulsf3x>
    3888:	0c 94 03 1c 	jmp	0x3806	; 0x3806 <__fp_round>
    388c:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__fp_pscA>
    3890:	38 f0       	brcs	.+14     	; 0x38a0 <__mulsf3+0x1c>
    3892:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__fp_pscB>
    3896:	20 f0       	brcs	.+8      	; 0x38a0 <__mulsf3+0x1c>
    3898:	95 23       	and	r25, r21
    389a:	11 f0       	breq	.+4      	; 0x38a0 <__mulsf3+0x1c>
    389c:	0c 94 ec 1b 	jmp	0x37d8	; 0x37d8 <__fp_inf>
    38a0:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__fp_nan>
    38a4:	11 24       	eor	r1, r1
    38a6:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__fp_szero>

000038aa <__mulsf3x>:
    38aa:	0e 94 14 1c 	call	0x3828	; 0x3828 <__fp_split3>
    38ae:	70 f3       	brcs	.-36     	; 0x388c <__mulsf3+0x8>

000038b0 <__mulsf3_pse>:
    38b0:	95 9f       	mul	r25, r21
    38b2:	c1 f3       	breq	.-16     	; 0x38a4 <__mulsf3+0x20>
    38b4:	95 0f       	add	r25, r21
    38b6:	50 e0       	ldi	r21, 0x00	; 0
    38b8:	55 1f       	adc	r21, r21
    38ba:	62 9f       	mul	r22, r18
    38bc:	f0 01       	movw	r30, r0
    38be:	72 9f       	mul	r23, r18
    38c0:	bb 27       	eor	r27, r27
    38c2:	f0 0d       	add	r31, r0
    38c4:	b1 1d       	adc	r27, r1
    38c6:	63 9f       	mul	r22, r19
    38c8:	aa 27       	eor	r26, r26
    38ca:	f0 0d       	add	r31, r0
    38cc:	b1 1d       	adc	r27, r1
    38ce:	aa 1f       	adc	r26, r26
    38d0:	64 9f       	mul	r22, r20
    38d2:	66 27       	eor	r22, r22
    38d4:	b0 0d       	add	r27, r0
    38d6:	a1 1d       	adc	r26, r1
    38d8:	66 1f       	adc	r22, r22
    38da:	82 9f       	mul	r24, r18
    38dc:	22 27       	eor	r18, r18
    38de:	b0 0d       	add	r27, r0
    38e0:	a1 1d       	adc	r26, r1
    38e2:	62 1f       	adc	r22, r18
    38e4:	73 9f       	mul	r23, r19
    38e6:	b0 0d       	add	r27, r0
    38e8:	a1 1d       	adc	r26, r1
    38ea:	62 1f       	adc	r22, r18
    38ec:	83 9f       	mul	r24, r19
    38ee:	a0 0d       	add	r26, r0
    38f0:	61 1d       	adc	r22, r1
    38f2:	22 1f       	adc	r18, r18
    38f4:	74 9f       	mul	r23, r20
    38f6:	33 27       	eor	r19, r19
    38f8:	a0 0d       	add	r26, r0
    38fa:	61 1d       	adc	r22, r1
    38fc:	23 1f       	adc	r18, r19
    38fe:	84 9f       	mul	r24, r20
    3900:	60 0d       	add	r22, r0
    3902:	21 1d       	adc	r18, r1
    3904:	82 2f       	mov	r24, r18
    3906:	76 2f       	mov	r23, r22
    3908:	6a 2f       	mov	r22, r26
    390a:	11 24       	eor	r1, r1
    390c:	9f 57       	subi	r25, 0x7F	; 127
    390e:	50 40       	sbci	r21, 0x00	; 0
    3910:	9a f0       	brmi	.+38     	; 0x3938 <__mulsf3_pse+0x88>
    3912:	f1 f0       	breq	.+60     	; 0x3950 <__mulsf3_pse+0xa0>
    3914:	88 23       	and	r24, r24
    3916:	4a f0       	brmi	.+18     	; 0x392a <__mulsf3_pse+0x7a>
    3918:	ee 0f       	add	r30, r30
    391a:	ff 1f       	adc	r31, r31
    391c:	bb 1f       	adc	r27, r27
    391e:	66 1f       	adc	r22, r22
    3920:	77 1f       	adc	r23, r23
    3922:	88 1f       	adc	r24, r24
    3924:	91 50       	subi	r25, 0x01	; 1
    3926:	50 40       	sbci	r21, 0x00	; 0
    3928:	a9 f7       	brne	.-22     	; 0x3914 <__mulsf3_pse+0x64>
    392a:	9e 3f       	cpi	r25, 0xFE	; 254
    392c:	51 05       	cpc	r21, r1
    392e:	80 f0       	brcs	.+32     	; 0x3950 <__mulsf3_pse+0xa0>
    3930:	0c 94 ec 1b 	jmp	0x37d8	; 0x37d8 <__fp_inf>
    3934:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__fp_szero>
    3938:	5f 3f       	cpi	r21, 0xFF	; 255
    393a:	e4 f3       	brlt	.-8      	; 0x3934 <__mulsf3_pse+0x84>
    393c:	98 3e       	cpi	r25, 0xE8	; 232
    393e:	d4 f3       	brlt	.-12     	; 0x3934 <__mulsf3_pse+0x84>
    3940:	86 95       	lsr	r24
    3942:	77 95       	ror	r23
    3944:	67 95       	ror	r22
    3946:	b7 95       	ror	r27
    3948:	f7 95       	ror	r31
    394a:	e7 95       	ror	r30
    394c:	9f 5f       	subi	r25, 0xFF	; 255
    394e:	c1 f7       	brne	.-16     	; 0x3940 <__mulsf3_pse+0x90>
    3950:	fe 2b       	or	r31, r30
    3952:	88 0f       	add	r24, r24
    3954:	91 1d       	adc	r25, r1
    3956:	96 95       	lsr	r25
    3958:	87 95       	ror	r24
    395a:	97 f9       	bld	r25, 7
    395c:	08 95       	ret

0000395e <__tablejump2__>:
    395e:	ee 0f       	add	r30, r30
    3960:	ff 1f       	adc	r31, r31
    3962:	88 1f       	adc	r24, r24
    3964:	8b bf       	out	0x3b, r24	; 59
    3966:	07 90       	elpm	r0, Z+
    3968:	f6 91       	elpm	r31, Z
    396a:	e0 2d       	mov	r30, r0
    396c:	19 94       	eijmp

0000396e <memcpy>:
    396e:	fb 01       	movw	r30, r22
    3970:	dc 01       	movw	r26, r24
    3972:	02 c0       	rjmp	.+4      	; 0x3978 <memcpy+0xa>
    3974:	01 90       	ld	r0, Z+
    3976:	0d 92       	st	X+, r0
    3978:	41 50       	subi	r20, 0x01	; 1
    397a:	50 40       	sbci	r21, 0x00	; 0
    397c:	d8 f7       	brcc	.-10     	; 0x3974 <memcpy+0x6>
    397e:	08 95       	ret

00003980 <memset>:
    3980:	dc 01       	movw	r26, r24
    3982:	01 c0       	rjmp	.+2      	; 0x3986 <memset+0x6>
    3984:	6d 93       	st	X+, r22
    3986:	41 50       	subi	r20, 0x01	; 1
    3988:	50 40       	sbci	r21, 0x00	; 0
    398a:	e0 f7       	brcc	.-8      	; 0x3984 <memset+0x4>
    398c:	08 95       	ret

0000398e <__itoa_ncheck>:
    398e:	bb 27       	eor	r27, r27
    3990:	4a 30       	cpi	r20, 0x0A	; 10
    3992:	31 f4       	brne	.+12     	; 0x39a0 <__itoa_ncheck+0x12>
    3994:	99 23       	and	r25, r25
    3996:	22 f4       	brpl	.+8      	; 0x39a0 <__itoa_ncheck+0x12>
    3998:	bd e2       	ldi	r27, 0x2D	; 45
    399a:	90 95       	com	r25
    399c:	81 95       	neg	r24
    399e:	9f 4f       	sbci	r25, 0xFF	; 255
    39a0:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <__utoa_common>

000039a4 <__utoa_ncheck>:
    39a4:	bb 27       	eor	r27, r27

000039a6 <__utoa_common>:
    39a6:	fb 01       	movw	r30, r22
    39a8:	55 27       	eor	r21, r21
    39aa:	aa 27       	eor	r26, r26
    39ac:	88 0f       	add	r24, r24
    39ae:	99 1f       	adc	r25, r25
    39b0:	aa 1f       	adc	r26, r26
    39b2:	a4 17       	cp	r26, r20
    39b4:	10 f0       	brcs	.+4      	; 0x39ba <__utoa_common+0x14>
    39b6:	a4 1b       	sub	r26, r20
    39b8:	83 95       	inc	r24
    39ba:	50 51       	subi	r21, 0x10	; 16
    39bc:	b9 f7       	brne	.-18     	; 0x39ac <__utoa_common+0x6>
    39be:	a0 5d       	subi	r26, 0xD0	; 208
    39c0:	aa 33       	cpi	r26, 0x3A	; 58
    39c2:	08 f0       	brcs	.+2      	; 0x39c6 <__utoa_common+0x20>
    39c4:	a9 5d       	subi	r26, 0xD9	; 217
    39c6:	a1 93       	st	Z+, r26
    39c8:	00 97       	sbiw	r24, 0x00	; 0
    39ca:	79 f7       	brne	.-34     	; 0x39aa <__utoa_common+0x4>
    39cc:	b1 11       	cpse	r27, r1
    39ce:	b1 93       	st	Z+, r27
    39d0:	11 92       	st	Z+, r1
    39d2:	cb 01       	movw	r24, r22
    39d4:	0c 94 ec 1c 	jmp	0x39d8	; 0x39d8 <strrev>

000039d8 <strrev>:
    39d8:	dc 01       	movw	r26, r24
    39da:	fc 01       	movw	r30, r24
    39dc:	67 2f       	mov	r22, r23
    39de:	71 91       	ld	r23, Z+
    39e0:	77 23       	and	r23, r23
    39e2:	e1 f7       	brne	.-8      	; 0x39dc <strrev+0x4>
    39e4:	32 97       	sbiw	r30, 0x02	; 2
    39e6:	04 c0       	rjmp	.+8      	; 0x39f0 <strrev+0x18>
    39e8:	7c 91       	ld	r23, X
    39ea:	6d 93       	st	X+, r22
    39ec:	70 83       	st	Z, r23
    39ee:	62 91       	ld	r22, -Z
    39f0:	ae 17       	cp	r26, r30
    39f2:	bf 07       	cpc	r27, r31
    39f4:	c8 f3       	brcs	.-14     	; 0x39e8 <strrev+0x10>
    39f6:	08 95       	ret

000039f8 <_exit>:
    39f8:	f8 94       	cli

000039fa <__stop_program>:
    39fa:	ff cf       	rjmp	.-2      	; 0x39fa <__stop_program>
